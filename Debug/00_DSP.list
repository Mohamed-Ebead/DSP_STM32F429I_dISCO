
00_DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa9c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800fc50  0800fc50  0001fc50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801013c  0801013c  00030700  2**0
                  CONTENTS
  4 .ARM          00000008  0801013c  0801013c  0002013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010144  08010144  00030700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010144  08010144  00020144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010148  08010148  00020148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000700  20000000  0801014c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030700  2**0
                  CONTENTS
 10 .bss          00000a14  20000700  20000700  00030700  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001114  20001114  00030700  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030700  2**0
                  CONTENTS, READONLY
 13 .debug_info   000252fd  00000000  00000000  00030730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d9e  00000000  00000000  00055a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d80  00000000  00000000  0005a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ac2c  00000000  00000000  0005c550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024f39  00000000  00000000  0008717c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee2fa  00000000  00000000  000ac0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0019a3af  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00001ba0  00000000  00000000  0019a478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009624  00000000  00000000  0019c018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000005c9  00000000  00000000  001a563c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000700 	.word	0x20000700
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800fc34 	.word	0x0800fc34

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000704 	.word	0x20000704
 80001ec:	0800fc34 	.word	0x0800fc34

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart5, &ch, sizeof(ch), HAL_MAX_DELAY)  ;
 8001020:	1d39      	adds	r1, r7, #4
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	2204      	movs	r2, #4
 8001028:	4803      	ldr	r0, [pc, #12]	; (8001038 <__io_putchar+0x20>)
 800102a:	f005 fccc 	bl	80069c6 <HAL_UART_Transmit>
	return ch ;
 800102e:	687b      	ldr	r3, [r7, #4]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000900 	.word	0x20000900

0800103c <PlotSignal>:



void PlotSignal(float Signal[] ,uint16_t Len)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
	uint16_t index = 0 ;
 8001048:	2300      	movs	r3, #0
 800104a:	81fb      	strh	r3, [r7, #14]
	{
		Signal_Sample_gf = Signal[index] ;
		HAL_Delay(300);
	}
#elif ( EXTERNAL_LOGIC_ANALYZER == 1  )
	for (index = 0 ; index < Len ; index ++)
 800104c:	2300      	movs	r3, #0
 800104e:	81fb      	strh	r3, [r7, #14]
 8001050:	e013      	b.n	800107a <PlotSignal+0x3e>
	{
//		HAL_UART_Transmit(&huart5, &Signal[index], sizeof(Signal[index]), HAL_MAX_DELAY)  ;
//		HAL_UART_Transmit(&huart5, "\r\n", strlen("\r\n"), HAL_MAX_DELAY)  ;

		printf("%f\r\n" , Signal[index]);
 8001052:	89fb      	ldrh	r3, [r7, #14]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa83 	bl	8000568 <__aeabi_f2d>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4809      	ldr	r0, [pc, #36]	; (800108c <PlotSignal+0x50>)
 8001068:	f00a fbf0 	bl	800b84c <iprintf>
		HAL_Delay(300);
 800106c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001070:	f001 fa8e 	bl	8002590 <HAL_Delay>
	for (index = 0 ; index < Len ; index ++)
 8001074:	89fb      	ldrh	r3, [r7, #14]
 8001076:	3301      	adds	r3, #1
 8001078:	81fb      	strh	r3, [r7, #14]
 800107a:	89fa      	ldrh	r2, [r7, #14]
 800107c:	887b      	ldrh	r3, [r7, #2]
 800107e:	429a      	cmp	r2, r3
 8001080:	d3e7      	bcc.n	8001052 <PlotSignal+0x16>
	}
#endif
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	0800fc50 	.word	0x0800fc50

08001090 <Signal_GetMean>:


static float32_t Signal_GetMean(float32_t *sig_src_arr , uint32_t sig_length)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
	float32_t mean_lf32 = 0.0 ;
 800109a:	f04f 0300 	mov.w	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
	uint32_t i ;

	for (i = 0 ; i < sig_length ; i++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	e00e      	b.n	80010c4 <Signal_GetMean+0x34>
	{
		mean_lf32 = mean_lf32 + sig_src_arr[i] ;
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	edd3 7a00 	vldr	s15, [r3]
 80010b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80010b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ba:	edc7 7a03 	vstr	s15, [r7, #12]
	for (i = 0 ; i < sig_length ; i++)
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	3301      	adds	r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d3ec      	bcc.n	80010a6 <Signal_GetMean+0x16>
	}

	mean_lf32 = mean_lf32 / (float32_t)sig_length  ;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010d6:	edd7 6a03 	vldr	s13, [r7, #12]
 80010da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010de:	edc7 7a03 	vstr	s15, [r7, #12]

	return mean_lf32 ;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	ee07 3a90 	vmov	s15, r3
}
 80010e8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <Signal_GetVariance>:

static float32_t Signal_GetVariance(float32_t *sig_src_arr , float32_t sig_mean,uint32_t sig_length)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	ed87 0a02 	vstr	s0, [r7, #8]
 8001102:	6079      	str	r1, [r7, #4]

	float32_t variance_lf32 = 0.0 ;
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
	uint32_t i ;

	for (i = 0 ; i < sig_length ; i++)
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	e01a      	b.n	8001146 <Signal_GetVariance+0x50>
	{
		variance_lf32 = variance_lf32 + powf((sig_src_arr[i] -1),2);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	edd3 7a00 	vldr	s15, [r3]
 800111c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001120:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001124:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001128:	eeb0 0a67 	vmov.f32	s0, s15
 800112c:	f00e f8e0 	bl	800f2f0 <powf>
 8001130:	eeb0 7a40 	vmov.f32	s14, s0
 8001134:	edd7 7a05 	vldr	s15, [r7, #20]
 8001138:	ee77 7a87 	vadd.f32	s15, s15, s14
 800113c:	edc7 7a05 	vstr	s15, [r7, #20]
	for (i = 0 ; i < sig_length ; i++)
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	3301      	adds	r3, #1
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	429a      	cmp	r2, r3
 800114c:	d3e0      	bcc.n	8001110 <Signal_GetVariance+0x1a>
	}

	variance_lf32 = variance_lf32 / ((float32_t)(sig_length-1))  ;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3b01      	subs	r3, #1
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800115a:	edd7 6a05 	vldr	s13, [r7, #20]
 800115e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001162:	edc7 7a05 	vstr	s15, [r7, #20]
	return variance_lf32 ;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	ee07 3a90 	vmov	s15, r3
}
 800116c:	eeb0 0a67 	vmov.f32	s0, s15
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <Signal_GetStdDev>:


static float32_t Signal_GetStdDev(float32_t sig_variance )
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b084      	sub	sp, #16
 800117a:	af00      	add	r7, sp, #0
 800117c:	ed87 0a01 	vstr	s0, [r7, #4]
	float32_t StdDev_lf32  = sqrt(sig_variance);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff f9f1 	bl	8000568 <__aeabi_f2d>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	ec43 2b10 	vmov	d0, r2, r3
 800118e:	f00e f883 	bl	800f298 <sqrt>
 8001192:	ec53 2b10 	vmov	r2, r3, d0
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f7ff fd35 	bl	8000c08 <__aeabi_d2f>
 800119e:	4603      	mov	r3, r0
 80011a0:	60fb      	str	r3, [r7, #12]
	return StdDev_lf32 ;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	ee07 3a90 	vmov	s15, r3
}
 80011a8:	eeb0 0a67 	vmov.f32	s0, s15
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b8:	f001 f9a8 	bl	800250c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011bc:	f000 f860 	bl	8001280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c0:	f000 faf8 	bl	80017b4 <MX_GPIO_Init>
  MX_CRC_Init();
 80011c4:	f000 f8c6 	bl	8001354 <MX_CRC_Init>
  MX_DMA2D_Init();
 80011c8:	f000 f8d8 	bl	800137c <MX_DMA2D_Init>
  MX_FMC_Init();
 80011cc:	f000 faa2 	bl	8001714 <MX_FMC_Init>
  MX_I2C3_Init();
 80011d0:	f000 f906 	bl	80013e0 <MX_I2C3_Init>
  MX_LTDC_Init();
 80011d4:	f000 f944 	bl	8001460 <MX_LTDC_Init>
  MX_SPI5_Init();
 80011d8:	f000 f9c2 	bl	8001560 <MX_SPI5_Init>
  MX_TIM1_Init();
 80011dc:	f000 f9f6 	bl	80015cc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80011e0:	f000 fa6e 	bl	80016c0 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80011e4:	f008 fffe 	bl	800a1e4 <MX_USB_HOST_Init>
  MX_UART5_Init();
 80011e8:	f000 fa40 	bl	800166c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  // enable floating point  full access
  SCB->CPACR |= (0xF << 20);
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <main+0xb0>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f2:	4a1c      	ldr	r2, [pc, #112]	; (8001264 <main+0xb0>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88



  Signal_Mean_gf32 = Signal_GetMean(inputSignal_f32_1kHz_15kHz, _1k_HZ_SIGNAL_LEN);
 80011fc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001200:	4819      	ldr	r0, [pc, #100]	; (8001268 <main+0xb4>)
 8001202:	f7ff ff45 	bl	8001090 <Signal_GetMean>
 8001206:	eef0 7a40 	vmov.f32	s15, s0
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <main+0xb8>)
 800120c:	edc3 7a00 	vstr	s15, [r3]
  Signal_Variance_gf32 = Signal_GetVariance(inputSignal_f32_1kHz_15kHz, Signal_Mean_gf32, _1k_HZ_SIGNAL_LEN) ;
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <main+0xb8>)
 8001212:	edd3 7a00 	vldr	s15, [r3]
 8001216:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800121a:	eeb0 0a67 	vmov.f32	s0, s15
 800121e:	4812      	ldr	r0, [pc, #72]	; (8001268 <main+0xb4>)
 8001220:	f7ff ff69 	bl	80010f6 <Signal_GetVariance>
 8001224:	eef0 7a40 	vmov.f32	s15, s0
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <main+0xbc>)
 800122a:	edc3 7a00 	vstr	s15, [r3]
  Signal_StdDev_gf32 = Signal_GetStdDev(Signal_Sample_gf);
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <main+0xc0>)
 8001230:	edd3 7a00 	vldr	s15, [r3]
 8001234:	eeb0 0a67 	vmov.f32	s0, s15
 8001238:	f7ff ff9d 	bl	8001176 <Signal_GetStdDev>
 800123c:	eef0 7a40 	vmov.f32	s15, s0
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <main+0xc4>)
 8001242:	edc3 7a00 	vstr	s15, [r3]

  // CMSIS fn
  arm_std_f32(inputSignal_f32_1kHz_15kHz, _1k_HZ_SIGNAL_LEN, &Signal_StdDev_CMSIS_gf32);
 8001246:	4a0d      	ldr	r2, [pc, #52]	; (800127c <main+0xc8>)
 8001248:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800124c:	4806      	ldr	r0, [pc, #24]	; (8001268 <main+0xb4>)
 800124e:	f009 fad7 	bl	800a800 <arm_std_f32>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001252:	f008 ffed 	bl	800a230 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
//	PlotSignal(_5hz_signal , _5_HZ_SIGNAL_LEN);

	PlotSignal(inputSignal_f32_1kHz_15kHz , _1k_HZ_SIGNAL_LEN);
 8001256:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <main+0xb4>)
 800125c:	f7ff feee 	bl	800103c <PlotSignal>
    MX_USB_HOST_Process();
 8001260:	e7f7      	b.n	8001252 <main+0x9e>
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00
 8001268:	20000000 	.word	0x20000000
 800126c:	200009c0 	.word	0x200009c0
 8001270:	200009c4 	.word	0x200009c4
 8001274:	200009bc 	.word	0x200009bc
 8001278:	200009c8 	.word	0x200009c8
 800127c:	200009cc 	.word	0x200009cc

08001280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b094      	sub	sp, #80	; 0x50
 8001284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	2230      	movs	r2, #48	; 0x30
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f009 fb7a 	bl	800a988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	4b28      	ldr	r3, [pc, #160]	; (800134c <SystemClock_Config+0xcc>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	4a27      	ldr	r2, [pc, #156]	; (800134c <SystemClock_Config+0xcc>)
 80012ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b2:	6413      	str	r3, [r2, #64]	; 0x40
 80012b4:	4b25      	ldr	r3, [pc, #148]	; (800134c <SystemClock_Config+0xcc>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c0:	2300      	movs	r3, #0
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	4b22      	ldr	r3, [pc, #136]	; (8001350 <SystemClock_Config+0xd0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a21      	ldr	r2, [pc, #132]	; (8001350 <SystemClock_Config+0xd0>)
 80012ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <SystemClock_Config+0xd0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012dc:	2301      	movs	r3, #1
 80012de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e6:	2302      	movs	r3, #2
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012f0:	2308      	movs	r3, #8
 80012f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012fe:	2307      	movs	r3, #7
 8001300:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001302:	f107 0320 	add.w	r3, r7, #32
 8001306:	4618      	mov	r0, r3
 8001308:	f003 ff48 	bl	800519c <HAL_RCC_OscConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001312:	f000 fb71 	bl	80019f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001316:	230f      	movs	r3, #15
 8001318:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131a:	2302      	movs	r3, #2
 800131c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001322:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001326:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	2105      	movs	r1, #5
 8001334:	4618      	mov	r0, r3
 8001336:	f004 f9a9 	bl	800568c <HAL_RCC_ClockConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001340:	f000 fb5a 	bl	80019f8 <Error_Handler>
  }
}
 8001344:	bf00      	nop
 8001346:	3750      	adds	r7, #80	; 0x50
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800
 8001350:	40007000 	.word	0x40007000

08001354 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_CRC_Init+0x20>)
 800135a:	4a07      	ldr	r2, [pc, #28]	; (8001378 <MX_CRC_Init+0x24>)
 800135c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_CRC_Init+0x20>)
 8001360:	f001 fa1c 	bl	800279c <HAL_CRC_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800136a:	f000 fb45 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000071c 	.word	0x2000071c
 8001378:	40023000 	.word	0x40023000

0800137c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <MX_DMA2D_Init+0x5c>)
 8001382:	4a16      	ldr	r2, [pc, #88]	; (80013dc <MX_DMA2D_Init+0x60>)
 8001384:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <MX_DMA2D_Init+0x5c>)
 8001388:	2200      	movs	r2, #0
 800138a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <MX_DMA2D_Init+0x5c>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_DMA2D_Init+0x5c>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_DMA2D_Init+0x5c>)
 800139a:	2200      	movs	r2, #0
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_DMA2D_Init+0x5c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_DMA2D_Init+0x5c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_DMA2D_Init+0x5c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80013b0:	4809      	ldr	r0, [pc, #36]	; (80013d8 <MX_DMA2D_Init+0x5c>)
 80013b2:	f001 fa0f 	bl	80027d4 <HAL_DMA2D_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80013bc:	f000 fb1c 	bl	80019f8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80013c0:	2101      	movs	r1, #1
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_DMA2D_Init+0x5c>)
 80013c4:	f001 fb60 	bl	8002a88 <HAL_DMA2D_ConfigLayer>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80013ce:	f000 fb13 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000724 	.word	0x20000724
 80013dc:	4002b000 	.word	0x4002b000

080013e0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <MX_I2C3_Init+0x74>)
 80013e6:	4a1c      	ldr	r2, [pc, #112]	; (8001458 <MX_I2C3_Init+0x78>)
 80013e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_I2C3_Init+0x74>)
 80013ec:	4a1b      	ldr	r2, [pc, #108]	; (800145c <MX_I2C3_Init+0x7c>)
 80013ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f0:	4b18      	ldr	r3, [pc, #96]	; (8001454 <MX_I2C3_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_I2C3_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <MX_I2C3_Init+0x74>)
 80013fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001402:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <MX_I2C3_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <MX_I2C3_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <MX_I2C3_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_I2C3_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_I2C3_Init+0x74>)
 800141e:	f003 f995 	bl	800474c <HAL_I2C_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001428:	f000 fae6 	bl	80019f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800142c:	2100      	movs	r1, #0
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <MX_I2C3_Init+0x74>)
 8001430:	f003 fad0 	bl	80049d4 <HAL_I2CEx_ConfigAnalogFilter>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800143a:	f000 fadd 	bl	80019f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800143e:	2100      	movs	r1, #0
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_I2C3_Init+0x74>)
 8001442:	f003 fb03 	bl	8004a4c <HAL_I2CEx_ConfigDigitalFilter>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800144c:	f000 fad4 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000764 	.word	0x20000764
 8001458:	40005c00 	.word	0x40005c00
 800145c:	000186a0 	.word	0x000186a0

08001460 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08e      	sub	sp, #56	; 0x38
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2234      	movs	r2, #52	; 0x34
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f009 fa8b 	bl	800a988 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001472:	4b39      	ldr	r3, [pc, #228]	; (8001558 <MX_LTDC_Init+0xf8>)
 8001474:	4a39      	ldr	r2, [pc, #228]	; (800155c <MX_LTDC_Init+0xfc>)
 8001476:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001478:	4b37      	ldr	r3, [pc, #220]	; (8001558 <MX_LTDC_Init+0xf8>)
 800147a:	2200      	movs	r2, #0
 800147c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800147e:	4b36      	ldr	r3, [pc, #216]	; (8001558 <MX_LTDC_Init+0xf8>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001484:	4b34      	ldr	r3, [pc, #208]	; (8001558 <MX_LTDC_Init+0xf8>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800148a:	4b33      	ldr	r3, [pc, #204]	; (8001558 <MX_LTDC_Init+0xf8>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001490:	4b31      	ldr	r3, [pc, #196]	; (8001558 <MX_LTDC_Init+0xf8>)
 8001492:	2209      	movs	r2, #9
 8001494:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001496:	4b30      	ldr	r3, [pc, #192]	; (8001558 <MX_LTDC_Init+0xf8>)
 8001498:	2201      	movs	r2, #1
 800149a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800149c:	4b2e      	ldr	r3, [pc, #184]	; (8001558 <MX_LTDC_Init+0xf8>)
 800149e:	221d      	movs	r2, #29
 80014a0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80014a2:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <MX_LTDC_Init+0xf8>)
 80014a4:	2203      	movs	r2, #3
 80014a6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <MX_LTDC_Init+0xf8>)
 80014aa:	f240 120d 	movw	r2, #269	; 0x10d
 80014ae:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <MX_LTDC_Init+0xf8>)
 80014b2:	f240 1243 	movw	r2, #323	; 0x143
 80014b6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80014b8:	4b27      	ldr	r3, [pc, #156]	; (8001558 <MX_LTDC_Init+0xf8>)
 80014ba:	f240 1217 	movw	r2, #279	; 0x117
 80014be:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80014c0:	4b25      	ldr	r3, [pc, #148]	; (8001558 <MX_LTDC_Init+0xf8>)
 80014c2:	f240 1247 	movw	r2, #327	; 0x147
 80014c6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80014c8:	4b23      	ldr	r3, [pc, #140]	; (8001558 <MX_LTDC_Init+0xf8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80014d0:	4b21      	ldr	r3, [pc, #132]	; (8001558 <MX_LTDC_Init+0xf8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <MX_LTDC_Init+0xf8>)
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80014e0:	481d      	ldr	r0, [pc, #116]	; (8001558 <MX_LTDC_Init+0xf8>)
 80014e2:	f003 faf3 	bl	8004acc <HAL_LTDC_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80014ec:	f000 fa84 	bl	80019f8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80014f4:	23f0      	movs	r3, #240	; 0xf0
 80014f6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80014fc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001500:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001502:	2302      	movs	r3, #2
 8001504:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001506:	23ff      	movs	r3, #255	; 0xff
 8001508:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800150e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001512:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001514:	2307      	movs	r3, #7
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001518:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800151e:	23f0      	movs	r3, #240	; 0xf0
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001522:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2200      	movs	r2, #0
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_LTDC_Init+0xf8>)
 8001542:	f003 fc55 	bl	8004df0 <HAL_LTDC_ConfigLayer>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800154c:	f000 fa54 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	3738      	adds	r7, #56	; 0x38
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200007b8 	.word	0x200007b8
 800155c:	40016800 	.word	0x40016800

08001560 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <MX_SPI5_Init+0x64>)
 8001566:	4a18      	ldr	r2, [pc, #96]	; (80015c8 <MX_SPI5_Init+0x68>)
 8001568:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <MX_SPI5_Init+0x64>)
 800156c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001570:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <MX_SPI5_Init+0x64>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <MX_SPI5_Init+0x64>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_SPI5_Init+0x64>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <MX_SPI5_Init+0x64>)
 8001586:	2200      	movs	r2, #0
 8001588:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_SPI5_Init+0x64>)
 800158c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001590:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <MX_SPI5_Init+0x64>)
 8001594:	2218      	movs	r2, #24
 8001596:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <MX_SPI5_Init+0x64>)
 800159a:	2200      	movs	r2, #0
 800159c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <MX_SPI5_Init+0x64>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <MX_SPI5_Init+0x64>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_SPI5_Init+0x64>)
 80015ac:	220a      	movs	r2, #10
 80015ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80015b0:	4804      	ldr	r0, [pc, #16]	; (80015c4 <MX_SPI5_Init+0x64>)
 80015b2:	f004 fcb1 	bl	8005f18 <HAL_SPI_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80015bc:	f000 fa1c 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000860 	.word	0x20000860
 80015c8:	40015000 	.word	0x40015000

080015cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d2:	f107 0308 	add.w	r3, r7, #8
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e0:	463b      	mov	r3, r7
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <MX_TIM1_Init+0x98>)
 80015ea:	4a1f      	ldr	r2, [pc, #124]	; (8001668 <MX_TIM1_Init+0x9c>)
 80015ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015ee:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <MX_TIM1_Init+0x98>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <MX_TIM1_Init+0x98>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_TIM1_Init+0x98>)
 80015fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001600:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <MX_TIM1_Init+0x98>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001608:	4b16      	ldr	r3, [pc, #88]	; (8001664 <MX_TIM1_Init+0x98>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <MX_TIM1_Init+0x98>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001614:	4813      	ldr	r0, [pc, #76]	; (8001664 <MX_TIM1_Init+0x98>)
 8001616:	f004 fd08 	bl	800602a <HAL_TIM_Base_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001620:	f000 f9ea 	bl	80019f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001628:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	4619      	mov	r1, r3
 8001630:	480c      	ldr	r0, [pc, #48]	; (8001664 <MX_TIM1_Init+0x98>)
 8001632:	f004 fec1 	bl	80063b8 <HAL_TIM_ConfigClockSource>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800163c:	f000 f9dc 	bl	80019f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001648:	463b      	mov	r3, r7
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_TIM1_Init+0x98>)
 800164e:	f005 f8dd 	bl	800680c <HAL_TIMEx_MasterConfigSynchronization>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001658:	f000 f9ce 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200008b8 	.word	0x200008b8
 8001668:	40010000 	.word	0x40010000

0800166c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_UART5_Init+0x4c>)
 8001672:	4a12      	ldr	r2, [pc, #72]	; (80016bc <MX_UART5_Init+0x50>)
 8001674:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <MX_UART5_Init+0x4c>)
 8001678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800167c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_UART5_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_UART5_Init+0x4c>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <MX_UART5_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_UART5_Init+0x4c>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <MX_UART5_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_UART5_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_UART5_Init+0x4c>)
 80016a4:	f005 f942 	bl	800692c <HAL_UART_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80016ae:	f000 f9a3 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000900 	.word	0x20000900
 80016bc:	40005000 	.word	0x40005000

080016c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	; (8001710 <MX_USART1_UART_Init+0x50>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016e6:	220c      	movs	r2, #12
 80016e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_USART1_UART_Init+0x4c>)
 80016f8:	f005 f918 	bl	800692c <HAL_UART_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001702:	f000 f979 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000944 	.word	0x20000944
 8001710:	40011000 	.word	0x40011000

08001714 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	615a      	str	r2, [r3, #20]
 800172a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800172c:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <MX_FMC_Init+0x98>)
 800172e:	4a20      	ldr	r2, [pc, #128]	; (80017b0 <MX_FMC_Init+0x9c>)
 8001730:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001732:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <MX_FMC_Init+0x98>)
 8001734:	2201      	movs	r2, #1
 8001736:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001738:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <MX_FMC_Init+0x98>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800173e:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <MX_FMC_Init+0x98>)
 8001740:	2204      	movs	r2, #4
 8001742:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <MX_FMC_Init+0x98>)
 8001746:	2210      	movs	r2, #16
 8001748:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <MX_FMC_Init+0x98>)
 800174c:	2240      	movs	r2, #64	; 0x40
 800174e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001750:	4b16      	ldr	r3, [pc, #88]	; (80017ac <MX_FMC_Init+0x98>)
 8001752:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001756:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <MX_FMC_Init+0x98>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <MX_FMC_Init+0x98>)
 8001760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001764:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_FMC_Init+0x98>)
 8001768:	2200      	movs	r2, #0
 800176a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <MX_FMC_Init+0x98>)
 800176e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001774:	2302      	movs	r3, #2
 8001776:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001778:	2307      	movs	r3, #7
 800177a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800177c:	2304      	movs	r3, #4
 800177e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001780:	2307      	movs	r3, #7
 8001782:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001784:	2303      	movs	r3, #3
 8001786:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001788:	2302      	movs	r3, #2
 800178a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800178c:	2302      	movs	r3, #2
 800178e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	4619      	mov	r1, r3
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_FMC_Init+0x98>)
 8001796:	f004 fb8b 	bl	8005eb0 <HAL_SDRAM_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80017a0:	f000 f92a 	bl	80019f8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80017a4:	bf00      	nop
 80017a6:	3720      	adds	r7, #32
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000988 	.word	0x20000988
 80017b0:	a0000140 	.word	0xa0000140

080017b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08e      	sub	sp, #56	; 0x38
 80017b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
 80017ce:	4b7b      	ldr	r3, [pc, #492]	; (80019bc <MX_GPIO_Init+0x208>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a7a      	ldr	r2, [pc, #488]	; (80019bc <MX_GPIO_Init+0x208>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b78      	ldr	r3, [pc, #480]	; (80019bc <MX_GPIO_Init+0x208>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	623b      	str	r3, [r7, #32]
 80017e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
 80017ea:	4b74      	ldr	r3, [pc, #464]	; (80019bc <MX_GPIO_Init+0x208>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a73      	ldr	r2, [pc, #460]	; (80019bc <MX_GPIO_Init+0x208>)
 80017f0:	f043 0320 	orr.w	r3, r3, #32
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b71      	ldr	r3, [pc, #452]	; (80019bc <MX_GPIO_Init+0x208>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	61fb      	str	r3, [r7, #28]
 8001800:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	61bb      	str	r3, [r7, #24]
 8001806:	4b6d      	ldr	r3, [pc, #436]	; (80019bc <MX_GPIO_Init+0x208>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a6c      	ldr	r2, [pc, #432]	; (80019bc <MX_GPIO_Init+0x208>)
 800180c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b6a      	ldr	r3, [pc, #424]	; (80019bc <MX_GPIO_Init+0x208>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181a:	61bb      	str	r3, [r7, #24]
 800181c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	4b66      	ldr	r3, [pc, #408]	; (80019bc <MX_GPIO_Init+0x208>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a65      	ldr	r2, [pc, #404]	; (80019bc <MX_GPIO_Init+0x208>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b63      	ldr	r3, [pc, #396]	; (80019bc <MX_GPIO_Init+0x208>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	4b5f      	ldr	r3, [pc, #380]	; (80019bc <MX_GPIO_Init+0x208>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a5e      	ldr	r2, [pc, #376]	; (80019bc <MX_GPIO_Init+0x208>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b5c      	ldr	r3, [pc, #368]	; (80019bc <MX_GPIO_Init+0x208>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b58      	ldr	r3, [pc, #352]	; (80019bc <MX_GPIO_Init+0x208>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a57      	ldr	r2, [pc, #348]	; (80019bc <MX_GPIO_Init+0x208>)
 8001860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b55      	ldr	r3, [pc, #340]	; (80019bc <MX_GPIO_Init+0x208>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	4b51      	ldr	r3, [pc, #324]	; (80019bc <MX_GPIO_Init+0x208>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a50      	ldr	r2, [pc, #320]	; (80019bc <MX_GPIO_Init+0x208>)
 800187c:	f043 0310 	orr.w	r3, r3, #16
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b4e      	ldr	r3, [pc, #312]	; (80019bc <MX_GPIO_Init+0x208>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0310 	and.w	r3, r3, #16
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	4b4a      	ldr	r3, [pc, #296]	; (80019bc <MX_GPIO_Init+0x208>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a49      	ldr	r2, [pc, #292]	; (80019bc <MX_GPIO_Init+0x208>)
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b47      	ldr	r3, [pc, #284]	; (80019bc <MX_GPIO_Init+0x208>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2116      	movs	r1, #22
 80018ae:	4844      	ldr	r0, [pc, #272]	; (80019c0 <MX_GPIO_Init+0x20c>)
 80018b0:	f001 fb28 	bl	8002f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2180      	movs	r1, #128	; 0x80
 80018b8:	4842      	ldr	r0, [pc, #264]	; (80019c4 <MX_GPIO_Init+0x210>)
 80018ba:	f001 fb23 	bl	8002f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80018c4:	4840      	ldr	r0, [pc, #256]	; (80019c8 <MX_GPIO_Init+0x214>)
 80018c6:	f001 fb1d 	bl	8002f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80018d0:	483e      	ldr	r0, [pc, #248]	; (80019cc <MX_GPIO_Init+0x218>)
 80018d2:	f001 fb17 	bl	8002f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80018d6:	2316      	movs	r3, #22
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ea:	4619      	mov	r1, r3
 80018ec:	4834      	ldr	r0, [pc, #208]	; (80019c0 <MX_GPIO_Init+0x20c>)
 80018ee:	f001 f95d 	bl	8002bac <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80018f2:	f248 0307 	movw	r3, #32775	; 0x8007
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018f8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001906:	4619      	mov	r1, r3
 8001908:	482e      	ldr	r0, [pc, #184]	; (80019c4 <MX_GPIO_Init+0x210>)
 800190a:	f001 f94f 	bl	8002bac <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800190e:	2380      	movs	r3, #128	; 0x80
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001912:	2301      	movs	r3, #1
 8001914:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800191e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001922:	4619      	mov	r1, r3
 8001924:	4827      	ldr	r0, [pc, #156]	; (80019c4 <MX_GPIO_Init+0x210>)
 8001926:	f001 f941 	bl	8002bac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800192a:	2320      	movs	r3, #32
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800192e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193c:	4619      	mov	r1, r3
 800193e:	4820      	ldr	r0, [pc, #128]	; (80019c0 <MX_GPIO_Init+0x20c>)
 8001940:	f001 f934 	bl	8002bac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001944:	2304      	movs	r3, #4
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001948:	2300      	movs	r3, #0
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001954:	4619      	mov	r1, r3
 8001956:	481e      	ldr	r0, [pc, #120]	; (80019d0 <MX_GPIO_Init+0x21c>)
 8001958:	f001 f928 	bl	8002bac <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800195c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001962:	2300      	movs	r3, #0
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800196a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196e:	4619      	mov	r1, r3
 8001970:	4815      	ldr	r0, [pc, #84]	; (80019c8 <MX_GPIO_Init+0x214>)
 8001972:	f001 f91b 	bl	8002bac <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001976:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197c:	2301      	movs	r3, #1
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198c:	4619      	mov	r1, r3
 800198e:	480e      	ldr	r0, [pc, #56]	; (80019c8 <MX_GPIO_Init+0x214>)
 8001990:	f001 f90c 	bl	8002bac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001994:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199a:	2301      	movs	r3, #1
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019aa:	4619      	mov	r1, r3
 80019ac:	4807      	ldr	r0, [pc, #28]	; (80019cc <MX_GPIO_Init+0x218>)
 80019ae:	f001 f8fd 	bl	8002bac <HAL_GPIO_Init>

}
 80019b2:	bf00      	nop
 80019b4:	3738      	adds	r7, #56	; 0x38
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40020800 	.word	0x40020800
 80019c4:	40020000 	.word	0x40020000
 80019c8:	40020c00 	.word	0x40020c00
 80019cc:	40021800 	.word	0x40021800
 80019d0:	40020400 	.word	0x40020400

080019d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d101      	bne.n	80019ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019e6:	f000 fdb3 	bl	8002550 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40001000 	.word	0x40001000

080019f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019fc:	b672      	cpsid	i
}
 80019fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <Error_Handler+0x8>
	...

08001a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a34:	6413      	str	r3, [r2, #64]	; 0x40
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800

08001a54 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <HAL_CRC_MspInit+0x3c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d10d      	bne.n	8001a82 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_CRC_MspInit+0x40>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <HAL_CRC_MspInit+0x40>)
 8001a70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <HAL_CRC_MspInit+0x40>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40023000 	.word	0x40023000
 8001a94:	40023800 	.word	0x40023800

08001a98 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0e      	ldr	r2, [pc, #56]	; (8001ae0 <HAL_DMA2D_MspInit+0x48>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d115      	bne.n	8001ad6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_DMA2D_MspInit+0x4c>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a0c      	ldr	r2, [pc, #48]	; (8001ae4 <HAL_DMA2D_MspInit+0x4c>)
 8001ab4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_DMA2D_MspInit+0x4c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2105      	movs	r1, #5
 8001aca:	205a      	movs	r0, #90	; 0x5a
 8001acc:	f000 fe3c 	bl	8002748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001ad0:	205a      	movs	r0, #90	; 0x5a
 8001ad2:	f000 fe55 	bl	8002780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	4002b000 	.word	0x4002b000
 8001ae4:	40023800 	.word	0x40023800

08001ae8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a29      	ldr	r2, [pc, #164]	; (8001bac <HAL_I2C_MspInit+0xc4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d14b      	bne.n	8001ba2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <HAL_I2C_MspInit+0xc8>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a27      	ldr	r2, [pc, #156]	; (8001bb0 <HAL_I2C_MspInit+0xc8>)
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <HAL_I2C_MspInit+0xc8>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <HAL_I2C_MspInit+0xc8>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a20      	ldr	r2, [pc, #128]	; (8001bb0 <HAL_I2C_MspInit+0xc8>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <HAL_I2C_MspInit+0xc8>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b48:	2312      	movs	r3, #18
 8001b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b54:	2304      	movs	r3, #4
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4815      	ldr	r0, [pc, #84]	; (8001bb4 <HAL_I2C_MspInit+0xcc>)
 8001b60:	f001 f824 	bl	8002bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001b64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b6a:	2312      	movs	r3, #18
 8001b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b76:	2304      	movs	r3, #4
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <HAL_I2C_MspInit+0xd0>)
 8001b82:	f001 f813 	bl	8002bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_I2C_MspInit+0xc8>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a08      	ldr	r2, [pc, #32]	; (8001bb0 <HAL_I2C_MspInit+0xc8>)
 8001b90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_I2C_MspInit+0xc8>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ba2:	bf00      	nop
 8001ba4:	3728      	adds	r7, #40	; 0x28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40005c00 	.word	0x40005c00
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	40020000 	.word	0x40020000

08001bbc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b09a      	sub	sp, #104	; 0x68
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd8:	2230      	movs	r2, #48	; 0x30
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f008 fed3 	bl	800a988 <memset>
  if(hltdc->Instance==LTDC)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a85      	ldr	r2, [pc, #532]	; (8001dfc <HAL_LTDC_MspInit+0x240>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	f040 8102 	bne.w	8001df2 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001bee:	2308      	movs	r3, #8
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8001bf2:	2364      	movs	r3, #100	; 0x64
 8001bf4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 ff94 	bl	8005b30 <HAL_RCCEx_PeriphCLKConfig>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001c0e:	f7ff fef3 	bl	80019f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	623b      	str	r3, [r7, #32]
 8001c16:	4b7a      	ldr	r3, [pc, #488]	; (8001e00 <HAL_LTDC_MspInit+0x244>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	4a79      	ldr	r2, [pc, #484]	; (8001e00 <HAL_LTDC_MspInit+0x244>)
 8001c1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c20:	6453      	str	r3, [r2, #68]	; 0x44
 8001c22:	4b77      	ldr	r3, [pc, #476]	; (8001e00 <HAL_LTDC_MspInit+0x244>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c2a:	623b      	str	r3, [r7, #32]
 8001c2c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	4b73      	ldr	r3, [pc, #460]	; (8001e00 <HAL_LTDC_MspInit+0x244>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a72      	ldr	r2, [pc, #456]	; (8001e00 <HAL_LTDC_MspInit+0x244>)
 8001c38:	f043 0320 	orr.w	r3, r3, #32
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b70      	ldr	r3, [pc, #448]	; (8001e00 <HAL_LTDC_MspInit+0x244>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	61fb      	str	r3, [r7, #28]
 8001c48:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
 8001c4e:	4b6c      	ldr	r3, [pc, #432]	; (8001e00 <HAL_LTDC_MspInit+0x244>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a6b      	ldr	r2, [pc, #428]	; (8001e00 <HAL_LTDC_MspInit+0x244>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b69      	ldr	r3, [pc, #420]	; (8001e00 <HAL_LTDC_MspInit+0x244>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	61bb      	str	r3, [r7, #24]
 8001c64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	4b65      	ldr	r3, [pc, #404]	; (8001e00 <HAL_LTDC_MspInit+0x244>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a64      	ldr	r2, [pc, #400]	; (8001e00 <HAL_LTDC_MspInit+0x244>)
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b62      	ldr	r3, [pc, #392]	; (8001e00 <HAL_LTDC_MspInit+0x244>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	4b5e      	ldr	r3, [pc, #376]	; (8001e00 <HAL_LTDC_MspInit+0x244>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a5d      	ldr	r2, [pc, #372]	; (8001e00 <HAL_LTDC_MspInit+0x244>)
 8001c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b5b      	ldr	r3, [pc, #364]	; (8001e00 <HAL_LTDC_MspInit+0x244>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b57      	ldr	r3, [pc, #348]	; (8001e00 <HAL_LTDC_MspInit+0x244>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a56      	ldr	r2, [pc, #344]	; (8001e00 <HAL_LTDC_MspInit+0x244>)
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b54      	ldr	r3, [pc, #336]	; (8001e00 <HAL_LTDC_MspInit+0x244>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	4b50      	ldr	r3, [pc, #320]	; (8001e00 <HAL_LTDC_MspInit+0x244>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a4f      	ldr	r2, [pc, #316]	; (8001e00 <HAL_LTDC_MspInit+0x244>)
 8001cc4:	f043 0308 	orr.w	r3, r3, #8
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b4d      	ldr	r3, [pc, #308]	; (8001e00 <HAL_LTDC_MspInit+0x244>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cda:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ce8:	230e      	movs	r3, #14
 8001cea:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001cec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4844      	ldr	r0, [pc, #272]	; (8001e04 <HAL_LTDC_MspInit+0x248>)
 8001cf4:	f000 ff5a 	bl	8002bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001cf8:	f641 0358 	movw	r3, #6232	; 0x1858
 8001cfc:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2300      	movs	r3, #0
 8001d08:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d0a:	230e      	movs	r3, #14
 8001d0c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d12:	4619      	mov	r1, r3
 8001d14:	483c      	ldr	r0, [pc, #240]	; (8001e08 <HAL_LTDC_MspInit+0x24c>)
 8001d16:	f000 ff49 	bl	8002bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d2a:	2309      	movs	r3, #9
 8001d2c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d32:	4619      	mov	r1, r3
 8001d34:	4835      	ldr	r0, [pc, #212]	; (8001e0c <HAL_LTDC_MspInit+0x250>)
 8001d36:	f000 ff39 	bl	8002bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001d3a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001d3e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d4c:	230e      	movs	r3, #14
 8001d4e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d54:	4619      	mov	r1, r3
 8001d56:	482d      	ldr	r0, [pc, #180]	; (8001e0c <HAL_LTDC_MspInit+0x250>)
 8001d58:	f000 ff28 	bl	8002bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001d5c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001d60:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d6e:	230e      	movs	r3, #14
 8001d70:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d76:	4619      	mov	r1, r3
 8001d78:	4825      	ldr	r0, [pc, #148]	; (8001e10 <HAL_LTDC_MspInit+0x254>)
 8001d7a:	f000 ff17 	bl	8002bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001d7e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001d82:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d90:	230e      	movs	r3, #14
 8001d92:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d98:	4619      	mov	r1, r3
 8001d9a:	481e      	ldr	r0, [pc, #120]	; (8001e14 <HAL_LTDC_MspInit+0x258>)
 8001d9c:	f000 ff06 	bl	8002bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001da0:	2348      	movs	r3, #72	; 0x48
 8001da2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001db0:	230e      	movs	r3, #14
 8001db2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001db8:	4619      	mov	r1, r3
 8001dba:	4817      	ldr	r0, [pc, #92]	; (8001e18 <HAL_LTDC_MspInit+0x25c>)
 8001dbc:	f000 fef6 	bl	8002bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001dc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dc4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001dd2:	2309      	movs	r3, #9
 8001dd4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dd6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dda:	4619      	mov	r1, r3
 8001ddc:	480c      	ldr	r0, [pc, #48]	; (8001e10 <HAL_LTDC_MspInit+0x254>)
 8001dde:	f000 fee5 	bl	8002bac <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2105      	movs	r1, #5
 8001de6:	2058      	movs	r0, #88	; 0x58
 8001de8:	f000 fcae 	bl	8002748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001dec:	2058      	movs	r0, #88	; 0x58
 8001dee:	f000 fcc7 	bl	8002780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001df2:	bf00      	nop
 8001df4:	3768      	adds	r7, #104	; 0x68
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40016800 	.word	0x40016800
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40021400 	.word	0x40021400
 8001e08:	40020000 	.word	0x40020000
 8001e0c:	40020400 	.word	0x40020400
 8001e10:	40021800 	.word	0x40021800
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40020c00 	.word	0x40020c00

08001e1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	; 0x28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <HAL_SPI_MspInit+0x84>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d12c      	bne.n	8001e98 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <HAL_SPI_MspInit+0x88>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	4a17      	ldr	r2, [pc, #92]	; (8001ea4 <HAL_SPI_MspInit+0x88>)
 8001e48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <HAL_SPI_MspInit+0x88>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <HAL_SPI_MspInit+0x88>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a10      	ldr	r2, [pc, #64]	; (8001ea4 <HAL_SPI_MspInit+0x88>)
 8001e64:	f043 0320 	orr.w	r3, r3, #32
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <HAL_SPI_MspInit+0x88>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0320 	and.w	r3, r3, #32
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001e76:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001e88:	2305      	movs	r3, #5
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4619      	mov	r1, r3
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <HAL_SPI_MspInit+0x8c>)
 8001e94:	f000 fe8a 	bl	8002bac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001e98:	bf00      	nop
 8001e9a:	3728      	adds	r7, #40	; 0x28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40015000 	.word	0x40015000
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40021400 	.word	0x40021400

08001eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <HAL_TIM_Base_MspInit+0x3c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d10d      	bne.n	8001eda <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_TIM_Base_MspInit+0x40>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <HAL_TIM_Base_MspInit+0x40>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <HAL_TIM_Base_MspInit+0x40>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	40023800 	.word	0x40023800

08001ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08c      	sub	sp, #48	; 0x30
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a42      	ldr	r2, [pc, #264]	; (8002018 <HAL_UART_MspInit+0x128>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d14b      	bne.n	8001faa <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	61bb      	str	r3, [r7, #24]
 8001f16:	4b41      	ldr	r3, [pc, #260]	; (800201c <HAL_UART_MspInit+0x12c>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	4a40      	ldr	r2, [pc, #256]	; (800201c <HAL_UART_MspInit+0x12c>)
 8001f1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f20:	6413      	str	r3, [r2, #64]	; 0x40
 8001f22:	4b3e      	ldr	r3, [pc, #248]	; (800201c <HAL_UART_MspInit+0x12c>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2a:	61bb      	str	r3, [r7, #24]
 8001f2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	4b3a      	ldr	r3, [pc, #232]	; (800201c <HAL_UART_MspInit+0x12c>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a39      	ldr	r2, [pc, #228]	; (800201c <HAL_UART_MspInit+0x12c>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b37      	ldr	r3, [pc, #220]	; (800201c <HAL_UART_MspInit+0x12c>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	4b33      	ldr	r3, [pc, #204]	; (800201c <HAL_UART_MspInit+0x12c>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a32      	ldr	r2, [pc, #200]	; (800201c <HAL_UART_MspInit+0x12c>)
 8001f54:	f043 0308 	orr.w	r3, r3, #8
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b30      	ldr	r3, [pc, #192]	; (800201c <HAL_UART_MspInit+0x12c>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f78:	2308      	movs	r3, #8
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f7c:	f107 031c 	add.w	r3, r7, #28
 8001f80:	4619      	mov	r1, r3
 8001f82:	4827      	ldr	r0, [pc, #156]	; (8002020 <HAL_UART_MspInit+0x130>)
 8001f84:	f000 fe12 	bl	8002bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f88:	2304      	movs	r3, #4
 8001f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f94:	2303      	movs	r3, #3
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f98:	2308      	movs	r3, #8
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f9c:	f107 031c 	add.w	r3, r7, #28
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4820      	ldr	r0, [pc, #128]	; (8002024 <HAL_UART_MspInit+0x134>)
 8001fa4:	f000 fe02 	bl	8002bac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001fa8:	e031      	b.n	800200e <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a1e      	ldr	r2, [pc, #120]	; (8002028 <HAL_UART_MspInit+0x138>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d12c      	bne.n	800200e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	4b18      	ldr	r3, [pc, #96]	; (800201c <HAL_UART_MspInit+0x12c>)
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbc:	4a17      	ldr	r2, [pc, #92]	; (800201c <HAL_UART_MspInit+0x12c>)
 8001fbe:	f043 0310 	orr.w	r3, r3, #16
 8001fc2:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc4:	4b15      	ldr	r3, [pc, #84]	; (800201c <HAL_UART_MspInit+0x12c>)
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <HAL_UART_MspInit+0x12c>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	4a10      	ldr	r2, [pc, #64]	; (800201c <HAL_UART_MspInit+0x12c>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe0:	4b0e      	ldr	r3, [pc, #56]	; (800201c <HAL_UART_MspInit+0x12c>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001fec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ffe:	2307      	movs	r3, #7
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002002:	f107 031c 	add.w	r3, r7, #28
 8002006:	4619      	mov	r1, r3
 8002008:	4808      	ldr	r0, [pc, #32]	; (800202c <HAL_UART_MspInit+0x13c>)
 800200a:	f000 fdcf 	bl	8002bac <HAL_GPIO_Init>
}
 800200e:	bf00      	nop
 8002010:	3730      	adds	r7, #48	; 0x30
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40005000 	.word	0x40005000
 800201c:	40023800 	.word	0x40023800
 8002020:	40020800 	.word	0x40020800
 8002024:	40020c00 	.word	0x40020c00
 8002028:	40011000 	.word	0x40011000
 800202c:	40020000 	.word	0x40020000

08002030 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002044:	4b3b      	ldr	r3, [pc, #236]	; (8002134 <HAL_FMC_MspInit+0x104>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d16f      	bne.n	800212c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800204c:	4b39      	ldr	r3, [pc, #228]	; (8002134 <HAL_FMC_MspInit+0x104>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	603b      	str	r3, [r7, #0]
 8002056:	4b38      	ldr	r3, [pc, #224]	; (8002138 <HAL_FMC_MspInit+0x108>)
 8002058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205a:	4a37      	ldr	r2, [pc, #220]	; (8002138 <HAL_FMC_MspInit+0x108>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6393      	str	r3, [r2, #56]	; 0x38
 8002062:	4b35      	ldr	r3, [pc, #212]	; (8002138 <HAL_FMC_MspInit+0x108>)
 8002064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800206e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002072:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207c:	2303      	movs	r3, #3
 800207e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002080:	230c      	movs	r3, #12
 8002082:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002084:	1d3b      	adds	r3, r7, #4
 8002086:	4619      	mov	r1, r3
 8002088:	482c      	ldr	r0, [pc, #176]	; (800213c <HAL_FMC_MspInit+0x10c>)
 800208a:	f000 fd8f 	bl	8002bac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800208e:	2301      	movs	r3, #1
 8002090:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209a:	2303      	movs	r3, #3
 800209c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800209e:	230c      	movs	r3, #12
 80020a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	4619      	mov	r1, r3
 80020a6:	4826      	ldr	r0, [pc, #152]	; (8002140 <HAL_FMC_MspInit+0x110>)
 80020a8:	f000 fd80 	bl	8002bac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80020ac:	f248 1333 	movw	r3, #33075	; 0x8133
 80020b0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ba:	2303      	movs	r3, #3
 80020bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020be:	230c      	movs	r3, #12
 80020c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	4619      	mov	r1, r3
 80020c6:	481f      	ldr	r0, [pc, #124]	; (8002144 <HAL_FMC_MspInit+0x114>)
 80020c8:	f000 fd70 	bl	8002bac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80020cc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80020d0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d2:	2302      	movs	r3, #2
 80020d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020da:	2303      	movs	r3, #3
 80020dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020de:	230c      	movs	r3, #12
 80020e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	4619      	mov	r1, r3
 80020e6:	4818      	ldr	r0, [pc, #96]	; (8002148 <HAL_FMC_MspInit+0x118>)
 80020e8:	f000 fd60 	bl	8002bac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80020ec:	f24c 7303 	movw	r3, #50947	; 0xc703
 80020f0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fa:	2303      	movs	r3, #3
 80020fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020fe:	230c      	movs	r3, #12
 8002100:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	4619      	mov	r1, r3
 8002106:	4811      	ldr	r0, [pc, #68]	; (800214c <HAL_FMC_MspInit+0x11c>)
 8002108:	f000 fd50 	bl	8002bac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800210c:	2360      	movs	r3, #96	; 0x60
 800210e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800211c:	230c      	movs	r3, #12
 800211e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	4619      	mov	r1, r3
 8002124:	480a      	ldr	r0, [pc, #40]	; (8002150 <HAL_FMC_MspInit+0x120>)
 8002126:	f000 fd41 	bl	8002bac <HAL_GPIO_Init>
 800212a:	e000      	b.n	800212e <HAL_FMC_MspInit+0xfe>
    return;
 800212c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	200009d0 	.word	0x200009d0
 8002138:	40023800 	.word	0x40023800
 800213c:	40021400 	.word	0x40021400
 8002140:	40020800 	.word	0x40020800
 8002144:	40021800 	.word	0x40021800
 8002148:	40021000 	.word	0x40021000
 800214c:	40020c00 	.word	0x40020c00
 8002150:	40020400 	.word	0x40020400

08002154 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800215c:	f7ff ff68 	bl	8002030 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08e      	sub	sp, #56	; 0x38
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	4b33      	ldr	r3, [pc, #204]	; (800224c <HAL_InitTick+0xe4>)
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	4a32      	ldr	r2, [pc, #200]	; (800224c <HAL_InitTick+0xe4>)
 8002182:	f043 0310 	orr.w	r3, r3, #16
 8002186:	6413      	str	r3, [r2, #64]	; 0x40
 8002188:	4b30      	ldr	r3, [pc, #192]	; (800224c <HAL_InitTick+0xe4>)
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002194:	f107 0210 	add.w	r2, r7, #16
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	4611      	mov	r1, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f003 fc94 	bl	8005acc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d103      	bne.n	80021b6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021ae:	f003 fc65 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 80021b2:	6378      	str	r0, [r7, #52]	; 0x34
 80021b4:	e004      	b.n	80021c0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021b6:	f003 fc61 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 80021ba:	4603      	mov	r3, r0
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c2:	4a23      	ldr	r2, [pc, #140]	; (8002250 <HAL_InitTick+0xe8>)
 80021c4:	fba2 2303 	umull	r2, r3, r2, r3
 80021c8:	0c9b      	lsrs	r3, r3, #18
 80021ca:	3b01      	subs	r3, #1
 80021cc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021ce:	4b21      	ldr	r3, [pc, #132]	; (8002254 <HAL_InitTick+0xec>)
 80021d0:	4a21      	ldr	r2, [pc, #132]	; (8002258 <HAL_InitTick+0xf0>)
 80021d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80021d4:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <HAL_InitTick+0xec>)
 80021d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021da:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021dc:	4a1d      	ldr	r2, [pc, #116]	; (8002254 <HAL_InitTick+0xec>)
 80021de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021e2:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <HAL_InitTick+0xec>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e8:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <HAL_InitTick+0xec>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ee:	4b19      	ldr	r3, [pc, #100]	; (8002254 <HAL_InitTick+0xec>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80021f4:	4817      	ldr	r0, [pc, #92]	; (8002254 <HAL_InitTick+0xec>)
 80021f6:	f003 ff18 	bl	800602a <HAL_TIM_Base_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002200:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002204:	2b00      	cmp	r3, #0
 8002206:	d11b      	bne.n	8002240 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002208:	4812      	ldr	r0, [pc, #72]	; (8002254 <HAL_InitTick+0xec>)
 800220a:	f003 ff5d 	bl	80060c8 <HAL_TIM_Base_Start_IT>
 800220e:	4603      	mov	r3, r0
 8002210:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002214:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002218:	2b00      	cmp	r3, #0
 800221a:	d111      	bne.n	8002240 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800221c:	2036      	movs	r0, #54	; 0x36
 800221e:	f000 faaf 	bl	8002780 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b0f      	cmp	r3, #15
 8002226:	d808      	bhi.n	800223a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002228:	2200      	movs	r2, #0
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	2036      	movs	r0, #54	; 0x36
 800222e:	f000 fa8b 	bl	8002748 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002232:	4a0a      	ldr	r2, [pc, #40]	; (800225c <HAL_InitTick+0xf4>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	e002      	b.n	8002240 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002240:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002244:	4618      	mov	r0, r3
 8002246:	3738      	adds	r7, #56	; 0x38
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40023800 	.word	0x40023800
 8002250:	431bde83 	.word	0x431bde83
 8002254:	200009d4 	.word	0x200009d4
 8002258:	40001000 	.word	0x40001000
 800225c:	20000504 	.word	0x20000504

08002260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <NMI_Handler+0x4>

08002266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800226a:	e7fe      	b.n	800226a <HardFault_Handler+0x4>

0800226c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002270:	e7fe      	b.n	8002270 <MemManage_Handler+0x4>

08002272 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002276:	e7fe      	b.n	8002276 <BusFault_Handler+0x4>

08002278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800227c:	e7fe      	b.n	800227c <UsageFault_Handler+0x4>

0800227e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022bc:	4802      	ldr	r0, [pc, #8]	; (80022c8 <TIM6_DAC_IRQHandler+0x10>)
 80022be:	f003 ff73 	bl	80061a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200009d4 	.word	0x200009d4

080022cc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80022d0:	4802      	ldr	r0, [pc, #8]	; (80022dc <OTG_HS_IRQHandler+0x10>)
 80022d2:	f001 f89b 	bl	800340c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000e00 	.word	0x20000e00

080022e0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80022e4:	4802      	ldr	r0, [pc, #8]	; (80022f0 <LTDC_IRQHandler+0x10>)
 80022e6:	f002 fcc1 	bl	8004c6c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200007b8 	.word	0x200007b8

080022f4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <DMA2D_IRQHandler+0x10>)
 80022fa:	f000 fab4 	bl	8002866 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000724 	.word	0x20000724

08002308 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
	return 1;
 800230c:	2301      	movs	r3, #1
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <_kill>:

int _kill(int pid, int sig)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002322:	f008 faf7 	bl	800a914 <__errno>
 8002326:	4603      	mov	r3, r0
 8002328:	2216      	movs	r2, #22
 800232a:	601a      	str	r2, [r3, #0]
	return -1;
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <_exit>:

void _exit (int status)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002340:	f04f 31ff 	mov.w	r1, #4294967295
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff ffe7 	bl	8002318 <_kill>
	while (1) {}		/* Make sure we hang here */
 800234a:	e7fe      	b.n	800234a <_exit+0x12>

0800234c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	e00a      	b.n	8002374 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800235e:	f3af 8000 	nop.w
 8002362:	4601      	mov	r1, r0
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	60ba      	str	r2, [r7, #8]
 800236a:	b2ca      	uxtb	r2, r1
 800236c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	3301      	adds	r3, #1
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	dbf0      	blt.n	800235e <_read+0x12>
	}

return len;
 800237c:	687b      	ldr	r3, [r7, #4]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b086      	sub	sp, #24
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e009      	b.n	80023ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	60ba      	str	r2, [r7, #8]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe fe39 	bl	8001018 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	3301      	adds	r3, #1
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	dbf1      	blt.n	8002398 <_write+0x12>
	}
	return len;
 80023b4:	687b      	ldr	r3, [r7, #4]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <_close>:

int _close(int file)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
	return -1;
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023e6:	605a      	str	r2, [r3, #4]
	return 0;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <_isatty>:

int _isatty(int file)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
	return 1;
 80023fe:	2301      	movs	r3, #1
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
	return 0;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002430:	4a14      	ldr	r2, [pc, #80]	; (8002484 <_sbrk+0x5c>)
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <_sbrk+0x60>)
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <_sbrk+0x64>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d102      	bne.n	800244a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <_sbrk+0x64>)
 8002446:	4a12      	ldr	r2, [pc, #72]	; (8002490 <_sbrk+0x68>)
 8002448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <_sbrk+0x64>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	429a      	cmp	r2, r3
 8002456:	d207      	bcs.n	8002468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002458:	f008 fa5c 	bl	800a914 <__errno>
 800245c:	4603      	mov	r3, r0
 800245e:	220c      	movs	r2, #12
 8002460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
 8002466:	e009      	b.n	800247c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <_sbrk+0x64>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800246e:	4b07      	ldr	r3, [pc, #28]	; (800248c <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <_sbrk+0x64>)
 8002478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800247a:	68fb      	ldr	r3, [r7, #12]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20030000 	.word	0x20030000
 8002488:	00000400 	.word	0x00000400
 800248c:	20000a1c 	.word	0x20000a1c
 8002490:	20001118 	.word	0x20001118

08002494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <SystemInit+0x20>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249e:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <SystemInit+0x20>)
 80024a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80024b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024f0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024bc:	480d      	ldr	r0, [pc, #52]	; (80024f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024be:	490e      	ldr	r1, [pc, #56]	; (80024f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024c0:	4a0e      	ldr	r2, [pc, #56]	; (80024fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c4:	e002      	b.n	80024cc <LoopCopyDataInit>

080024c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ca:	3304      	adds	r3, #4

080024cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d0:	d3f9      	bcc.n	80024c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d2:	4a0b      	ldr	r2, [pc, #44]	; (8002500 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024d4:	4c0b      	ldr	r4, [pc, #44]	; (8002504 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d8:	e001      	b.n	80024de <LoopFillZerobss>

080024da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024dc:	3204      	adds	r2, #4

080024de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e0:	d3fb      	bcc.n	80024da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024e2:	f7ff ffd7 	bl	8002494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024e6:	f008 fa1b 	bl	800a920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ea:	f7fe fe63 	bl	80011b4 <main>
  bx  lr    
 80024ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80024f0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80024f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f8:	20000700 	.word	0x20000700
  ldr r2, =_sidata
 80024fc:	0801014c 	.word	0x0801014c
  ldr r2, =_sbss
 8002500:	20000700 	.word	0x20000700
  ldr r4, =_ebss
 8002504:	20001114 	.word	0x20001114

08002508 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002508:	e7fe      	b.n	8002508 <ADC_IRQHandler>
	...

0800250c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <HAL_Init+0x40>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0d      	ldr	r2, [pc, #52]	; (800254c <HAL_Init+0x40>)
 8002516:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800251a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_Init+0x40>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0a      	ldr	r2, [pc, #40]	; (800254c <HAL_Init+0x40>)
 8002522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002526:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002528:	4b08      	ldr	r3, [pc, #32]	; (800254c <HAL_Init+0x40>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a07      	ldr	r2, [pc, #28]	; (800254c <HAL_Init+0x40>)
 800252e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002532:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002534:	2003      	movs	r0, #3
 8002536:	f000 f8fc 	bl	8002732 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800253a:	200f      	movs	r0, #15
 800253c:	f7ff fe14 	bl	8002168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002540:	f7ff fa60 	bl	8001a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40023c00 	.word	0x40023c00

08002550 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_IncTick+0x20>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_IncTick+0x24>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4413      	add	r3, r2
 8002560:	4a04      	ldr	r2, [pc, #16]	; (8002574 <HAL_IncTick+0x24>)
 8002562:	6013      	str	r3, [r2, #0]
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000508 	.word	0x20000508
 8002574:	20000a20 	.word	0x20000a20

08002578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return uwTick;
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <HAL_GetTick+0x14>)
 800257e:	681b      	ldr	r3, [r3, #0]
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	20000a20 	.word	0x20000a20

08002590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002598:	f7ff ffee 	bl	8002578 <HAL_GetTick>
 800259c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a8:	d005      	beq.n	80025b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_Delay+0x44>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4413      	add	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025b6:	bf00      	nop
 80025b8:	f7ff ffde 	bl	8002578 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d8f7      	bhi.n	80025b8 <HAL_Delay+0x28>
  {
  }
}
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000508 	.word	0x20000508

080025d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <__NVIC_SetPriorityGrouping+0x44>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f4:	4013      	ands	r3, r2
 80025f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260a:	4a04      	ldr	r2, [pc, #16]	; (800261c <__NVIC_SetPriorityGrouping+0x44>)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	60d3      	str	r3, [r2, #12]
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <__NVIC_GetPriorityGrouping+0x18>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	0a1b      	lsrs	r3, r3, #8
 800262a:	f003 0307 	and.w	r3, r3, #7
}
 800262e:	4618      	mov	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	2b00      	cmp	r3, #0
 800264c:	db0b      	blt.n	8002666 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	f003 021f 	and.w	r2, r3, #31
 8002654:	4907      	ldr	r1, [pc, #28]	; (8002674 <__NVIC_EnableIRQ+0x38>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	2001      	movs	r0, #1
 800265e:	fa00 f202 	lsl.w	r2, r0, r2
 8002662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000e100 	.word	0xe000e100

08002678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	2b00      	cmp	r3, #0
 800268a:	db0a      	blt.n	80026a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	490c      	ldr	r1, [pc, #48]	; (80026c4 <__NVIC_SetPriority+0x4c>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	440b      	add	r3, r1
 800269c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a0:	e00a      	b.n	80026b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4908      	ldr	r1, [pc, #32]	; (80026c8 <__NVIC_SetPriority+0x50>)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3b04      	subs	r3, #4
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	440b      	add	r3, r1
 80026b6:	761a      	strb	r2, [r3, #24]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000e100 	.word	0xe000e100
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	; 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f1c3 0307 	rsb	r3, r3, #7
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	bf28      	it	cs
 80026ea:	2304      	movcs	r3, #4
 80026ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d902      	bls.n	80026fc <NVIC_EncodePriority+0x30>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3b03      	subs	r3, #3
 80026fa:	e000      	b.n	80026fe <NVIC_EncodePriority+0x32>
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	f04f 32ff 	mov.w	r2, #4294967295
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	401a      	ands	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002714:	f04f 31ff 	mov.w	r1, #4294967295
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43d9      	mvns	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	4313      	orrs	r3, r2
         );
}
 8002726:	4618      	mov	r0, r3
 8002728:	3724      	adds	r7, #36	; 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ff4c 	bl	80025d8 <__NVIC_SetPriorityGrouping>
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800275a:	f7ff ff61 	bl	8002620 <__NVIC_GetPriorityGrouping>
 800275e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	68b9      	ldr	r1, [r7, #8]
 8002764:	6978      	ldr	r0, [r7, #20]
 8002766:	f7ff ffb1 	bl	80026cc <NVIC_EncodePriority>
 800276a:	4602      	mov	r2, r0
 800276c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff ff80 	bl	8002678 <__NVIC_SetPriority>
}
 8002778:	bf00      	nop
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff ff54 	bl	800263c <__NVIC_EnableIRQ>
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e00e      	b.n	80027cc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	795b      	ldrb	r3, [r3, #5]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d105      	bne.n	80027c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff f948 	bl	8001a54 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e03b      	b.n	800285e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff f94c 	bl	8001a98 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002824:	f023 0107 	bic.w	r1, r3, #7
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800283e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68d1      	ldr	r1, [r2, #12]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6812      	ldr	r2, [r2, #0]
 800284a:	430b      	orrs	r3, r1
 800284c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d026      	beq.n	80028d6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d021      	beq.n	80028d6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028a0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a6:	f043 0201 	orr.w	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2201      	movs	r2, #1
 80028b4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2204      	movs	r2, #4
 80028ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f003 0320 	and.w	r3, r3, #32
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d026      	beq.n	800292e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d021      	beq.n	800292e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028f8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2220      	movs	r2, #32
 8002900:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002906:	f043 0202 	orr.w	r2, r3, #2
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2204      	movs	r2, #4
 8002912:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d026      	beq.n	8002986 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800293e:	2b00      	cmp	r3, #0
 8002940:	d021      	beq.n	8002986 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002950:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2208      	movs	r2, #8
 8002958:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295e:	f043 0204 	orr.w	r2, r3, #4
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2204      	movs	r2, #4
 800296a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d013      	beq.n	80029b8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00e      	beq.n	80029b8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2204      	movs	r2, #4
 80029b0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f853 	bl	8002a5e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d024      	beq.n	8002a0c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d01f      	beq.n	8002a0c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029da:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2202      	movs	r2, #2
 80029e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d01f      	beq.n	8002a56 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01a      	beq.n	8002a56 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a2e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2210      	movs	r2, #16
 8002a36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f80e 	bl	8002a72 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_DMA2D_ConfigLayer+0x20>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e079      	b.n	8002b9c <HAL_DMA2D_ConfigLayer+0x114>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	3318      	adds	r3, #24
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	041b      	lsls	r3, r3, #16
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002ad2:	4b35      	ldr	r3, [pc, #212]	; (8002ba8 <HAL_DMA2D_ConfigLayer+0x120>)
 8002ad4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b0a      	cmp	r3, #10
 8002adc:	d003      	beq.n	8002ae6 <HAL_DMA2D_ConfigLayer+0x5e>
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b09      	cmp	r3, #9
 8002ae4:	d107      	bne.n	8002af6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	e005      	b.n	8002b02 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	061b      	lsls	r3, r3, #24
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d120      	bne.n	8002b4a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	ea02 0103 	and.w	r1, r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b0a      	cmp	r3, #10
 8002b30:	d003      	beq.n	8002b3a <HAL_DMA2D_ConfigLayer+0xb2>
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b09      	cmp	r3, #9
 8002b38:	d127      	bne.n	8002b8a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002b46:	629a      	str	r2, [r3, #40]	; 0x28
 8002b48:	e01f      	b.n	8002b8a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	43db      	mvns	r3, r3
 8002b54:	ea02 0103 	and.w	r1, r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b0a      	cmp	r3, #10
 8002b72:	d003      	beq.n	8002b7c <HAL_DMA2D_ConfigLayer+0xf4>
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b09      	cmp	r3, #9
 8002b7a:	d106      	bne.n	8002b8a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002b88:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	371c      	adds	r7, #28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	ff03000f 	.word	0xff03000f

08002bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	e177      	b.n	8002eb8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bc8:	2201      	movs	r2, #1
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	f040 8166 	bne.w	8002eb2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d005      	beq.n	8002bfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d130      	bne.n	8002c60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	2203      	movs	r2, #3
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c34:	2201      	movs	r2, #1
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	f003 0201 	and.w	r2, r3, #1
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d017      	beq.n	8002c9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	2203      	movs	r2, #3
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d123      	bne.n	8002cf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	08da      	lsrs	r2, r3, #3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3208      	adds	r2, #8
 8002cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	220f      	movs	r2, #15
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	08da      	lsrs	r2, r3, #3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3208      	adds	r2, #8
 8002cea:	69b9      	ldr	r1, [r7, #24]
 8002cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 0203 	and.w	r2, r3, #3
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 80c0 	beq.w	8002eb2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	4b66      	ldr	r3, [pc, #408]	; (8002ed0 <HAL_GPIO_Init+0x324>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	4a65      	ldr	r2, [pc, #404]	; (8002ed0 <HAL_GPIO_Init+0x324>)
 8002d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d40:	6453      	str	r3, [r2, #68]	; 0x44
 8002d42:	4b63      	ldr	r3, [pc, #396]	; (8002ed0 <HAL_GPIO_Init+0x324>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d4e:	4a61      	ldr	r2, [pc, #388]	; (8002ed4 <HAL_GPIO_Init+0x328>)
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	089b      	lsrs	r3, r3, #2
 8002d54:	3302      	adds	r3, #2
 8002d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	220f      	movs	r2, #15
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a58      	ldr	r2, [pc, #352]	; (8002ed8 <HAL_GPIO_Init+0x32c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d037      	beq.n	8002dea <HAL_GPIO_Init+0x23e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a57      	ldr	r2, [pc, #348]	; (8002edc <HAL_GPIO_Init+0x330>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d031      	beq.n	8002de6 <HAL_GPIO_Init+0x23a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a56      	ldr	r2, [pc, #344]	; (8002ee0 <HAL_GPIO_Init+0x334>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d02b      	beq.n	8002de2 <HAL_GPIO_Init+0x236>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a55      	ldr	r2, [pc, #340]	; (8002ee4 <HAL_GPIO_Init+0x338>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d025      	beq.n	8002dde <HAL_GPIO_Init+0x232>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a54      	ldr	r2, [pc, #336]	; (8002ee8 <HAL_GPIO_Init+0x33c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d01f      	beq.n	8002dda <HAL_GPIO_Init+0x22e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a53      	ldr	r2, [pc, #332]	; (8002eec <HAL_GPIO_Init+0x340>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d019      	beq.n	8002dd6 <HAL_GPIO_Init+0x22a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a52      	ldr	r2, [pc, #328]	; (8002ef0 <HAL_GPIO_Init+0x344>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d013      	beq.n	8002dd2 <HAL_GPIO_Init+0x226>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a51      	ldr	r2, [pc, #324]	; (8002ef4 <HAL_GPIO_Init+0x348>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00d      	beq.n	8002dce <HAL_GPIO_Init+0x222>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a50      	ldr	r2, [pc, #320]	; (8002ef8 <HAL_GPIO_Init+0x34c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d007      	beq.n	8002dca <HAL_GPIO_Init+0x21e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a4f      	ldr	r2, [pc, #316]	; (8002efc <HAL_GPIO_Init+0x350>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d101      	bne.n	8002dc6 <HAL_GPIO_Init+0x21a>
 8002dc2:	2309      	movs	r3, #9
 8002dc4:	e012      	b.n	8002dec <HAL_GPIO_Init+0x240>
 8002dc6:	230a      	movs	r3, #10
 8002dc8:	e010      	b.n	8002dec <HAL_GPIO_Init+0x240>
 8002dca:	2308      	movs	r3, #8
 8002dcc:	e00e      	b.n	8002dec <HAL_GPIO_Init+0x240>
 8002dce:	2307      	movs	r3, #7
 8002dd0:	e00c      	b.n	8002dec <HAL_GPIO_Init+0x240>
 8002dd2:	2306      	movs	r3, #6
 8002dd4:	e00a      	b.n	8002dec <HAL_GPIO_Init+0x240>
 8002dd6:	2305      	movs	r3, #5
 8002dd8:	e008      	b.n	8002dec <HAL_GPIO_Init+0x240>
 8002dda:	2304      	movs	r3, #4
 8002ddc:	e006      	b.n	8002dec <HAL_GPIO_Init+0x240>
 8002dde:	2303      	movs	r3, #3
 8002de0:	e004      	b.n	8002dec <HAL_GPIO_Init+0x240>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e002      	b.n	8002dec <HAL_GPIO_Init+0x240>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <HAL_GPIO_Init+0x240>
 8002dea:	2300      	movs	r3, #0
 8002dec:	69fa      	ldr	r2, [r7, #28]
 8002dee:	f002 0203 	and.w	r2, r2, #3
 8002df2:	0092      	lsls	r2, r2, #2
 8002df4:	4093      	lsls	r3, r2
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dfc:	4935      	ldr	r1, [pc, #212]	; (8002ed4 <HAL_GPIO_Init+0x328>)
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	089b      	lsrs	r3, r3, #2
 8002e02:	3302      	adds	r3, #2
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e0a:	4b3d      	ldr	r3, [pc, #244]	; (8002f00 <HAL_GPIO_Init+0x354>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	43db      	mvns	r3, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4013      	ands	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e2e:	4a34      	ldr	r2, [pc, #208]	; (8002f00 <HAL_GPIO_Init+0x354>)
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e34:	4b32      	ldr	r3, [pc, #200]	; (8002f00 <HAL_GPIO_Init+0x354>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e58:	4a29      	ldr	r2, [pc, #164]	; (8002f00 <HAL_GPIO_Init+0x354>)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e5e:	4b28      	ldr	r3, [pc, #160]	; (8002f00 <HAL_GPIO_Init+0x354>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e82:	4a1f      	ldr	r2, [pc, #124]	; (8002f00 <HAL_GPIO_Init+0x354>)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e88:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <HAL_GPIO_Init+0x354>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eac:	4a14      	ldr	r2, [pc, #80]	; (8002f00 <HAL_GPIO_Init+0x354>)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	61fb      	str	r3, [r7, #28]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	2b0f      	cmp	r3, #15
 8002ebc:	f67f ae84 	bls.w	8002bc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	3724      	adds	r7, #36	; 0x24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40013800 	.word	0x40013800
 8002ed8:	40020000 	.word	0x40020000
 8002edc:	40020400 	.word	0x40020400
 8002ee0:	40020800 	.word	0x40020800
 8002ee4:	40020c00 	.word	0x40020c00
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40021400 	.word	0x40021400
 8002ef0:	40021800 	.word	0x40021800
 8002ef4:	40021c00 	.word	0x40021c00
 8002ef8:	40022000 	.word	0x40022000
 8002efc:	40022400 	.word	0x40022400
 8002f00:	40013c00 	.word	0x40013c00

08002f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	807b      	strh	r3, [r7, #2]
 8002f10:	4613      	mov	r3, r2
 8002f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f14:	787b      	ldrb	r3, [r7, #1]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f1a:	887a      	ldrh	r2, [r7, #2]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f20:	e003      	b.n	8002f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f22:	887b      	ldrh	r3, [r7, #2]
 8002f24:	041a      	lsls	r2, r3, #16
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	619a      	str	r2, [r3, #24]
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002f36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f38:	b08f      	sub	sp, #60	; 0x3c
 8002f3a:	af0a      	add	r7, sp, #40	; 0x28
 8002f3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e054      	b.n	8002ff2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f007 f99c 	bl	800a2a0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d102      	bne.n	8002f82 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f004 f9ca 	bl	8007320 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	603b      	str	r3, [r7, #0]
 8002f92:	687e      	ldr	r6, [r7, #4]
 8002f94:	466d      	mov	r5, sp
 8002f96:	f106 0410 	add.w	r4, r6, #16
 8002f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fa6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002faa:	1d33      	adds	r3, r6, #4
 8002fac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fae:	6838      	ldr	r0, [r7, #0]
 8002fb0:	f004 f944 	bl	800723c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f004 f9c1 	bl	8007342 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	603b      	str	r3, [r7, #0]
 8002fc6:	687e      	ldr	r6, [r7, #4]
 8002fc8:	466d      	mov	r5, sp
 8002fca:	f106 0410 	add.w	r4, r6, #16
 8002fce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fda:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fde:	1d33      	adds	r3, r6, #4
 8002fe0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fe2:	6838      	ldr	r0, [r7, #0]
 8002fe4:	f004 fb4a 	bl	800767c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ffa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002ffa:	b590      	push	{r4, r7, lr}
 8002ffc:	b089      	sub	sp, #36	; 0x24
 8002ffe:	af04      	add	r7, sp, #16
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	4608      	mov	r0, r1
 8003004:	4611      	mov	r1, r2
 8003006:	461a      	mov	r2, r3
 8003008:	4603      	mov	r3, r0
 800300a:	70fb      	strb	r3, [r7, #3]
 800300c:	460b      	mov	r3, r1
 800300e:	70bb      	strb	r3, [r7, #2]
 8003010:	4613      	mov	r3, r2
 8003012:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_HCD_HC_Init+0x28>
 800301e:	2302      	movs	r3, #2
 8003020:	e076      	b.n	8003110 <HAL_HCD_HC_Init+0x116>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800302a:	78fb      	ldrb	r3, [r7, #3]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	212c      	movs	r1, #44	; 0x2c
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	333d      	adds	r3, #61	; 0x3d
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800303c:	78fb      	ldrb	r3, [r7, #3]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	212c      	movs	r1, #44	; 0x2c
 8003042:	fb01 f303 	mul.w	r3, r1, r3
 8003046:	4413      	add	r3, r2
 8003048:	3338      	adds	r3, #56	; 0x38
 800304a:	787a      	ldrb	r2, [r7, #1]
 800304c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800304e:	78fb      	ldrb	r3, [r7, #3]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	3340      	adds	r3, #64	; 0x40
 800305c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800305e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	212c      	movs	r1, #44	; 0x2c
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	4413      	add	r3, r2
 800306c:	3339      	adds	r3, #57	; 0x39
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	212c      	movs	r1, #44	; 0x2c
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	333f      	adds	r3, #63	; 0x3f
 8003080:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003084:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	78ba      	ldrb	r2, [r7, #2]
 800308a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800308e:	b2d0      	uxtb	r0, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	212c      	movs	r1, #44	; 0x2c
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	4413      	add	r3, r2
 800309a:	333a      	adds	r3, #58	; 0x3a
 800309c:	4602      	mov	r2, r0
 800309e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80030a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	da09      	bge.n	80030bc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	212c      	movs	r1, #44	; 0x2c
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	333b      	adds	r3, #59	; 0x3b
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
 80030ba:	e008      	b.n	80030ce <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	212c      	movs	r1, #44	; 0x2c
 80030c2:	fb01 f303 	mul.w	r3, r1, r3
 80030c6:	4413      	add	r3, r2
 80030c8:	333b      	adds	r3, #59	; 0x3b
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	212c      	movs	r1, #44	; 0x2c
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	4413      	add	r3, r2
 80030da:	333c      	adds	r3, #60	; 0x3c
 80030dc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80030e0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	787c      	ldrb	r4, [r7, #1]
 80030e8:	78ba      	ldrb	r2, [r7, #2]
 80030ea:	78f9      	ldrb	r1, [r7, #3]
 80030ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030ee:	9302      	str	r3, [sp, #8]
 80030f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030f4:	9301      	str	r3, [sp, #4]
 80030f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	4623      	mov	r3, r4
 80030fe:	f004 fc43 	bl	8007988 <USB_HC_Init>
 8003102:	4603      	mov	r3, r0
 8003104:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800310e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	bd90      	pop	{r4, r7, pc}

08003118 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_HCD_HC_Halt+0x1e>
 8003132:	2302      	movs	r3, #2
 8003134:	e00f      	b.n	8003156 <HAL_HCD_HC_Halt+0x3e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	4611      	mov	r1, r2
 8003146:	4618      	mov	r0, r3
 8003148:	f004 fe93 	bl	8007e72 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003154:	7bfb      	ldrb	r3, [r7, #15]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	4608      	mov	r0, r1
 800316a:	4611      	mov	r1, r2
 800316c:	461a      	mov	r2, r3
 800316e:	4603      	mov	r3, r0
 8003170:	70fb      	strb	r3, [r7, #3]
 8003172:	460b      	mov	r3, r1
 8003174:	70bb      	strb	r3, [r7, #2]
 8003176:	4613      	mov	r3, r2
 8003178:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800317a:	78fb      	ldrb	r3, [r7, #3]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	212c      	movs	r1, #44	; 0x2c
 8003180:	fb01 f303 	mul.w	r3, r1, r3
 8003184:	4413      	add	r3, r2
 8003186:	333b      	adds	r3, #59	; 0x3b
 8003188:	78ba      	ldrb	r2, [r7, #2]
 800318a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	4413      	add	r3, r2
 8003198:	333f      	adds	r3, #63	; 0x3f
 800319a:	787a      	ldrb	r2, [r7, #1]
 800319c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800319e:	7c3b      	ldrb	r3, [r7, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d112      	bne.n	80031ca <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	212c      	movs	r1, #44	; 0x2c
 80031aa:	fb01 f303 	mul.w	r3, r1, r3
 80031ae:	4413      	add	r3, r2
 80031b0:	3342      	adds	r3, #66	; 0x42
 80031b2:	2203      	movs	r2, #3
 80031b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80031b6:	78fb      	ldrb	r3, [r7, #3]
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	212c      	movs	r1, #44	; 0x2c
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	4413      	add	r3, r2
 80031c2:	333d      	adds	r3, #61	; 0x3d
 80031c4:	7f3a      	ldrb	r2, [r7, #28]
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	e008      	b.n	80031dc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	212c      	movs	r1, #44	; 0x2c
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	4413      	add	r3, r2
 80031d6:	3342      	adds	r3, #66	; 0x42
 80031d8:	2202      	movs	r2, #2
 80031da:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80031dc:	787b      	ldrb	r3, [r7, #1]
 80031de:	2b03      	cmp	r3, #3
 80031e0:	f200 80c6 	bhi.w	8003370 <HAL_HCD_HC_SubmitRequest+0x210>
 80031e4:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <HAL_HCD_HC_SubmitRequest+0x8c>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	080031fd 	.word	0x080031fd
 80031f0:	0800335d 	.word	0x0800335d
 80031f4:	08003261 	.word	0x08003261
 80031f8:	080032df 	.word	0x080032df
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80031fc:	7c3b      	ldrb	r3, [r7, #16]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	f040 80b8 	bne.w	8003374 <HAL_HCD_HC_SubmitRequest+0x214>
 8003204:	78bb      	ldrb	r3, [r7, #2]
 8003206:	2b00      	cmp	r3, #0
 8003208:	f040 80b4 	bne.w	8003374 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800320c:	8b3b      	ldrh	r3, [r7, #24]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d108      	bne.n	8003224 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003212:	78fb      	ldrb	r3, [r7, #3]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	212c      	movs	r1, #44	; 0x2c
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	4413      	add	r3, r2
 800321e:	3355      	adds	r3, #85	; 0x55
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	212c      	movs	r1, #44	; 0x2c
 800322a:	fb01 f303 	mul.w	r3, r1, r3
 800322e:	4413      	add	r3, r2
 8003230:	3355      	adds	r3, #85	; 0x55
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d109      	bne.n	800324c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	3342      	adds	r3, #66	; 0x42
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800324a:	e093      	b.n	8003374 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	212c      	movs	r1, #44	; 0x2c
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	4413      	add	r3, r2
 8003258:	3342      	adds	r3, #66	; 0x42
 800325a:	2202      	movs	r2, #2
 800325c:	701a      	strb	r2, [r3, #0]
      break;
 800325e:	e089      	b.n	8003374 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003260:	78bb      	ldrb	r3, [r7, #2]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d11d      	bne.n	80032a2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003266:	78fb      	ldrb	r3, [r7, #3]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	212c      	movs	r1, #44	; 0x2c
 800326c:	fb01 f303 	mul.w	r3, r1, r3
 8003270:	4413      	add	r3, r2
 8003272:	3355      	adds	r3, #85	; 0x55
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800327a:	78fb      	ldrb	r3, [r7, #3]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	212c      	movs	r1, #44	; 0x2c
 8003280:	fb01 f303 	mul.w	r3, r1, r3
 8003284:	4413      	add	r3, r2
 8003286:	3342      	adds	r3, #66	; 0x42
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800328c:	e073      	b.n	8003376 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	212c      	movs	r1, #44	; 0x2c
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	4413      	add	r3, r2
 800329a:	3342      	adds	r3, #66	; 0x42
 800329c:	2202      	movs	r2, #2
 800329e:	701a      	strb	r2, [r3, #0]
      break;
 80032a0:	e069      	b.n	8003376 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	212c      	movs	r1, #44	; 0x2c
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	4413      	add	r3, r2
 80032ae:	3354      	adds	r3, #84	; 0x54
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	212c      	movs	r1, #44	; 0x2c
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	3342      	adds	r3, #66	; 0x42
 80032c4:	2200      	movs	r2, #0
 80032c6:	701a      	strb	r2, [r3, #0]
      break;
 80032c8:	e055      	b.n	8003376 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	212c      	movs	r1, #44	; 0x2c
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	3342      	adds	r3, #66	; 0x42
 80032d8:	2202      	movs	r2, #2
 80032da:	701a      	strb	r2, [r3, #0]
      break;
 80032dc:	e04b      	b.n	8003376 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80032de:	78bb      	ldrb	r3, [r7, #2]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d11d      	bne.n	8003320 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80032e4:	78fb      	ldrb	r3, [r7, #3]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	212c      	movs	r1, #44	; 0x2c
 80032ea:	fb01 f303 	mul.w	r3, r1, r3
 80032ee:	4413      	add	r3, r2
 80032f0:	3355      	adds	r3, #85	; 0x55
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d109      	bne.n	800330c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	212c      	movs	r1, #44	; 0x2c
 80032fe:	fb01 f303 	mul.w	r3, r1, r3
 8003302:	4413      	add	r3, r2
 8003304:	3342      	adds	r3, #66	; 0x42
 8003306:	2200      	movs	r2, #0
 8003308:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800330a:	e034      	b.n	8003376 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	212c      	movs	r1, #44	; 0x2c
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	4413      	add	r3, r2
 8003318:	3342      	adds	r3, #66	; 0x42
 800331a:	2202      	movs	r2, #2
 800331c:	701a      	strb	r2, [r3, #0]
      break;
 800331e:	e02a      	b.n	8003376 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	212c      	movs	r1, #44	; 0x2c
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	4413      	add	r3, r2
 800332c:	3354      	adds	r3, #84	; 0x54
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d109      	bne.n	8003348 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	212c      	movs	r1, #44	; 0x2c
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	4413      	add	r3, r2
 8003340:	3342      	adds	r3, #66	; 0x42
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
      break;
 8003346:	e016      	b.n	8003376 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	212c      	movs	r1, #44	; 0x2c
 800334e:	fb01 f303 	mul.w	r3, r1, r3
 8003352:	4413      	add	r3, r2
 8003354:	3342      	adds	r3, #66	; 0x42
 8003356:	2202      	movs	r2, #2
 8003358:	701a      	strb	r2, [r3, #0]
      break;
 800335a:	e00c      	b.n	8003376 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	212c      	movs	r1, #44	; 0x2c
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	4413      	add	r3, r2
 8003368:	3342      	adds	r3, #66	; 0x42
 800336a:	2200      	movs	r2, #0
 800336c:	701a      	strb	r2, [r3, #0]
      break;
 800336e:	e002      	b.n	8003376 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003370:	bf00      	nop
 8003372:	e000      	b.n	8003376 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003374:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	212c      	movs	r1, #44	; 0x2c
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	3344      	adds	r3, #68	; 0x44
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	8b3a      	ldrh	r2, [r7, #24]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	202c      	movs	r0, #44	; 0x2c
 8003390:	fb00 f303 	mul.w	r3, r0, r3
 8003394:	440b      	add	r3, r1
 8003396:	334c      	adds	r3, #76	; 0x4c
 8003398:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	212c      	movs	r1, #44	; 0x2c
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	4413      	add	r3, r2
 80033a6:	3360      	adds	r3, #96	; 0x60
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	212c      	movs	r1, #44	; 0x2c
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	3350      	adds	r3, #80	; 0x50
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	212c      	movs	r1, #44	; 0x2c
 80033c4:	fb01 f303 	mul.w	r3, r1, r3
 80033c8:	4413      	add	r3, r2
 80033ca:	3339      	adds	r3, #57	; 0x39
 80033cc:	78fa      	ldrb	r2, [r7, #3]
 80033ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	212c      	movs	r1, #44	; 0x2c
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	4413      	add	r3, r2
 80033dc:	3361      	adds	r3, #97	; 0x61
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	222c      	movs	r2, #44	; 0x2c
 80033ea:	fb02 f303 	mul.w	r3, r2, r3
 80033ee:	3338      	adds	r3, #56	; 0x38
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	18d1      	adds	r1, r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	f004 fbe6 	bl	8007bcc <USB_HC_StartXfer>
 8003400:	4603      	mov	r3, r0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop

0800340c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f004 f8e7 	bl	80075f6 <USB_GetMode>
 8003428:	4603      	mov	r3, r0
 800342a:	2b01      	cmp	r3, #1
 800342c:	f040 80f6 	bne.w	800361c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f004 f8cb 	bl	80075d0 <USB_ReadInterrupts>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80ec 	beq.w	800361a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f004 f8c2 	bl	80075d0 <USB_ReadInterrupts>
 800344c:	4603      	mov	r3, r0
 800344e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003452:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003456:	d104      	bne.n	8003462 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003460:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f004 f8b2 	bl	80075d0 <USB_ReadInterrupts>
 800346c:	4603      	mov	r3, r0
 800346e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003476:	d104      	bne.n	8003482 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003480:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f004 f8a2 	bl	80075d0 <USB_ReadInterrupts>
 800348c:	4603      	mov	r3, r0
 800348e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003492:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003496:	d104      	bne.n	80034a2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80034a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f004 f892 	bl	80075d0 <USB_ReadInterrupts>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d103      	bne.n	80034be <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2202      	movs	r2, #2
 80034bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f004 f884 	bl	80075d0 <USB_ReadInterrupts>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034d2:	d11c      	bne.n	800350e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80034dc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10f      	bne.n	800350e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80034ee:	2110      	movs	r1, #16
 80034f0:	6938      	ldr	r0, [r7, #16]
 80034f2:	f003 ff73 	bl	80073dc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80034f6:	6938      	ldr	r0, [r7, #16]
 80034f8:	f003 ffa4 	bl	8007444 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2101      	movs	r1, #1
 8003502:	4618      	mov	r0, r3
 8003504:	f004 f97a 	bl	80077fc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f006 ff43 	bl	800a394 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f004 f85c 	bl	80075d0 <USB_ReadInterrupts>
 8003518:	4603      	mov	r3, r0
 800351a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800351e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003522:	d102      	bne.n	800352a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f001 f89e 	bl	8004666 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f004 f84e 	bl	80075d0 <USB_ReadInterrupts>
 8003534:	4603      	mov	r3, r0
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b08      	cmp	r3, #8
 800353c:	d106      	bne.n	800354c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f006 ff0c 	bl	800a35c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2208      	movs	r2, #8
 800354a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f004 f83d 	bl	80075d0 <USB_ReadInterrupts>
 8003556:	4603      	mov	r3, r0
 8003558:	f003 0310 	and.w	r3, r3, #16
 800355c:	2b10      	cmp	r3, #16
 800355e:	d101      	bne.n	8003564 <HAL_HCD_IRQHandler+0x158>
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <HAL_HCD_IRQHandler+0x15a>
 8003564:	2300      	movs	r3, #0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d012      	beq.n	8003590 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699a      	ldr	r2, [r3, #24]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0210 	bic.w	r2, r2, #16
 8003578:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 ffa1 	bl	80044c2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699a      	ldr	r2, [r3, #24]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0210 	orr.w	r2, r2, #16
 800358e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f004 f81b 	bl	80075d0 <USB_ReadInterrupts>
 800359a:	4603      	mov	r3, r0
 800359c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035a4:	d13a      	bne.n	800361c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f004 fc50 	bl	8007e50 <USB_HC_ReadInterrupt>
 80035b0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	e025      	b.n	8003604 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d018      	beq.n	80035fe <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e2:	d106      	bne.n	80035f2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	4619      	mov	r1, r3
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f8ab 	bl	8003746 <HCD_HC_IN_IRQHandler>
 80035f0:	e005      	b.n	80035fe <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	4619      	mov	r1, r3
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 fbf9 	bl	8003df0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	3301      	adds	r3, #1
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	429a      	cmp	r2, r3
 800360c:	d3d4      	bcc.n	80035b8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003616:	615a      	str	r2, [r3, #20]
 8003618:	e000      	b.n	800361c <HAL_HCD_IRQHandler+0x210>
      return;
 800361a:	bf00      	nop
    }
  }
}
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_HCD_Start+0x16>
 8003634:	2302      	movs	r3, #2
 8003636:	e013      	b.n	8003660 <HAL_HCD_Start+0x3e>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2101      	movs	r1, #1
 8003646:	4618      	mov	r0, r3
 8003648:	f004 f93c 	bl	80078c4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f003 fe54 	bl	80072fe <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_HCD_Stop+0x16>
 800367a:	2302      	movs	r3, #2
 800367c:	e00d      	b.n	800369a <HAL_HCD_Stop+0x32>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f004 fd2a 	bl	80080e4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f004 f8de 	bl	8007870 <USB_ResetPort>
 80036b4:	4603      	mov	r3, r0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	460b      	mov	r3, r1
 80036c8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80036ca:	78fb      	ldrb	r3, [r7, #3]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	212c      	movs	r1, #44	; 0x2c
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	4413      	add	r3, r2
 80036d6:	3360      	adds	r3, #96	; 0x60
 80036d8:	781b      	ldrb	r3, [r3, #0]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	212c      	movs	r1, #44	; 0x2c
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	4413      	add	r3, r2
 80036fe:	3350      	adds	r3, #80	; 0x50
 8003700:	681b      	ldr	r3, [r3, #0]
}
 8003702:	4618      	mov	r0, r3
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f004 f922 	bl	8007964 <USB_GetCurrentFrame>
 8003720:	4603      	mov	r3, r0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f004 f8fd 	bl	8007936 <USB_GetHostSpeed>
 800373c:	4603      	mov	r3, r0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	460b      	mov	r3, r1
 8003750:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4413      	add	r3, r2
 8003768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b04      	cmp	r3, #4
 8003774:	d11a      	bne.n	80037ac <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4413      	add	r3, r2
 800377e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003782:	461a      	mov	r2, r3
 8003784:	2304      	movs	r3, #4
 8003786:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	212c      	movs	r1, #44	; 0x2c
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	4413      	add	r3, r2
 8003794:	3361      	adds	r3, #97	; 0x61
 8003796:	2206      	movs	r2, #6
 8003798:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f004 fb64 	bl	8007e72 <USB_HC_Halt>
 80037aa:	e0af      	b.n	800390c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c2:	d11b      	bne.n	80037fc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d0:	461a      	mov	r2, r3
 80037d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	212c      	movs	r1, #44	; 0x2c
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	3361      	adds	r3, #97	; 0x61
 80037e6:	2207      	movs	r2, #7
 80037e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	4611      	mov	r1, r2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f004 fb3c 	bl	8007e72 <USB_HC_Halt>
 80037fa:	e087      	b.n	800390c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	4413      	add	r3, r2
 8003804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b20      	cmp	r3, #32
 8003810:	d109      	bne.n	8003826 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4413      	add	r3, r2
 800381a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800381e:	461a      	mov	r2, r3
 8003820:	2320      	movs	r3, #32
 8003822:	6093      	str	r3, [r2, #8]
 8003824:	e072      	b.n	800390c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4413      	add	r3, r2
 800382e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b08      	cmp	r3, #8
 800383a:	d11a      	bne.n	8003872 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4413      	add	r3, r2
 8003844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003848:	461a      	mov	r2, r3
 800384a:	2308      	movs	r3, #8
 800384c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	212c      	movs	r1, #44	; 0x2c
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	4413      	add	r3, r2
 800385a:	3361      	adds	r3, #97	; 0x61
 800385c:	2205      	movs	r2, #5
 800385e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	4611      	mov	r1, r2
 800386a:	4618      	mov	r0, r3
 800386c:	f004 fb01 	bl	8007e72 <USB_HC_Halt>
 8003870:	e04c      	b.n	800390c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4413      	add	r3, r2
 800387a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003888:	d11b      	bne.n	80038c2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4413      	add	r3, r2
 8003892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003896:	461a      	mov	r2, r3
 8003898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800389c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	212c      	movs	r1, #44	; 0x2c
 80038a4:	fb01 f303 	mul.w	r3, r1, r3
 80038a8:	4413      	add	r3, r2
 80038aa:	3361      	adds	r3, #97	; 0x61
 80038ac:	2208      	movs	r2, #8
 80038ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	4611      	mov	r1, r2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f004 fad9 	bl	8007e72 <USB_HC_Halt>
 80038c0:	e024      	b.n	800390c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d4:	2b80      	cmp	r3, #128	; 0x80
 80038d6:	d119      	bne.n	800390c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e4:	461a      	mov	r2, r3
 80038e6:	2380      	movs	r3, #128	; 0x80
 80038e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	212c      	movs	r1, #44	; 0x2c
 80038f0:	fb01 f303 	mul.w	r3, r1, r3
 80038f4:	4413      	add	r3, r2
 80038f6:	3361      	adds	r3, #97	; 0x61
 80038f8:	2206      	movs	r2, #6
 80038fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	4611      	mov	r1, r2
 8003906:	4618      	mov	r0, r3
 8003908:	f004 fab3 	bl	8007e72 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	4413      	add	r3, r2
 8003914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800391e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003922:	d112      	bne.n	800394a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	4611      	mov	r1, r2
 800392e:	4618      	mov	r0, r3
 8003930:	f004 fa9f 	bl	8007e72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4413      	add	r3, r2
 800393c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003940:	461a      	mov	r2, r3
 8003942:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003946:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003948:	e24e      	b.n	8003de8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4413      	add	r3, r2
 8003952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b01      	cmp	r3, #1
 800395e:	f040 80df 	bne.w	8003b20 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d019      	beq.n	800399e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	212c      	movs	r1, #44	; 0x2c
 8003970:	fb01 f303 	mul.w	r3, r1, r3
 8003974:	4413      	add	r3, r2
 8003976:	3348      	adds	r3, #72	; 0x48
 8003978:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	0159      	lsls	r1, r3, #5
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	440b      	add	r3, r1
 8003982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800398c:	1ad2      	subs	r2, r2, r3
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	202c      	movs	r0, #44	; 0x2c
 8003994:	fb00 f303 	mul.w	r3, r0, r3
 8003998:	440b      	add	r3, r1
 800399a:	3350      	adds	r3, #80	; 0x50
 800399c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	212c      	movs	r1, #44	; 0x2c
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	4413      	add	r3, r2
 80039aa:	3361      	adds	r3, #97	; 0x61
 80039ac:	2201      	movs	r2, #1
 80039ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	212c      	movs	r1, #44	; 0x2c
 80039b6:	fb01 f303 	mul.w	r3, r1, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	335c      	adds	r3, #92	; 0x5c
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ce:	461a      	mov	r2, r3
 80039d0:	2301      	movs	r3, #1
 80039d2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	212c      	movs	r1, #44	; 0x2c
 80039da:	fb01 f303 	mul.w	r3, r1, r3
 80039de:	4413      	add	r3, r2
 80039e0:	333f      	adds	r3, #63	; 0x3f
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d009      	beq.n	80039fc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	212c      	movs	r1, #44	; 0x2c
 80039ee:	fb01 f303 	mul.w	r3, r1, r3
 80039f2:	4413      	add	r3, r2
 80039f4:	333f      	adds	r3, #63	; 0x3f
 80039f6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d111      	bne.n	8003a20 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	4611      	mov	r1, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f004 fa33 	bl	8007e72 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a18:	461a      	mov	r2, r3
 8003a1a:	2310      	movs	r3, #16
 8003a1c:	6093      	str	r3, [r2, #8]
 8003a1e:	e03a      	b.n	8003a96 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	212c      	movs	r1, #44	; 0x2c
 8003a26:	fb01 f303 	mul.w	r3, r1, r3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	333f      	adds	r3, #63	; 0x3f
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d009      	beq.n	8003a48 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	212c      	movs	r1, #44	; 0x2c
 8003a3a:	fb01 f303 	mul.w	r3, r1, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	333f      	adds	r3, #63	; 0x3f
 8003a42:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d126      	bne.n	8003a96 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	0151      	lsls	r1, r2, #5
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	440a      	add	r2, r1
 8003a5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a66:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	212c      	movs	r1, #44	; 0x2c
 8003a6e:	fb01 f303 	mul.w	r3, r1, r3
 8003a72:	4413      	add	r3, r2
 8003a74:	3360      	adds	r3, #96	; 0x60
 8003a76:	2201      	movs	r2, #1
 8003a78:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	b2d9      	uxtb	r1, r3
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	202c      	movs	r0, #44	; 0x2c
 8003a84:	fb00 f303 	mul.w	r3, r0, r3
 8003a88:	4413      	add	r3, r2
 8003a8a:	3360      	adds	r3, #96	; 0x60
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f006 fc8d 	bl	800a3b0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d12b      	bne.n	8003af6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	212c      	movs	r1, #44	; 0x2c
 8003aa4:	fb01 f303 	mul.w	r3, r1, r3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3348      	adds	r3, #72	; 0x48
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	202c      	movs	r0, #44	; 0x2c
 8003ab4:	fb00 f202 	mul.w	r2, r0, r2
 8003ab8:	440a      	add	r2, r1
 8003aba:	3240      	adds	r2, #64	; 0x40
 8003abc:	8812      	ldrh	r2, [r2, #0]
 8003abe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 818e 	beq.w	8003de8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	212c      	movs	r1, #44	; 0x2c
 8003ad2:	fb01 f303 	mul.w	r3, r1, r3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	3354      	adds	r3, #84	; 0x54
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	f083 0301 	eor.w	r3, r3, #1
 8003ae0:	b2d8      	uxtb	r0, r3
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	212c      	movs	r1, #44	; 0x2c
 8003ae8:	fb01 f303 	mul.w	r3, r1, r3
 8003aec:	4413      	add	r3, r2
 8003aee:	3354      	adds	r3, #84	; 0x54
 8003af0:	4602      	mov	r2, r0
 8003af2:	701a      	strb	r2, [r3, #0]
}
 8003af4:	e178      	b.n	8003de8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	212c      	movs	r1, #44	; 0x2c
 8003afc:	fb01 f303 	mul.w	r3, r1, r3
 8003b00:	4413      	add	r3, r2
 8003b02:	3354      	adds	r3, #84	; 0x54
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	f083 0301 	eor.w	r3, r3, #1
 8003b0a:	b2d8      	uxtb	r0, r3
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	212c      	movs	r1, #44	; 0x2c
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	4413      	add	r3, r2
 8003b18:	3354      	adds	r3, #84	; 0x54
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	701a      	strb	r2, [r3, #0]
}
 8003b1e:	e163      	b.n	8003de8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	f040 80f6 	bne.w	8003d24 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	212c      	movs	r1, #44	; 0x2c
 8003b3e:	fb01 f303 	mul.w	r3, r1, r3
 8003b42:	4413      	add	r3, r2
 8003b44:	3361      	adds	r3, #97	; 0x61
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d109      	bne.n	8003b60 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	212c      	movs	r1, #44	; 0x2c
 8003b52:	fb01 f303 	mul.w	r3, r1, r3
 8003b56:	4413      	add	r3, r2
 8003b58:	3360      	adds	r3, #96	; 0x60
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	701a      	strb	r2, [r3, #0]
 8003b5e:	e0c9      	b.n	8003cf4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	212c      	movs	r1, #44	; 0x2c
 8003b66:	fb01 f303 	mul.w	r3, r1, r3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3361      	adds	r3, #97	; 0x61
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b05      	cmp	r3, #5
 8003b72:	d109      	bne.n	8003b88 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	212c      	movs	r1, #44	; 0x2c
 8003b7a:	fb01 f303 	mul.w	r3, r1, r3
 8003b7e:	4413      	add	r3, r2
 8003b80:	3360      	adds	r3, #96	; 0x60
 8003b82:	2205      	movs	r2, #5
 8003b84:	701a      	strb	r2, [r3, #0]
 8003b86:	e0b5      	b.n	8003cf4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	212c      	movs	r1, #44	; 0x2c
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	4413      	add	r3, r2
 8003b94:	3361      	adds	r3, #97	; 0x61
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b06      	cmp	r3, #6
 8003b9a:	d009      	beq.n	8003bb0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	212c      	movs	r1, #44	; 0x2c
 8003ba2:	fb01 f303 	mul.w	r3, r1, r3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3361      	adds	r3, #97	; 0x61
 8003baa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d150      	bne.n	8003c52 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	212c      	movs	r1, #44	; 0x2c
 8003bb6:	fb01 f303 	mul.w	r3, r1, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	335c      	adds	r3, #92	; 0x5c
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	202c      	movs	r0, #44	; 0x2c
 8003bc8:	fb00 f303 	mul.w	r3, r0, r3
 8003bcc:	440b      	add	r3, r1
 8003bce:	335c      	adds	r3, #92	; 0x5c
 8003bd0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	212c      	movs	r1, #44	; 0x2c
 8003bd8:	fb01 f303 	mul.w	r3, r1, r3
 8003bdc:	4413      	add	r3, r2
 8003bde:	335c      	adds	r3, #92	; 0x5c
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d912      	bls.n	8003c0c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	212c      	movs	r1, #44	; 0x2c
 8003bec:	fb01 f303 	mul.w	r3, r1, r3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	335c      	adds	r3, #92	; 0x5c
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	212c      	movs	r1, #44	; 0x2c
 8003bfe:	fb01 f303 	mul.w	r3, r1, r3
 8003c02:	4413      	add	r3, r2
 8003c04:	3360      	adds	r3, #96	; 0x60
 8003c06:	2204      	movs	r2, #4
 8003c08:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c0a:	e073      	b.n	8003cf4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	212c      	movs	r1, #44	; 0x2c
 8003c12:	fb01 f303 	mul.w	r3, r1, r3
 8003c16:	4413      	add	r3, r2
 8003c18:	3360      	adds	r3, #96	; 0x60
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c34:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c3c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c50:	e050      	b.n	8003cf4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	212c      	movs	r1, #44	; 0x2c
 8003c58:	fb01 f303 	mul.w	r3, r1, r3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	3361      	adds	r3, #97	; 0x61
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d122      	bne.n	8003cac <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	212c      	movs	r1, #44	; 0x2c
 8003c6c:	fb01 f303 	mul.w	r3, r1, r3
 8003c70:	4413      	add	r3, r2
 8003c72:	3360      	adds	r3, #96	; 0x60
 8003c74:	2202      	movs	r2, #2
 8003c76:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c8e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c96:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e023      	b.n	8003cf4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	212c      	movs	r1, #44	; 0x2c
 8003cb2:	fb01 f303 	mul.w	r3, r1, r3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3361      	adds	r3, #97	; 0x61
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b07      	cmp	r3, #7
 8003cbe:	d119      	bne.n	8003cf4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	212c      	movs	r1, #44	; 0x2c
 8003cc6:	fb01 f303 	mul.w	r3, r1, r3
 8003cca:	4413      	add	r3, r2
 8003ccc:	335c      	adds	r3, #92	; 0x5c
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	202c      	movs	r0, #44	; 0x2c
 8003cd8:	fb00 f303 	mul.w	r3, r0, r3
 8003cdc:	440b      	add	r3, r1
 8003cde:	335c      	adds	r3, #92	; 0x5c
 8003ce0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	212c      	movs	r1, #44	; 0x2c
 8003ce8:	fb01 f303 	mul.w	r3, r1, r3
 8003cec:	4413      	add	r3, r2
 8003cee:	3360      	adds	r3, #96	; 0x60
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d00:	461a      	mov	r2, r3
 8003d02:	2302      	movs	r3, #2
 8003d04:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	b2d9      	uxtb	r1, r3
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	202c      	movs	r0, #44	; 0x2c
 8003d10:	fb00 f303 	mul.w	r3, r0, r3
 8003d14:	4413      	add	r3, r2
 8003d16:	3360      	adds	r3, #96	; 0x60
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f006 fb47 	bl	800a3b0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d22:	e061      	b.n	8003de8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 0310 	and.w	r3, r3, #16
 8003d36:	2b10      	cmp	r3, #16
 8003d38:	d156      	bne.n	8003de8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	212c      	movs	r1, #44	; 0x2c
 8003d40:	fb01 f303 	mul.w	r3, r1, r3
 8003d44:	4413      	add	r3, r2
 8003d46:	333f      	adds	r3, #63	; 0x3f
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b03      	cmp	r3, #3
 8003d4c:	d111      	bne.n	8003d72 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	212c      	movs	r1, #44	; 0x2c
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	335c      	adds	r3, #92	; 0x5c
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	4611      	mov	r1, r2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f004 f881 	bl	8007e72 <USB_HC_Halt>
 8003d70:	e031      	b.n	8003dd6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	212c      	movs	r1, #44	; 0x2c
 8003d78:	fb01 f303 	mul.w	r3, r1, r3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	333f      	adds	r3, #63	; 0x3f
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d009      	beq.n	8003d9a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	212c      	movs	r1, #44	; 0x2c
 8003d8c:	fb01 f303 	mul.w	r3, r1, r3
 8003d90:	4413      	add	r3, r2
 8003d92:	333f      	adds	r3, #63	; 0x3f
 8003d94:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d11d      	bne.n	8003dd6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	212c      	movs	r1, #44	; 0x2c
 8003da0:	fb01 f303 	mul.w	r3, r1, r3
 8003da4:	4413      	add	r3, r2
 8003da6:	335c      	adds	r3, #92	; 0x5c
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d110      	bne.n	8003dd6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	212c      	movs	r1, #44	; 0x2c
 8003dba:	fb01 f303 	mul.w	r3, r1, r3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3361      	adds	r3, #97	; 0x61
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	4611      	mov	r1, r2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f004 f84e 	bl	8007e72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de2:	461a      	mov	r2, r3
 8003de4:	2310      	movs	r3, #16
 8003de6:	6093      	str	r3, [r2, #8]
}
 8003de8:	bf00      	nop
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003e06:	78fb      	ldrb	r3, [r7, #3]
 8003e08:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d11a      	bne.n	8003e56 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2304      	movs	r3, #4
 8003e30:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	212c      	movs	r1, #44	; 0x2c
 8003e38:	fb01 f303 	mul.w	r3, r1, r3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	3361      	adds	r3, #97	; 0x61
 8003e40:	2206      	movs	r2, #6
 8003e42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f004 f80f 	bl	8007e72 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003e54:	e331      	b.n	80044ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 0320 	and.w	r3, r3, #32
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d12e      	bne.n	8003eca <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e78:	461a      	mov	r2, r3
 8003e7a:	2320      	movs	r3, #32
 8003e7c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	212c      	movs	r1, #44	; 0x2c
 8003e84:	fb01 f303 	mul.w	r3, r1, r3
 8003e88:	4413      	add	r3, r2
 8003e8a:	333d      	adds	r3, #61	; 0x3d
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	f040 8313 	bne.w	80044ba <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	212c      	movs	r1, #44	; 0x2c
 8003e9a:	fb01 f303 	mul.w	r3, r1, r3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	333d      	adds	r3, #61	; 0x3d
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	212c      	movs	r1, #44	; 0x2c
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	3360      	adds	r3, #96	; 0x60
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	4611      	mov	r1, r2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f003 ffd5 	bl	8007e72 <USB_HC_Halt>
}
 8003ec8:	e2f7      	b.n	80044ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee0:	d112      	bne.n	8003f08 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eee:	461a      	mov	r2, r3
 8003ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ef4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	4611      	mov	r1, r2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f003 ffb6 	bl	8007e72 <USB_HC_Halt>
}
 8003f06:	e2d8      	b.n	80044ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d140      	bne.n	8003fa0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	212c      	movs	r1, #44	; 0x2c
 8003f24:	fb01 f303 	mul.w	r3, r1, r3
 8003f28:	4413      	add	r3, r2
 8003f2a:	335c      	adds	r3, #92	; 0x5c
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f42:	2b40      	cmp	r3, #64	; 0x40
 8003f44:	d111      	bne.n	8003f6a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	212c      	movs	r1, #44	; 0x2c
 8003f4c:	fb01 f303 	mul.w	r3, r1, r3
 8003f50:	4413      	add	r3, r2
 8003f52:	333d      	adds	r3, #61	; 0x3d
 8003f54:	2201      	movs	r2, #1
 8003f56:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f64:	461a      	mov	r2, r3
 8003f66:	2340      	movs	r3, #64	; 0x40
 8003f68:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f76:	461a      	mov	r2, r3
 8003f78:	2301      	movs	r3, #1
 8003f7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	212c      	movs	r1, #44	; 0x2c
 8003f82:	fb01 f303 	mul.w	r3, r1, r3
 8003f86:	4413      	add	r3, r2
 8003f88:	3361      	adds	r3, #97	; 0x61
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	4611      	mov	r1, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f003 ff6a 	bl	8007e72 <USB_HC_Halt>
}
 8003f9e:	e28c      	b.n	80044ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb2:	2b40      	cmp	r3, #64	; 0x40
 8003fb4:	d12c      	bne.n	8004010 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	212c      	movs	r1, #44	; 0x2c
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3361      	adds	r3, #97	; 0x61
 8003fc4:	2204      	movs	r2, #4
 8003fc6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	212c      	movs	r1, #44	; 0x2c
 8003fce:	fb01 f303 	mul.w	r3, r1, r3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	333d      	adds	r3, #61	; 0x3d
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	212c      	movs	r1, #44	; 0x2c
 8003fe0:	fb01 f303 	mul.w	r3, r1, r3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	335c      	adds	r3, #92	; 0x5c
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f003 ff3b 	bl	8007e72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	4413      	add	r3, r2
 8004004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004008:	461a      	mov	r2, r3
 800400a:	2340      	movs	r3, #64	; 0x40
 800400c:	6093      	str	r3, [r2, #8]
}
 800400e:	e254      	b.n	80044ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	4413      	add	r3, r2
 8004018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b08      	cmp	r3, #8
 8004024:	d11a      	bne.n	800405c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	4413      	add	r3, r2
 800402e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004032:	461a      	mov	r2, r3
 8004034:	2308      	movs	r3, #8
 8004036:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	212c      	movs	r1, #44	; 0x2c
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	4413      	add	r3, r2
 8004044:	3361      	adds	r3, #97	; 0x61
 8004046:	2205      	movs	r2, #5
 8004048:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	4611      	mov	r1, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f003 ff0c 	bl	8007e72 <USB_HC_Halt>
}
 800405a:	e22e      	b.n	80044ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	4413      	add	r3, r2
 8004064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 0310 	and.w	r3, r3, #16
 800406e:	2b10      	cmp	r3, #16
 8004070:	d140      	bne.n	80040f4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	212c      	movs	r1, #44	; 0x2c
 8004078:	fb01 f303 	mul.w	r3, r1, r3
 800407c:	4413      	add	r3, r2
 800407e:	335c      	adds	r3, #92	; 0x5c
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	212c      	movs	r1, #44	; 0x2c
 800408a:	fb01 f303 	mul.w	r3, r1, r3
 800408e:	4413      	add	r3, r2
 8004090:	3361      	adds	r3, #97	; 0x61
 8004092:	2203      	movs	r2, #3
 8004094:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	212c      	movs	r1, #44	; 0x2c
 800409c:	fb01 f303 	mul.w	r3, r1, r3
 80040a0:	4413      	add	r3, r2
 80040a2:	333d      	adds	r3, #61	; 0x3d
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d112      	bne.n	80040d0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	212c      	movs	r1, #44	; 0x2c
 80040b0:	fb01 f303 	mul.w	r3, r1, r3
 80040b4:	4413      	add	r3, r2
 80040b6:	333c      	adds	r3, #60	; 0x3c
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d108      	bne.n	80040d0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	212c      	movs	r1, #44	; 0x2c
 80040c4:	fb01 f303 	mul.w	r3, r1, r3
 80040c8:	4413      	add	r3, r2
 80040ca:	333d      	adds	r3, #61	; 0x3d
 80040cc:	2201      	movs	r2, #1
 80040ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	4611      	mov	r1, r2
 80040da:	4618      	mov	r0, r3
 80040dc:	f003 fec9 	bl	8007e72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ec:	461a      	mov	r2, r3
 80040ee:	2310      	movs	r3, #16
 80040f0:	6093      	str	r3, [r2, #8]
}
 80040f2:	e1e2      	b.n	80044ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004106:	2b80      	cmp	r3, #128	; 0x80
 8004108:	d164      	bne.n	80041d4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d111      	bne.n	8004136 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	212c      	movs	r1, #44	; 0x2c
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	4413      	add	r3, r2
 800411e:	3361      	adds	r3, #97	; 0x61
 8004120:	2206      	movs	r2, #6
 8004122:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	4611      	mov	r1, r2
 800412e:	4618      	mov	r0, r3
 8004130:	f003 fe9f 	bl	8007e72 <USB_HC_Halt>
 8004134:	e044      	b.n	80041c0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	212c      	movs	r1, #44	; 0x2c
 800413c:	fb01 f303 	mul.w	r3, r1, r3
 8004140:	4413      	add	r3, r2
 8004142:	335c      	adds	r3, #92	; 0x5c
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	202c      	movs	r0, #44	; 0x2c
 800414e:	fb00 f303 	mul.w	r3, r0, r3
 8004152:	440b      	add	r3, r1
 8004154:	335c      	adds	r3, #92	; 0x5c
 8004156:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	212c      	movs	r1, #44	; 0x2c
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	4413      	add	r3, r2
 8004164:	335c      	adds	r3, #92	; 0x5c
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d920      	bls.n	80041ae <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	212c      	movs	r1, #44	; 0x2c
 8004172:	fb01 f303 	mul.w	r3, r1, r3
 8004176:	4413      	add	r3, r2
 8004178:	335c      	adds	r3, #92	; 0x5c
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	212c      	movs	r1, #44	; 0x2c
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	4413      	add	r3, r2
 800418a:	3360      	adds	r3, #96	; 0x60
 800418c:	2204      	movs	r2, #4
 800418e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	b2d9      	uxtb	r1, r3
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	202c      	movs	r0, #44	; 0x2c
 800419a:	fb00 f303 	mul.w	r3, r0, r3
 800419e:	4413      	add	r3, r2
 80041a0:	3360      	adds	r3, #96	; 0x60
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f006 f902 	bl	800a3b0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80041ac:	e008      	b.n	80041c0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	212c      	movs	r1, #44	; 0x2c
 80041b4:	fb01 f303 	mul.w	r3, r1, r3
 80041b8:	4413      	add	r3, r2
 80041ba:	3360      	adds	r3, #96	; 0x60
 80041bc:	2202      	movs	r2, #2
 80041be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041cc:	461a      	mov	r2, r3
 80041ce:	2380      	movs	r3, #128	; 0x80
 80041d0:	6093      	str	r3, [r2, #8]
}
 80041d2:	e172      	b.n	80044ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ea:	d11b      	bne.n	8004224 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	212c      	movs	r1, #44	; 0x2c
 80041f2:	fb01 f303 	mul.w	r3, r1, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	3361      	adds	r3, #97	; 0x61
 80041fa:	2208      	movs	r2, #8
 80041fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	4611      	mov	r1, r2
 8004208:	4618      	mov	r0, r3
 800420a:	f003 fe32 	bl	8007e72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	4413      	add	r3, r2
 8004216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421a:	461a      	mov	r2, r3
 800421c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004220:	6093      	str	r3, [r2, #8]
}
 8004222:	e14a      	b.n	80044ba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	4413      	add	r3, r2
 800422c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b02      	cmp	r3, #2
 8004238:	f040 813f 	bne.w	80044ba <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	212c      	movs	r1, #44	; 0x2c
 8004242:	fb01 f303 	mul.w	r3, r1, r3
 8004246:	4413      	add	r3, r2
 8004248:	3361      	adds	r3, #97	; 0x61
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d17d      	bne.n	800434c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	212c      	movs	r1, #44	; 0x2c
 8004256:	fb01 f303 	mul.w	r3, r1, r3
 800425a:	4413      	add	r3, r2
 800425c:	3360      	adds	r3, #96	; 0x60
 800425e:	2201      	movs	r2, #1
 8004260:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	212c      	movs	r1, #44	; 0x2c
 8004268:	fb01 f303 	mul.w	r3, r1, r3
 800426c:	4413      	add	r3, r2
 800426e:	333f      	adds	r3, #63	; 0x3f
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d00a      	beq.n	800428c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	212c      	movs	r1, #44	; 0x2c
 800427c:	fb01 f303 	mul.w	r3, r1, r3
 8004280:	4413      	add	r3, r2
 8004282:	333f      	adds	r3, #63	; 0x3f
 8004284:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004286:	2b03      	cmp	r3, #3
 8004288:	f040 8100 	bne.w	800448c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d113      	bne.n	80042bc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	212c      	movs	r1, #44	; 0x2c
 800429a:	fb01 f303 	mul.w	r3, r1, r3
 800429e:	4413      	add	r3, r2
 80042a0:	3355      	adds	r3, #85	; 0x55
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	f083 0301 	eor.w	r3, r3, #1
 80042a8:	b2d8      	uxtb	r0, r3
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	212c      	movs	r1, #44	; 0x2c
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	4413      	add	r3, r2
 80042b6:	3355      	adds	r3, #85	; 0x55
 80042b8:	4602      	mov	r2, r0
 80042ba:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	f040 80e3 	bne.w	800448c <HCD_HC_OUT_IRQHandler+0x69c>
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	212c      	movs	r1, #44	; 0x2c
 80042cc:	fb01 f303 	mul.w	r3, r1, r3
 80042d0:	4413      	add	r3, r2
 80042d2:	334c      	adds	r3, #76	; 0x4c
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 80d8 	beq.w	800448c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	212c      	movs	r1, #44	; 0x2c
 80042e2:	fb01 f303 	mul.w	r3, r1, r3
 80042e6:	4413      	add	r3, r2
 80042e8:	334c      	adds	r3, #76	; 0x4c
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	202c      	movs	r0, #44	; 0x2c
 80042f2:	fb00 f202 	mul.w	r2, r0, r2
 80042f6:	440a      	add	r2, r1
 80042f8:	3240      	adds	r2, #64	; 0x40
 80042fa:	8812      	ldrh	r2, [r2, #0]
 80042fc:	4413      	add	r3, r2
 80042fe:	3b01      	subs	r3, #1
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	202c      	movs	r0, #44	; 0x2c
 8004306:	fb00 f202 	mul.w	r2, r0, r2
 800430a:	440a      	add	r2, r1
 800430c:	3240      	adds	r2, #64	; 0x40
 800430e:	8812      	ldrh	r2, [r2, #0]
 8004310:	fbb3 f3f2 	udiv	r3, r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 80b5 	beq.w	800448c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	212c      	movs	r1, #44	; 0x2c
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	4413      	add	r3, r2
 800432e:	3355      	adds	r3, #85	; 0x55
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	f083 0301 	eor.w	r3, r3, #1
 8004336:	b2d8      	uxtb	r0, r3
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	212c      	movs	r1, #44	; 0x2c
 800433e:	fb01 f303 	mul.w	r3, r1, r3
 8004342:	4413      	add	r3, r2
 8004344:	3355      	adds	r3, #85	; 0x55
 8004346:	4602      	mov	r2, r0
 8004348:	701a      	strb	r2, [r3, #0]
 800434a:	e09f      	b.n	800448c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	212c      	movs	r1, #44	; 0x2c
 8004352:	fb01 f303 	mul.w	r3, r1, r3
 8004356:	4413      	add	r3, r2
 8004358:	3361      	adds	r3, #97	; 0x61
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b03      	cmp	r3, #3
 800435e:	d109      	bne.n	8004374 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	212c      	movs	r1, #44	; 0x2c
 8004366:	fb01 f303 	mul.w	r3, r1, r3
 800436a:	4413      	add	r3, r2
 800436c:	3360      	adds	r3, #96	; 0x60
 800436e:	2202      	movs	r2, #2
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	e08b      	b.n	800448c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	212c      	movs	r1, #44	; 0x2c
 800437a:	fb01 f303 	mul.w	r3, r1, r3
 800437e:	4413      	add	r3, r2
 8004380:	3361      	adds	r3, #97	; 0x61
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b04      	cmp	r3, #4
 8004386:	d109      	bne.n	800439c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	212c      	movs	r1, #44	; 0x2c
 800438e:	fb01 f303 	mul.w	r3, r1, r3
 8004392:	4413      	add	r3, r2
 8004394:	3360      	adds	r3, #96	; 0x60
 8004396:	2202      	movs	r2, #2
 8004398:	701a      	strb	r2, [r3, #0]
 800439a:	e077      	b.n	800448c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	212c      	movs	r1, #44	; 0x2c
 80043a2:	fb01 f303 	mul.w	r3, r1, r3
 80043a6:	4413      	add	r3, r2
 80043a8:	3361      	adds	r3, #97	; 0x61
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b05      	cmp	r3, #5
 80043ae:	d109      	bne.n	80043c4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	212c      	movs	r1, #44	; 0x2c
 80043b6:	fb01 f303 	mul.w	r3, r1, r3
 80043ba:	4413      	add	r3, r2
 80043bc:	3360      	adds	r3, #96	; 0x60
 80043be:	2205      	movs	r2, #5
 80043c0:	701a      	strb	r2, [r3, #0]
 80043c2:	e063      	b.n	800448c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	212c      	movs	r1, #44	; 0x2c
 80043ca:	fb01 f303 	mul.w	r3, r1, r3
 80043ce:	4413      	add	r3, r2
 80043d0:	3361      	adds	r3, #97	; 0x61
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b06      	cmp	r3, #6
 80043d6:	d009      	beq.n	80043ec <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	212c      	movs	r1, #44	; 0x2c
 80043de:	fb01 f303 	mul.w	r3, r1, r3
 80043e2:	4413      	add	r3, r2
 80043e4:	3361      	adds	r3, #97	; 0x61
 80043e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d14f      	bne.n	800448c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	212c      	movs	r1, #44	; 0x2c
 80043f2:	fb01 f303 	mul.w	r3, r1, r3
 80043f6:	4413      	add	r3, r2
 80043f8:	335c      	adds	r3, #92	; 0x5c
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	202c      	movs	r0, #44	; 0x2c
 8004404:	fb00 f303 	mul.w	r3, r0, r3
 8004408:	440b      	add	r3, r1
 800440a:	335c      	adds	r3, #92	; 0x5c
 800440c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	212c      	movs	r1, #44	; 0x2c
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	4413      	add	r3, r2
 800441a:	335c      	adds	r3, #92	; 0x5c
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d912      	bls.n	8004448 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	212c      	movs	r1, #44	; 0x2c
 8004428:	fb01 f303 	mul.w	r3, r1, r3
 800442c:	4413      	add	r3, r2
 800442e:	335c      	adds	r3, #92	; 0x5c
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	212c      	movs	r1, #44	; 0x2c
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	4413      	add	r3, r2
 8004440:	3360      	adds	r3, #96	; 0x60
 8004442:	2204      	movs	r2, #4
 8004444:	701a      	strb	r2, [r3, #0]
 8004446:	e021      	b.n	800448c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	212c      	movs	r1, #44	; 0x2c
 800444e:	fb01 f303 	mul.w	r3, r1, r3
 8004452:	4413      	add	r3, r2
 8004454:	3360      	adds	r3, #96	; 0x60
 8004456:	2202      	movs	r2, #2
 8004458:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	4413      	add	r3, r2
 8004462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004470:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004478:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	4413      	add	r3, r2
 8004482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004486:	461a      	mov	r2, r3
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	4413      	add	r3, r2
 8004494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004498:	461a      	mov	r2, r3
 800449a:	2302      	movs	r3, #2
 800449c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	b2d9      	uxtb	r1, r3
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	202c      	movs	r0, #44	; 0x2c
 80044a8:	fb00 f303 	mul.w	r3, r0, r3
 80044ac:	4413      	add	r3, r2
 80044ae:	3360      	adds	r3, #96	; 0x60
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f005 ff7b 	bl	800a3b0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80044ba:	bf00      	nop
 80044bc:	3720      	adds	r7, #32
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b08a      	sub	sp, #40	; 0x28
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	0c5b      	lsrs	r3, r3, #17
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044f6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d004      	beq.n	8004508 <HCD_RXQLVL_IRQHandler+0x46>
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b05      	cmp	r3, #5
 8004502:	f000 80a9 	beq.w	8004658 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004506:	e0aa      	b.n	800465e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 80a6 	beq.w	800465c <HCD_RXQLVL_IRQHandler+0x19a>
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	212c      	movs	r1, #44	; 0x2c
 8004516:	fb01 f303 	mul.w	r3, r1, r3
 800451a:	4413      	add	r3, r2
 800451c:	3344      	adds	r3, #68	; 0x44
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 809b 	beq.w	800465c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	212c      	movs	r1, #44	; 0x2c
 800452c:	fb01 f303 	mul.w	r3, r1, r3
 8004530:	4413      	add	r3, r2
 8004532:	3350      	adds	r3, #80	; 0x50
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	441a      	add	r2, r3
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	202c      	movs	r0, #44	; 0x2c
 8004540:	fb00 f303 	mul.w	r3, r0, r3
 8004544:	440b      	add	r3, r1
 8004546:	334c      	adds	r3, #76	; 0x4c
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d87a      	bhi.n	8004644 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	212c      	movs	r1, #44	; 0x2c
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	4413      	add	r3, r2
 800455e:	3344      	adds	r3, #68	; 0x44
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	b292      	uxth	r2, r2
 8004566:	4619      	mov	r1, r3
 8004568:	f002 ffda 	bl	8007520 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	212c      	movs	r1, #44	; 0x2c
 8004572:	fb01 f303 	mul.w	r3, r1, r3
 8004576:	4413      	add	r3, r2
 8004578:	3344      	adds	r3, #68	; 0x44
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	441a      	add	r2, r3
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	202c      	movs	r0, #44	; 0x2c
 8004586:	fb00 f303 	mul.w	r3, r0, r3
 800458a:	440b      	add	r3, r1
 800458c:	3344      	adds	r3, #68	; 0x44
 800458e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	212c      	movs	r1, #44	; 0x2c
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	4413      	add	r3, r2
 800459c:	3350      	adds	r3, #80	; 0x50
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	441a      	add	r2, r3
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	202c      	movs	r0, #44	; 0x2c
 80045aa:	fb00 f303 	mul.w	r3, r0, r3
 80045ae:	440b      	add	r3, r1
 80045b0:	3350      	adds	r3, #80	; 0x50
 80045b2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	0cdb      	lsrs	r3, r3, #19
 80045c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045c8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	212c      	movs	r1, #44	; 0x2c
 80045d0:	fb01 f303 	mul.w	r3, r1, r3
 80045d4:	4413      	add	r3, r2
 80045d6:	3340      	adds	r3, #64	; 0x40
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4293      	cmp	r3, r2
 80045e0:	d13c      	bne.n	800465c <HCD_RXQLVL_IRQHandler+0x19a>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d039      	beq.n	800465c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045fe:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004606:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	4413      	add	r3, r2
 8004610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004614:	461a      	mov	r2, r3
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	212c      	movs	r1, #44	; 0x2c
 8004620:	fb01 f303 	mul.w	r3, r1, r3
 8004624:	4413      	add	r3, r2
 8004626:	3354      	adds	r3, #84	; 0x54
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	f083 0301 	eor.w	r3, r3, #1
 800462e:	b2d8      	uxtb	r0, r3
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	212c      	movs	r1, #44	; 0x2c
 8004636:	fb01 f303 	mul.w	r3, r1, r3
 800463a:	4413      	add	r3, r2
 800463c:	3354      	adds	r3, #84	; 0x54
 800463e:	4602      	mov	r2, r0
 8004640:	701a      	strb	r2, [r3, #0]
      break;
 8004642:	e00b      	b.n	800465c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	212c      	movs	r1, #44	; 0x2c
 800464a:	fb01 f303 	mul.w	r3, r1, r3
 800464e:	4413      	add	r3, r2
 8004650:	3360      	adds	r3, #96	; 0x60
 8004652:	2204      	movs	r2, #4
 8004654:	701a      	strb	r2, [r3, #0]
      break;
 8004656:	e001      	b.n	800465c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004658:	bf00      	nop
 800465a:	e000      	b.n	800465e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800465c:	bf00      	nop
  }
}
 800465e:	bf00      	nop
 8004660:	3728      	adds	r7, #40	; 0x28
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b086      	sub	sp, #24
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004692:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b02      	cmp	r3, #2
 800469c:	d10b      	bne.n	80046b6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d102      	bne.n	80046ae <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f005 fe65 	bl	800a378 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f043 0302 	orr.w	r3, r3, #2
 80046b4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d132      	bne.n	8004726 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f043 0308 	orr.w	r3, r3, #8
 80046c6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d126      	bne.n	8004720 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d113      	bne.n	8004702 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80046e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046e4:	d106      	bne.n	80046f4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2102      	movs	r1, #2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f003 f885 	bl	80077fc <USB_InitFSLSPClkSel>
 80046f2:	e011      	b.n	8004718 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2101      	movs	r1, #1
 80046fa:	4618      	mov	r0, r3
 80046fc:	f003 f87e 	bl	80077fc <USB_InitFSLSPClkSel>
 8004700:	e00a      	b.n	8004718 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d106      	bne.n	8004718 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004710:	461a      	mov	r2, r3
 8004712:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004716:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f005 fe57 	bl	800a3cc <HAL_HCD_PortEnabled_Callback>
 800471e:	e002      	b.n	8004726 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f005 fe61 	bl	800a3e8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f003 0320 	and.w	r3, r3, #32
 800472c:	2b20      	cmp	r3, #32
 800472e:	d103      	bne.n	8004738 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f043 0320 	orr.w	r3, r3, #32
 8004736:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800473e:	461a      	mov	r2, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	6013      	str	r3, [r2, #0]
}
 8004744:	bf00      	nop
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e12b      	b.n	80049b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d106      	bne.n	8004778 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fd f9b8 	bl	8001ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2224      	movs	r2, #36	; 0x24
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800479e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047b0:	f001 f964 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 80047b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	4a81      	ldr	r2, [pc, #516]	; (80049c0 <HAL_I2C_Init+0x274>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d807      	bhi.n	80047d0 <HAL_I2C_Init+0x84>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4a80      	ldr	r2, [pc, #512]	; (80049c4 <HAL_I2C_Init+0x278>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	bf94      	ite	ls
 80047c8:	2301      	movls	r3, #1
 80047ca:	2300      	movhi	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	e006      	b.n	80047de <HAL_I2C_Init+0x92>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4a7d      	ldr	r2, [pc, #500]	; (80049c8 <HAL_I2C_Init+0x27c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	bf94      	ite	ls
 80047d8:	2301      	movls	r3, #1
 80047da:	2300      	movhi	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e0e7      	b.n	80049b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4a78      	ldr	r2, [pc, #480]	; (80049cc <HAL_I2C_Init+0x280>)
 80047ea:	fba2 2303 	umull	r2, r3, r2, r3
 80047ee:	0c9b      	lsrs	r3, r3, #18
 80047f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	4a6a      	ldr	r2, [pc, #424]	; (80049c0 <HAL_I2C_Init+0x274>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d802      	bhi.n	8004820 <HAL_I2C_Init+0xd4>
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	3301      	adds	r3, #1
 800481e:	e009      	b.n	8004834 <HAL_I2C_Init+0xe8>
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004826:	fb02 f303 	mul.w	r3, r2, r3
 800482a:	4a69      	ldr	r2, [pc, #420]	; (80049d0 <HAL_I2C_Init+0x284>)
 800482c:	fba2 2303 	umull	r2, r3, r2, r3
 8004830:	099b      	lsrs	r3, r3, #6
 8004832:	3301      	adds	r3, #1
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6812      	ldr	r2, [r2, #0]
 8004838:	430b      	orrs	r3, r1
 800483a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004846:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	495c      	ldr	r1, [pc, #368]	; (80049c0 <HAL_I2C_Init+0x274>)
 8004850:	428b      	cmp	r3, r1
 8004852:	d819      	bhi.n	8004888 <HAL_I2C_Init+0x13c>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	1e59      	subs	r1, r3, #1
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004862:	1c59      	adds	r1, r3, #1
 8004864:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004868:	400b      	ands	r3, r1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <HAL_I2C_Init+0x138>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	1e59      	subs	r1, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	fbb1 f3f3 	udiv	r3, r1, r3
 800487c:	3301      	adds	r3, #1
 800487e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004882:	e051      	b.n	8004928 <HAL_I2C_Init+0x1dc>
 8004884:	2304      	movs	r3, #4
 8004886:	e04f      	b.n	8004928 <HAL_I2C_Init+0x1dc>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d111      	bne.n	80048b4 <HAL_I2C_Init+0x168>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	1e58      	subs	r0, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6859      	ldr	r1, [r3, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	440b      	add	r3, r1
 800489e:	fbb0 f3f3 	udiv	r3, r0, r3
 80048a2:	3301      	adds	r3, #1
 80048a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	bf0c      	ite	eq
 80048ac:	2301      	moveq	r3, #1
 80048ae:	2300      	movne	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	e012      	b.n	80048da <HAL_I2C_Init+0x18e>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	1e58      	subs	r0, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6859      	ldr	r1, [r3, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	0099      	lsls	r1, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ca:	3301      	adds	r3, #1
 80048cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	bf0c      	ite	eq
 80048d4:	2301      	moveq	r3, #1
 80048d6:	2300      	movne	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_I2C_Init+0x196>
 80048de:	2301      	movs	r3, #1
 80048e0:	e022      	b.n	8004928 <HAL_I2C_Init+0x1dc>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10e      	bne.n	8004908 <HAL_I2C_Init+0x1bc>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	1e58      	subs	r0, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6859      	ldr	r1, [r3, #4]
 80048f2:	460b      	mov	r3, r1
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	440b      	add	r3, r1
 80048f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80048fc:	3301      	adds	r3, #1
 80048fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004906:	e00f      	b.n	8004928 <HAL_I2C_Init+0x1dc>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	1e58      	subs	r0, r3, #1
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6859      	ldr	r1, [r3, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	440b      	add	r3, r1
 8004916:	0099      	lsls	r1, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	fbb0 f3f3 	udiv	r3, r0, r3
 800491e:	3301      	adds	r3, #1
 8004920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004924:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	6809      	ldr	r1, [r1, #0]
 800492c:	4313      	orrs	r3, r2
 800492e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69da      	ldr	r2, [r3, #28]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004956:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6911      	ldr	r1, [r2, #16]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68d2      	ldr	r2, [r2, #12]
 8004962:	4311      	orrs	r1, r2
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6812      	ldr	r2, [r2, #0]
 8004968:	430b      	orrs	r3, r1
 800496a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	695a      	ldr	r2, [r3, #20]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	000186a0 	.word	0x000186a0
 80049c4:	001e847f 	.word	0x001e847f
 80049c8:	003d08ff 	.word	0x003d08ff
 80049cc:	431bde83 	.word	0x431bde83
 80049d0:	10624dd3 	.word	0x10624dd3

080049d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d129      	bne.n	8004a3e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2224      	movs	r2, #36	; 0x24
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0201 	bic.w	r2, r2, #1
 8004a00:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0210 	bic.w	r2, r2, #16
 8004a10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0201 	orr.w	r2, r2, #1
 8004a30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e000      	b.n	8004a40 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004a3e:	2302      	movs	r3, #2
  }
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004a56:	2300      	movs	r3, #0
 8004a58:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d12a      	bne.n	8004abc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2224      	movs	r2, #36	; 0x24
 8004a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0201 	bic.w	r2, r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004a86:	89fb      	ldrh	r3, [r7, #14]
 8004a88:	f023 030f 	bic.w	r3, r3, #15
 8004a8c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	89fb      	ldrh	r3, [r7, #14]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	89fa      	ldrh	r2, [r7, #14]
 8004a9e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e000      	b.n	8004abe <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004abc:	2302      	movs	r3, #2
  }
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
	...

08004acc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e0bf      	b.n	8004c5e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fd f862 	bl	8001bbc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004b0e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6999      	ldr	r1, [r3, #24]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b24:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6899      	ldr	r1, [r3, #8]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4b4a      	ldr	r3, [pc, #296]	; (8004c68 <HAL_LTDC_Init+0x19c>)
 8004b40:	400b      	ands	r3, r1
 8004b42:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	041b      	lsls	r3, r3, #16
 8004b4a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6899      	ldr	r1, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68d9      	ldr	r1, [r3, #12]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	4b3e      	ldr	r3, [pc, #248]	; (8004c68 <HAL_LTDC_Init+0x19c>)
 8004b6e:	400b      	ands	r3, r1
 8004b70:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	041b      	lsls	r3, r3, #16
 8004b78:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68d9      	ldr	r1, [r3, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1a      	ldr	r2, [r3, #32]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6919      	ldr	r1, [r3, #16]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	4b33      	ldr	r3, [pc, #204]	; (8004c68 <HAL_LTDC_Init+0x19c>)
 8004b9c:	400b      	ands	r3, r1
 8004b9e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	041b      	lsls	r3, r3, #16
 8004ba6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6919      	ldr	r1, [r3, #16]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6959      	ldr	r1, [r3, #20]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	4b27      	ldr	r3, [pc, #156]	; (8004c68 <HAL_LTDC_Init+0x19c>)
 8004bca:	400b      	ands	r3, r1
 8004bcc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	041b      	lsls	r3, r3, #16
 8004bd4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6959      	ldr	r1, [r3, #20]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bf2:	021b      	lsls	r3, r3, #8
 8004bf4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004bfc:	041b      	lsls	r3, r3, #16
 8004bfe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0206 	orr.w	r2, r2, #6
 8004c3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699a      	ldr	r2, [r3, #24]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	f000f800 	.word	0xf000f800

08004c6c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c82:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d023      	beq.n	8004cd6 <HAL_LTDC_IRQHandler+0x6a>
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01e      	beq.n	8004cd6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0204 	bic.w	r2, r2, #4
 8004ca6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2204      	movs	r2, #4
 8004cae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004cb6:	f043 0201 	orr.w	r2, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2204      	movs	r2, #4
 8004cc4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f86f 	bl	8004db4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d023      	beq.n	8004d28 <HAL_LTDC_IRQHandler+0xbc>
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d01e      	beq.n	8004d28 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0202 	bic.w	r2, r2, #2
 8004cf8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d08:	f043 0202 	orr.w	r2, r3, #2
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2204      	movs	r2, #4
 8004d16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f846 	bl	8004db4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d01b      	beq.n	8004d6a <HAL_LTDC_IRQHandler+0xfe>
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d016      	beq.n	8004d6a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0201 	bic.w	r2, r2, #1
 8004d4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2201      	movs	r2, #1
 8004d52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f82f 	bl	8004dc8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01b      	beq.n	8004dac <HAL_LTDC_IRQHandler+0x140>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d016      	beq.n	8004dac <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0208 	bic.w	r2, r2, #8
 8004d8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2208      	movs	r2, #8
 8004d94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f818 	bl	8004ddc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004dac:	bf00      	nop
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004df0:	b5b0      	push	{r4, r5, r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <HAL_LTDC_ConfigLayer+0x1a>
 8004e06:	2302      	movs	r3, #2
 8004e08:	e02c      	b.n	8004e64 <HAL_LTDC_ConfigLayer+0x74>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2202      	movs	r2, #2
 8004e16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2134      	movs	r1, #52	; 0x34
 8004e20:	fb01 f303 	mul.w	r3, r1, r3
 8004e24:	4413      	add	r3, r2
 8004e26:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	4614      	mov	r4, r2
 8004e2e:	461d      	mov	r5, r3
 8004e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	68b9      	ldr	r1, [r7, #8]
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f000 f811 	bl	8004e6c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bdb0      	pop	{r4, r5, r7, pc}

08004e6c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b089      	sub	sp, #36	; 0x24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	0c1b      	lsrs	r3, r3, #16
 8004e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e88:	4413      	add	r3, r2
 8004e8a:	041b      	lsls	r3, r3, #16
 8004e8c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	461a      	mov	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	01db      	lsls	r3, r3, #7
 8004e98:	4413      	add	r3, r2
 8004e9a:	3384      	adds	r3, #132	; 0x84
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	6812      	ldr	r2, [r2, #0]
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	01d2      	lsls	r2, r2, #7
 8004ea8:	440a      	add	r2, r1
 8004eaa:	3284      	adds	r2, #132	; 0x84
 8004eac:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004eb0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	0c1b      	lsrs	r3, r3, #16
 8004ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ec2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ec4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	01db      	lsls	r3, r3, #7
 8004ed0:	440b      	add	r3, r1
 8004ed2:	3384      	adds	r3, #132	; 0x84
 8004ed4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004eda:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004eea:	4413      	add	r3, r2
 8004eec:	041b      	lsls	r3, r3, #16
 8004eee:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	01db      	lsls	r3, r3, #7
 8004efa:	4413      	add	r3, r2
 8004efc:	3384      	adds	r3, #132	; 0x84
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	4611      	mov	r1, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	01d2      	lsls	r2, r2, #7
 8004f0a:	440a      	add	r2, r1
 8004f0c:	3284      	adds	r2, #132	; 0x84
 8004f0e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004f12:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f22:	4413      	add	r3, r2
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	01db      	lsls	r3, r3, #7
 8004f30:	440b      	add	r3, r1
 8004f32:	3384      	adds	r3, #132	; 0x84
 8004f34:	4619      	mov	r1, r3
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	461a      	mov	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	01db      	lsls	r3, r3, #7
 8004f46:	4413      	add	r3, r2
 8004f48:	3384      	adds	r3, #132	; 0x84
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	6812      	ldr	r2, [r2, #0]
 8004f50:	4611      	mov	r1, r2
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	01d2      	lsls	r2, r2, #7
 8004f56:	440a      	add	r2, r1
 8004f58:	3284      	adds	r2, #132	; 0x84
 8004f5a:	f023 0307 	bic.w	r3, r3, #7
 8004f5e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	461a      	mov	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	01db      	lsls	r3, r3, #7
 8004f6a:	4413      	add	r3, r2
 8004f6c:	3384      	adds	r3, #132	; 0x84
 8004f6e:	461a      	mov	r2, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004f7c:	021b      	lsls	r3, r3, #8
 8004f7e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004f86:	041b      	lsls	r3, r3, #16
 8004f88:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	061b      	lsls	r3, r3, #24
 8004f90:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	01db      	lsls	r3, r3, #7
 8004f9c:	4413      	add	r3, r2
 8004f9e:	3384      	adds	r3, #132	; 0x84
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	01db      	lsls	r3, r3, #7
 8004fac:	4413      	add	r3, r2
 8004fae:	3384      	adds	r3, #132	; 0x84
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	01db      	lsls	r3, r3, #7
 8004fd0:	440b      	add	r3, r1
 8004fd2:	3384      	adds	r3, #132	; 0x84
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	01db      	lsls	r3, r3, #7
 8004fe6:	4413      	add	r3, r2
 8004fe8:	3384      	adds	r3, #132	; 0x84
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	6812      	ldr	r2, [r2, #0]
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	01d2      	lsls	r2, r2, #7
 8004ff6:	440a      	add	r2, r1
 8004ff8:	3284      	adds	r2, #132	; 0x84
 8004ffa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ffe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	461a      	mov	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	01db      	lsls	r3, r3, #7
 800500a:	4413      	add	r3, r2
 800500c:	3384      	adds	r3, #132	; 0x84
 800500e:	461a      	mov	r2, r3
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	01db      	lsls	r3, r3, #7
 8005020:	4413      	add	r3, r2
 8005022:	3384      	adds	r3, #132	; 0x84
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	6812      	ldr	r2, [r2, #0]
 800502a:	4611      	mov	r1, r2
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	01d2      	lsls	r2, r2, #7
 8005030:	440a      	add	r2, r1
 8005032:	3284      	adds	r2, #132	; 0x84
 8005034:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005038:	f023 0307 	bic.w	r3, r3, #7
 800503c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	69da      	ldr	r2, [r3, #28]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	68f9      	ldr	r1, [r7, #12]
 8005048:	6809      	ldr	r1, [r1, #0]
 800504a:	4608      	mov	r0, r1
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	01c9      	lsls	r1, r1, #7
 8005050:	4401      	add	r1, r0
 8005052:	3184      	adds	r1, #132	; 0x84
 8005054:	4313      	orrs	r3, r2
 8005056:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	461a      	mov	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	01db      	lsls	r3, r3, #7
 8005062:	4413      	add	r3, r2
 8005064:	3384      	adds	r3, #132	; 0x84
 8005066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	01db      	lsls	r3, r3, #7
 8005072:	4413      	add	r3, r2
 8005074:	3384      	adds	r3, #132	; 0x84
 8005076:	461a      	mov	r2, r3
 8005078:	2300      	movs	r3, #0
 800507a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	461a      	mov	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	01db      	lsls	r3, r3, #7
 8005086:	4413      	add	r3, r2
 8005088:	3384      	adds	r3, #132	; 0x84
 800508a:	461a      	mov	r2, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800509a:	2304      	movs	r3, #4
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	e01b      	b.n	80050d8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d102      	bne.n	80050ae <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80050a8:	2303      	movs	r3, #3
 80050aa:	61fb      	str	r3, [r7, #28]
 80050ac:	e014      	b.n	80050d8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d00b      	beq.n	80050ce <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d007      	beq.n	80050ce <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d003      	beq.n	80050ce <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80050ca:	2b07      	cmp	r3, #7
 80050cc:	d102      	bne.n	80050d4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80050ce:	2302      	movs	r3, #2
 80050d0:	61fb      	str	r3, [r7, #28]
 80050d2:	e001      	b.n	80050d8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80050d4:	2301      	movs	r3, #1
 80050d6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	01db      	lsls	r3, r3, #7
 80050e2:	4413      	add	r3, r2
 80050e4:	3384      	adds	r3, #132	; 0x84
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	4611      	mov	r1, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	01d2      	lsls	r2, r2, #7
 80050f2:	440a      	add	r2, r1
 80050f4:	3284      	adds	r2, #132	; 0x84
 80050f6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80050fa:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005100:	69fa      	ldr	r2, [r7, #28]
 8005102:	fb02 f303 	mul.w	r3, r2, r3
 8005106:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	6859      	ldr	r1, [r3, #4]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	1acb      	subs	r3, r1, r3
 8005112:	69f9      	ldr	r1, [r7, #28]
 8005114:	fb01 f303 	mul.w	r3, r1, r3
 8005118:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800511a:	68f9      	ldr	r1, [r7, #12]
 800511c:	6809      	ldr	r1, [r1, #0]
 800511e:	4608      	mov	r0, r1
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	01c9      	lsls	r1, r1, #7
 8005124:	4401      	add	r1, r0
 8005126:	3184      	adds	r1, #132	; 0x84
 8005128:	4313      	orrs	r3, r2
 800512a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	461a      	mov	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	01db      	lsls	r3, r3, #7
 8005136:	4413      	add	r3, r2
 8005138:	3384      	adds	r3, #132	; 0x84
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	6812      	ldr	r2, [r2, #0]
 8005140:	4611      	mov	r1, r2
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	01d2      	lsls	r2, r2, #7
 8005146:	440a      	add	r2, r1
 8005148:	3284      	adds	r2, #132	; 0x84
 800514a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800514e:	f023 0307 	bic.w	r3, r3, #7
 8005152:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	461a      	mov	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	01db      	lsls	r3, r3, #7
 800515e:	4413      	add	r3, r2
 8005160:	3384      	adds	r3, #132	; 0x84
 8005162:	461a      	mov	r2, r3
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005168:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	01db      	lsls	r3, r3, #7
 8005174:	4413      	add	r3, r2
 8005176:	3384      	adds	r3, #132	; 0x84
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	4611      	mov	r1, r2
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	01d2      	lsls	r2, r2, #7
 8005184:	440a      	add	r2, r1
 8005186:	3284      	adds	r2, #132	; 0x84
 8005188:	f043 0301 	orr.w	r3, r3, #1
 800518c:	6013      	str	r3, [r2, #0]
}
 800518e:	bf00      	nop
 8005190:	3724      	adds	r7, #36	; 0x24
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
	...

0800519c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e267      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d075      	beq.n	80052a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051ba:	4b88      	ldr	r3, [pc, #544]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 030c 	and.w	r3, r3, #12
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d00c      	beq.n	80051e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051c6:	4b85      	ldr	r3, [pc, #532]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d112      	bne.n	80051f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051d2:	4b82      	ldr	r3, [pc, #520]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051de:	d10b      	bne.n	80051f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e0:	4b7e      	ldr	r3, [pc, #504]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d05b      	beq.n	80052a4 <HAL_RCC_OscConfig+0x108>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d157      	bne.n	80052a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e242      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005200:	d106      	bne.n	8005210 <HAL_RCC_OscConfig+0x74>
 8005202:	4b76      	ldr	r3, [pc, #472]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a75      	ldr	r2, [pc, #468]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	e01d      	b.n	800524c <HAL_RCC_OscConfig+0xb0>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005218:	d10c      	bne.n	8005234 <HAL_RCC_OscConfig+0x98>
 800521a:	4b70      	ldr	r3, [pc, #448]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a6f      	ldr	r2, [pc, #444]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	4b6d      	ldr	r3, [pc, #436]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a6c      	ldr	r2, [pc, #432]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 800522c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	e00b      	b.n	800524c <HAL_RCC_OscConfig+0xb0>
 8005234:	4b69      	ldr	r3, [pc, #420]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a68      	ldr	r2, [pc, #416]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 800523a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	4b66      	ldr	r3, [pc, #408]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a65      	ldr	r2, [pc, #404]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800524a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d013      	beq.n	800527c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005254:	f7fd f990 	bl	8002578 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800525c:	f7fd f98c 	bl	8002578 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b64      	cmp	r3, #100	; 0x64
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e207      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800526e:	4b5b      	ldr	r3, [pc, #364]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0f0      	beq.n	800525c <HAL_RCC_OscConfig+0xc0>
 800527a:	e014      	b.n	80052a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527c:	f7fd f97c 	bl	8002578 <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005284:	f7fd f978 	bl	8002578 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b64      	cmp	r3, #100	; 0x64
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e1f3      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005296:	4b51      	ldr	r3, [pc, #324]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f0      	bne.n	8005284 <HAL_RCC_OscConfig+0xe8>
 80052a2:	e000      	b.n	80052a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d063      	beq.n	800537a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052b2:	4b4a      	ldr	r3, [pc, #296]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 030c 	and.w	r3, r3, #12
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00b      	beq.n	80052d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052be:	4b47      	ldr	r3, [pc, #284]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052c6:	2b08      	cmp	r3, #8
 80052c8:	d11c      	bne.n	8005304 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ca:	4b44      	ldr	r3, [pc, #272]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d116      	bne.n	8005304 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052d6:	4b41      	ldr	r3, [pc, #260]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d005      	beq.n	80052ee <HAL_RCC_OscConfig+0x152>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d001      	beq.n	80052ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e1c7      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ee:	4b3b      	ldr	r3, [pc, #236]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	4937      	ldr	r1, [pc, #220]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005302:	e03a      	b.n	800537a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d020      	beq.n	800534e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800530c:	4b34      	ldr	r3, [pc, #208]	; (80053e0 <HAL_RCC_OscConfig+0x244>)
 800530e:	2201      	movs	r2, #1
 8005310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005312:	f7fd f931 	bl	8002578 <HAL_GetTick>
 8005316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005318:	e008      	b.n	800532c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800531a:	f7fd f92d 	bl	8002578 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e1a8      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800532c:	4b2b      	ldr	r3, [pc, #172]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0f0      	beq.n	800531a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005338:	4b28      	ldr	r3, [pc, #160]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	4925      	ldr	r1, [pc, #148]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005348:	4313      	orrs	r3, r2
 800534a:	600b      	str	r3, [r1, #0]
 800534c:	e015      	b.n	800537a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800534e:	4b24      	ldr	r3, [pc, #144]	; (80053e0 <HAL_RCC_OscConfig+0x244>)
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005354:	f7fd f910 	bl	8002578 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800535c:	f7fd f90c 	bl	8002578 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e187      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800536e:	4b1b      	ldr	r3, [pc, #108]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f0      	bne.n	800535c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	2b00      	cmp	r3, #0
 8005384:	d036      	beq.n	80053f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d016      	beq.n	80053bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800538e:	4b15      	ldr	r3, [pc, #84]	; (80053e4 <HAL_RCC_OscConfig+0x248>)
 8005390:	2201      	movs	r2, #1
 8005392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005394:	f7fd f8f0 	bl	8002578 <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800539c:	f7fd f8ec 	bl	8002578 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e167      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ae:	4b0b      	ldr	r3, [pc, #44]	; (80053dc <HAL_RCC_OscConfig+0x240>)
 80053b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0f0      	beq.n	800539c <HAL_RCC_OscConfig+0x200>
 80053ba:	e01b      	b.n	80053f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053bc:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <HAL_RCC_OscConfig+0x248>)
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053c2:	f7fd f8d9 	bl	8002578 <HAL_GetTick>
 80053c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053c8:	e00e      	b.n	80053e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053ca:	f7fd f8d5 	bl	8002578 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d907      	bls.n	80053e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e150      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
 80053dc:	40023800 	.word	0x40023800
 80053e0:	42470000 	.word	0x42470000
 80053e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053e8:	4b88      	ldr	r3, [pc, #544]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80053ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1ea      	bne.n	80053ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 8097 	beq.w	8005530 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005402:	2300      	movs	r3, #0
 8005404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005406:	4b81      	ldr	r3, [pc, #516]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10f      	bne.n	8005432 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005412:	2300      	movs	r3, #0
 8005414:	60bb      	str	r3, [r7, #8]
 8005416:	4b7d      	ldr	r3, [pc, #500]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	4a7c      	ldr	r2, [pc, #496]	; (800560c <HAL_RCC_OscConfig+0x470>)
 800541c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005420:	6413      	str	r3, [r2, #64]	; 0x40
 8005422:	4b7a      	ldr	r3, [pc, #488]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800542a:	60bb      	str	r3, [r7, #8]
 800542c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800542e:	2301      	movs	r3, #1
 8005430:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005432:	4b77      	ldr	r3, [pc, #476]	; (8005610 <HAL_RCC_OscConfig+0x474>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543a:	2b00      	cmp	r3, #0
 800543c:	d118      	bne.n	8005470 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800543e:	4b74      	ldr	r3, [pc, #464]	; (8005610 <HAL_RCC_OscConfig+0x474>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a73      	ldr	r2, [pc, #460]	; (8005610 <HAL_RCC_OscConfig+0x474>)
 8005444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800544a:	f7fd f895 	bl	8002578 <HAL_GetTick>
 800544e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005452:	f7fd f891 	bl	8002578 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e10c      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005464:	4b6a      	ldr	r3, [pc, #424]	; (8005610 <HAL_RCC_OscConfig+0x474>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0f0      	beq.n	8005452 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d106      	bne.n	8005486 <HAL_RCC_OscConfig+0x2ea>
 8005478:	4b64      	ldr	r3, [pc, #400]	; (800560c <HAL_RCC_OscConfig+0x470>)
 800547a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547c:	4a63      	ldr	r2, [pc, #396]	; (800560c <HAL_RCC_OscConfig+0x470>)
 800547e:	f043 0301 	orr.w	r3, r3, #1
 8005482:	6713      	str	r3, [r2, #112]	; 0x70
 8005484:	e01c      	b.n	80054c0 <HAL_RCC_OscConfig+0x324>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	2b05      	cmp	r3, #5
 800548c:	d10c      	bne.n	80054a8 <HAL_RCC_OscConfig+0x30c>
 800548e:	4b5f      	ldr	r3, [pc, #380]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005492:	4a5e      	ldr	r2, [pc, #376]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005494:	f043 0304 	orr.w	r3, r3, #4
 8005498:	6713      	str	r3, [r2, #112]	; 0x70
 800549a:	4b5c      	ldr	r3, [pc, #368]	; (800560c <HAL_RCC_OscConfig+0x470>)
 800549c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549e:	4a5b      	ldr	r2, [pc, #364]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80054a0:	f043 0301 	orr.w	r3, r3, #1
 80054a4:	6713      	str	r3, [r2, #112]	; 0x70
 80054a6:	e00b      	b.n	80054c0 <HAL_RCC_OscConfig+0x324>
 80054a8:	4b58      	ldr	r3, [pc, #352]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80054aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ac:	4a57      	ldr	r2, [pc, #348]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80054ae:	f023 0301 	bic.w	r3, r3, #1
 80054b2:	6713      	str	r3, [r2, #112]	; 0x70
 80054b4:	4b55      	ldr	r3, [pc, #340]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80054b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b8:	4a54      	ldr	r2, [pc, #336]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80054ba:	f023 0304 	bic.w	r3, r3, #4
 80054be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d015      	beq.n	80054f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c8:	f7fd f856 	bl	8002578 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ce:	e00a      	b.n	80054e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054d0:	f7fd f852 	bl	8002578 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	f241 3288 	movw	r2, #5000	; 0x1388
 80054de:	4293      	cmp	r3, r2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e0cb      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e6:	4b49      	ldr	r3, [pc, #292]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80054e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0ee      	beq.n	80054d0 <HAL_RCC_OscConfig+0x334>
 80054f2:	e014      	b.n	800551e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054f4:	f7fd f840 	bl	8002578 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054fa:	e00a      	b.n	8005512 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054fc:	f7fd f83c 	bl	8002578 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	f241 3288 	movw	r2, #5000	; 0x1388
 800550a:	4293      	cmp	r3, r2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e0b5      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005512:	4b3e      	ldr	r3, [pc, #248]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1ee      	bne.n	80054fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800551e:	7dfb      	ldrb	r3, [r7, #23]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d105      	bne.n	8005530 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005524:	4b39      	ldr	r3, [pc, #228]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	4a38      	ldr	r2, [pc, #224]	; (800560c <HAL_RCC_OscConfig+0x470>)
 800552a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800552e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 80a1 	beq.w	800567c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800553a:	4b34      	ldr	r3, [pc, #208]	; (800560c <HAL_RCC_OscConfig+0x470>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 030c 	and.w	r3, r3, #12
 8005542:	2b08      	cmp	r3, #8
 8005544:	d05c      	beq.n	8005600 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d141      	bne.n	80055d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800554e:	4b31      	ldr	r3, [pc, #196]	; (8005614 <HAL_RCC_OscConfig+0x478>)
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005554:	f7fd f810 	bl	8002578 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800555c:	f7fd f80c 	bl	8002578 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e087      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800556e:	4b27      	ldr	r3, [pc, #156]	; (800560c <HAL_RCC_OscConfig+0x470>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1f0      	bne.n	800555c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69da      	ldr	r2, [r3, #28]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	019b      	lsls	r3, r3, #6
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	3b01      	subs	r3, #1
 8005594:	041b      	lsls	r3, r3, #16
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	061b      	lsls	r3, r3, #24
 800559e:	491b      	ldr	r1, [pc, #108]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055a4:	4b1b      	ldr	r3, [pc, #108]	; (8005614 <HAL_RCC_OscConfig+0x478>)
 80055a6:	2201      	movs	r2, #1
 80055a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055aa:	f7fc ffe5 	bl	8002578 <HAL_GetTick>
 80055ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055b0:	e008      	b.n	80055c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055b2:	f7fc ffe1 	bl	8002578 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e05c      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055c4:	4b11      	ldr	r3, [pc, #68]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0f0      	beq.n	80055b2 <HAL_RCC_OscConfig+0x416>
 80055d0:	e054      	b.n	800567c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055d2:	4b10      	ldr	r3, [pc, #64]	; (8005614 <HAL_RCC_OscConfig+0x478>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d8:	f7fc ffce 	bl	8002578 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055e0:	f7fc ffca 	bl	8002578 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e045      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055f2:	4b06      	ldr	r3, [pc, #24]	; (800560c <HAL_RCC_OscConfig+0x470>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1f0      	bne.n	80055e0 <HAL_RCC_OscConfig+0x444>
 80055fe:	e03d      	b.n	800567c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d107      	bne.n	8005618 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e038      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
 800560c:	40023800 	.word	0x40023800
 8005610:	40007000 	.word	0x40007000
 8005614:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005618:	4b1b      	ldr	r3, [pc, #108]	; (8005688 <HAL_RCC_OscConfig+0x4ec>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d028      	beq.n	8005678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005630:	429a      	cmp	r2, r3
 8005632:	d121      	bne.n	8005678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800563e:	429a      	cmp	r2, r3
 8005640:	d11a      	bne.n	8005678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005648:	4013      	ands	r3, r2
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800564e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005650:	4293      	cmp	r3, r2
 8005652:	d111      	bne.n	8005678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	085b      	lsrs	r3, r3, #1
 8005660:	3b01      	subs	r3, #1
 8005662:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005664:	429a      	cmp	r2, r3
 8005666:	d107      	bne.n	8005678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005672:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005674:	429a      	cmp	r2, r3
 8005676:	d001      	beq.n	800567c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e000      	b.n	800567e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	40023800 	.word	0x40023800

0800568c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e0cc      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056a0:	4b68      	ldr	r3, [pc, #416]	; (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 030f 	and.w	r3, r3, #15
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d90c      	bls.n	80056c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ae:	4b65      	ldr	r3, [pc, #404]	; (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b6:	4b63      	ldr	r3, [pc, #396]	; (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d001      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e0b8      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d020      	beq.n	8005716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056e0:	4b59      	ldr	r3, [pc, #356]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	4a58      	ldr	r2, [pc, #352]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80056e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056f8:	4b53      	ldr	r3, [pc, #332]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	4a52      	ldr	r2, [pc, #328]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80056fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005704:	4b50      	ldr	r3, [pc, #320]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	494d      	ldr	r1, [pc, #308]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	4313      	orrs	r3, r2
 8005714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d044      	beq.n	80057ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d107      	bne.n	800573a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572a:	4b47      	ldr	r3, [pc, #284]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d119      	bne.n	800576a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e07f      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d003      	beq.n	800574a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005746:	2b03      	cmp	r3, #3
 8005748:	d107      	bne.n	800575a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800574a:	4b3f      	ldr	r3, [pc, #252]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d109      	bne.n	800576a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e06f      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800575a:	4b3b      	ldr	r3, [pc, #236]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e067      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800576a:	4b37      	ldr	r3, [pc, #220]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f023 0203 	bic.w	r2, r3, #3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	4934      	ldr	r1, [pc, #208]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 8005778:	4313      	orrs	r3, r2
 800577a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800577c:	f7fc fefc 	bl	8002578 <HAL_GetTick>
 8005780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005782:	e00a      	b.n	800579a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005784:	f7fc fef8 	bl	8002578 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005792:	4293      	cmp	r3, r2
 8005794:	d901      	bls.n	800579a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e04f      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800579a:	4b2b      	ldr	r3, [pc, #172]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 020c 	and.w	r2, r3, #12
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d1eb      	bne.n	8005784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057ac:	4b25      	ldr	r3, [pc, #148]	; (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 030f 	and.w	r3, r3, #15
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d20c      	bcs.n	80057d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ba:	4b22      	ldr	r3, [pc, #136]	; (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c2:	4b20      	ldr	r3, [pc, #128]	; (8005844 <HAL_RCC_ClockConfig+0x1b8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 030f 	and.w	r3, r3, #15
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d001      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e032      	b.n	800583a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057e0:	4b19      	ldr	r3, [pc, #100]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	4916      	ldr	r1, [pc, #88]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d009      	beq.n	8005812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057fe:	4b12      	ldr	r3, [pc, #72]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	490e      	ldr	r1, [pc, #56]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800580e:	4313      	orrs	r3, r2
 8005810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005812:	f000 f821 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 8005816:	4602      	mov	r2, r0
 8005818:	4b0b      	ldr	r3, [pc, #44]	; (8005848 <HAL_RCC_ClockConfig+0x1bc>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	091b      	lsrs	r3, r3, #4
 800581e:	f003 030f 	and.w	r3, r3, #15
 8005822:	490a      	ldr	r1, [pc, #40]	; (800584c <HAL_RCC_ClockConfig+0x1c0>)
 8005824:	5ccb      	ldrb	r3, [r1, r3]
 8005826:	fa22 f303 	lsr.w	r3, r2, r3
 800582a:	4a09      	ldr	r2, [pc, #36]	; (8005850 <HAL_RCC_ClockConfig+0x1c4>)
 800582c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800582e:	4b09      	ldr	r3, [pc, #36]	; (8005854 <HAL_RCC_ClockConfig+0x1c8>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f7fc fc98 	bl	8002168 <HAL_InitTick>

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	40023c00 	.word	0x40023c00
 8005848:	40023800 	.word	0x40023800
 800584c:	0800fc5c 	.word	0x0800fc5c
 8005850:	20000500 	.word	0x20000500
 8005854:	20000504 	.word	0x20000504

08005858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800585c:	b094      	sub	sp, #80	; 0x50
 800585e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	647b      	str	r3, [r7, #68]	; 0x44
 8005864:	2300      	movs	r3, #0
 8005866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005868:	2300      	movs	r3, #0
 800586a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005870:	4b79      	ldr	r3, [pc, #484]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 030c 	and.w	r3, r3, #12
 8005878:	2b08      	cmp	r3, #8
 800587a:	d00d      	beq.n	8005898 <HAL_RCC_GetSysClockFreq+0x40>
 800587c:	2b08      	cmp	r3, #8
 800587e:	f200 80e1 	bhi.w	8005a44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <HAL_RCC_GetSysClockFreq+0x34>
 8005886:	2b04      	cmp	r3, #4
 8005888:	d003      	beq.n	8005892 <HAL_RCC_GetSysClockFreq+0x3a>
 800588a:	e0db      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800588c:	4b73      	ldr	r3, [pc, #460]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x204>)
 800588e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005890:	e0db      	b.n	8005a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005892:	4b73      	ldr	r3, [pc, #460]	; (8005a60 <HAL_RCC_GetSysClockFreq+0x208>)
 8005894:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005896:	e0d8      	b.n	8005a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005898:	4b6f      	ldr	r3, [pc, #444]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x200>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058a2:	4b6d      	ldr	r3, [pc, #436]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d063      	beq.n	8005976 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058ae:	4b6a      	ldr	r3, [pc, #424]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	099b      	lsrs	r3, r3, #6
 80058b4:	2200      	movs	r2, #0
 80058b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80058b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80058ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c0:	633b      	str	r3, [r7, #48]	; 0x30
 80058c2:	2300      	movs	r3, #0
 80058c4:	637b      	str	r3, [r7, #52]	; 0x34
 80058c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80058ca:	4622      	mov	r2, r4
 80058cc:	462b      	mov	r3, r5
 80058ce:	f04f 0000 	mov.w	r0, #0
 80058d2:	f04f 0100 	mov.w	r1, #0
 80058d6:	0159      	lsls	r1, r3, #5
 80058d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058dc:	0150      	lsls	r0, r2, #5
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	4621      	mov	r1, r4
 80058e4:	1a51      	subs	r1, r2, r1
 80058e6:	6139      	str	r1, [r7, #16]
 80058e8:	4629      	mov	r1, r5
 80058ea:	eb63 0301 	sbc.w	r3, r3, r1
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	f04f 0200 	mov.w	r2, #0
 80058f4:	f04f 0300 	mov.w	r3, #0
 80058f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058fc:	4659      	mov	r1, fp
 80058fe:	018b      	lsls	r3, r1, #6
 8005900:	4651      	mov	r1, sl
 8005902:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005906:	4651      	mov	r1, sl
 8005908:	018a      	lsls	r2, r1, #6
 800590a:	4651      	mov	r1, sl
 800590c:	ebb2 0801 	subs.w	r8, r2, r1
 8005910:	4659      	mov	r1, fp
 8005912:	eb63 0901 	sbc.w	r9, r3, r1
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	f04f 0300 	mov.w	r3, #0
 800591e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800592a:	4690      	mov	r8, r2
 800592c:	4699      	mov	r9, r3
 800592e:	4623      	mov	r3, r4
 8005930:	eb18 0303 	adds.w	r3, r8, r3
 8005934:	60bb      	str	r3, [r7, #8]
 8005936:	462b      	mov	r3, r5
 8005938:	eb49 0303 	adc.w	r3, r9, r3
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	f04f 0300 	mov.w	r3, #0
 8005946:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800594a:	4629      	mov	r1, r5
 800594c:	024b      	lsls	r3, r1, #9
 800594e:	4621      	mov	r1, r4
 8005950:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005954:	4621      	mov	r1, r4
 8005956:	024a      	lsls	r2, r1, #9
 8005958:	4610      	mov	r0, r2
 800595a:	4619      	mov	r1, r3
 800595c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800595e:	2200      	movs	r2, #0
 8005960:	62bb      	str	r3, [r7, #40]	; 0x28
 8005962:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005964:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005968:	f7fb f99e 	bl	8000ca8 <__aeabi_uldivmod>
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	4613      	mov	r3, r2
 8005972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005974:	e058      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005976:	4b38      	ldr	r3, [pc, #224]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	099b      	lsrs	r3, r3, #6
 800597c:	2200      	movs	r2, #0
 800597e:	4618      	mov	r0, r3
 8005980:	4611      	mov	r1, r2
 8005982:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005986:	623b      	str	r3, [r7, #32]
 8005988:	2300      	movs	r3, #0
 800598a:	627b      	str	r3, [r7, #36]	; 0x24
 800598c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005990:	4642      	mov	r2, r8
 8005992:	464b      	mov	r3, r9
 8005994:	f04f 0000 	mov.w	r0, #0
 8005998:	f04f 0100 	mov.w	r1, #0
 800599c:	0159      	lsls	r1, r3, #5
 800599e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059a2:	0150      	lsls	r0, r2, #5
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	4641      	mov	r1, r8
 80059aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80059ae:	4649      	mov	r1, r9
 80059b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80059c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80059c8:	ebb2 040a 	subs.w	r4, r2, sl
 80059cc:	eb63 050b 	sbc.w	r5, r3, fp
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	00eb      	lsls	r3, r5, #3
 80059da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059de:	00e2      	lsls	r2, r4, #3
 80059e0:	4614      	mov	r4, r2
 80059e2:	461d      	mov	r5, r3
 80059e4:	4643      	mov	r3, r8
 80059e6:	18e3      	adds	r3, r4, r3
 80059e8:	603b      	str	r3, [r7, #0]
 80059ea:	464b      	mov	r3, r9
 80059ec:	eb45 0303 	adc.w	r3, r5, r3
 80059f0:	607b      	str	r3, [r7, #4]
 80059f2:	f04f 0200 	mov.w	r2, #0
 80059f6:	f04f 0300 	mov.w	r3, #0
 80059fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059fe:	4629      	mov	r1, r5
 8005a00:	028b      	lsls	r3, r1, #10
 8005a02:	4621      	mov	r1, r4
 8005a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a08:	4621      	mov	r1, r4
 8005a0a:	028a      	lsls	r2, r1, #10
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4619      	mov	r1, r3
 8005a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a12:	2200      	movs	r2, #0
 8005a14:	61bb      	str	r3, [r7, #24]
 8005a16:	61fa      	str	r2, [r7, #28]
 8005a18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a1c:	f7fb f944 	bl	8000ca8 <__aeabi_uldivmod>
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4613      	mov	r3, r2
 8005a26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a28:	4b0b      	ldr	r3, [pc, #44]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	0c1b      	lsrs	r3, r3, #16
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	3301      	adds	r3, #1
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005a38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a42:	e002      	b.n	8005a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a44:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <HAL_RCC_GetSysClockFreq+0x204>)
 8005a46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3750      	adds	r7, #80	; 0x50
 8005a50:	46bd      	mov	sp, r7
 8005a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a56:	bf00      	nop
 8005a58:	40023800 	.word	0x40023800
 8005a5c:	00f42400 	.word	0x00f42400
 8005a60:	007a1200 	.word	0x007a1200

08005a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a68:	4b03      	ldr	r3, [pc, #12]	; (8005a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	20000500 	.word	0x20000500

08005a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a80:	f7ff fff0 	bl	8005a64 <HAL_RCC_GetHCLKFreq>
 8005a84:	4602      	mov	r2, r0
 8005a86:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	0a9b      	lsrs	r3, r3, #10
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	4903      	ldr	r1, [pc, #12]	; (8005aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a92:	5ccb      	ldrb	r3, [r1, r3]
 8005a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	0800fc6c 	.word	0x0800fc6c

08005aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005aa8:	f7ff ffdc 	bl	8005a64 <HAL_RCC_GetHCLKFreq>
 8005aac:	4602      	mov	r2, r0
 8005aae:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	0b5b      	lsrs	r3, r3, #13
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	4903      	ldr	r1, [pc, #12]	; (8005ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aba:	5ccb      	ldrb	r3, [r1, r3]
 8005abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40023800 	.word	0x40023800
 8005ac8:	0800fc6c 	.word	0x0800fc6c

08005acc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	220f      	movs	r2, #15
 8005ada:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005adc:	4b12      	ldr	r3, [pc, #72]	; (8005b28 <HAL_RCC_GetClockConfig+0x5c>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 0203 	and.w	r2, r3, #3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ae8:	4b0f      	ldr	r3, [pc, #60]	; (8005b28 <HAL_RCC_GetClockConfig+0x5c>)
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005af4:	4b0c      	ldr	r3, [pc, #48]	; (8005b28 <HAL_RCC_GetClockConfig+0x5c>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005b00:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <HAL_RCC_GetClockConfig+0x5c>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	08db      	lsrs	r3, r3, #3
 8005b06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b0e:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <HAL_RCC_GetClockConfig+0x60>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 020f 	and.w	r2, r3, #15
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	601a      	str	r2, [r3, #0]
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	40023c00 	.word	0x40023c00

08005b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10b      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d105      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d075      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b64:	4b91      	ldr	r3, [pc, #580]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b6a:	f7fc fd05 	bl	8002578 <HAL_GetTick>
 8005b6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b70:	e008      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b72:	f7fc fd01 	bl	8002578 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e189      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b84:	4b8a      	ldr	r3, [pc, #552]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1f0      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d009      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	019a      	lsls	r2, r3, #6
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	071b      	lsls	r3, r3, #28
 8005ba8:	4981      	ldr	r1, [pc, #516]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01f      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005bbc:	4b7c      	ldr	r3, [pc, #496]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bc2:	0f1b      	lsrs	r3, r3, #28
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	019a      	lsls	r2, r3, #6
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	061b      	lsls	r3, r3, #24
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	071b      	lsls	r3, r3, #28
 8005bdc:	4974      	ldr	r1, [pc, #464]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005be4:	4b72      	ldr	r3, [pc, #456]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bea:	f023 021f 	bic.w	r2, r3, #31
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	496e      	ldr	r1, [pc, #440]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00d      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	019a      	lsls	r2, r3, #6
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	061b      	lsls	r3, r3, #24
 8005c14:	431a      	orrs	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	071b      	lsls	r3, r3, #28
 8005c1c:	4964      	ldr	r1, [pc, #400]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c24:	4b61      	ldr	r3, [pc, #388]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005c26:	2201      	movs	r2, #1
 8005c28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c2a:	f7fc fca5 	bl	8002578 <HAL_GetTick>
 8005c2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c30:	e008      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c32:	f7fc fca1 	bl	8002578 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d901      	bls.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e129      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c44:	4b5a      	ldr	r3, [pc, #360]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0f0      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d105      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d079      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c68:	4b52      	ldr	r3, [pc, #328]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c6e:	f7fc fc83 	bl	8002578 <HAL_GetTick>
 8005c72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c74:	e008      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005c76:	f7fc fc7f 	bl	8002578 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d901      	bls.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e107      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c88:	4b49      	ldr	r3, [pc, #292]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c94:	d0ef      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0304 	and.w	r3, r3, #4
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d020      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ca2:	4b43      	ldr	r3, [pc, #268]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca8:	0f1b      	lsrs	r3, r3, #28
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	019a      	lsls	r2, r3, #6
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	061b      	lsls	r3, r3, #24
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	071b      	lsls	r3, r3, #28
 8005cc2:	493b      	ldr	r1, [pc, #236]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005cca:	4b39      	ldr	r3, [pc, #228]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cd0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	4934      	ldr	r1, [pc, #208]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0308 	and.w	r3, r3, #8
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01e      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005cf0:	4b2f      	ldr	r3, [pc, #188]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf6:	0e1b      	lsrs	r3, r3, #24
 8005cf8:	f003 030f 	and.w	r3, r3, #15
 8005cfc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	019a      	lsls	r2, r3, #6
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	061b      	lsls	r3, r3, #24
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	071b      	lsls	r3, r3, #28
 8005d10:	4927      	ldr	r1, [pc, #156]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d18:	4b25      	ldr	r3, [pc, #148]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	4922      	ldr	r1, [pc, #136]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d2e:	4b21      	ldr	r3, [pc, #132]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005d30:	2201      	movs	r2, #1
 8005d32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d34:	f7fc fc20 	bl	8002578 <HAL_GetTick>
 8005d38:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d3a:	e008      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005d3c:	f7fc fc1c 	bl	8002578 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e0a4      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d4e:	4b18      	ldr	r3, [pc, #96]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d5a:	d1ef      	bne.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0320 	and.w	r3, r3, #32
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 808b 	beq.w	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	4b10      	ldr	r3, [pc, #64]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	4a0f      	ldr	r2, [pc, #60]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d78:	6413      	str	r3, [r2, #64]	; 0x40
 8005d7a:	4b0d      	ldr	r3, [pc, #52]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d86:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a0b      	ldr	r2, [pc, #44]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d90:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d92:	f7fc fbf1 	bl	8002578 <HAL_GetTick>
 8005d96:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d98:	e010      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d9a:	f7fc fbed 	bl	8002578 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d909      	bls.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e075      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005dac:	42470068 	.word	0x42470068
 8005db0:	40023800 	.word	0x40023800
 8005db4:	42470070 	.word	0x42470070
 8005db8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005dbc:	4b38      	ldr	r3, [pc, #224]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d0e8      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005dc8:	4b36      	ldr	r3, [pc, #216]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d02f      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d028      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005de6:	4b2f      	ldr	r3, [pc, #188]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005df0:	4b2d      	ldr	r3, [pc, #180]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005df2:	2201      	movs	r2, #1
 8005df4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005df6:	4b2c      	ldr	r3, [pc, #176]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005dfc:	4a29      	ldr	r2, [pc, #164]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e02:	4b28      	ldr	r3, [pc, #160]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d114      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e0e:	f7fc fbb3 	bl	8002578 <HAL_GetTick>
 8005e12:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e14:	e00a      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e16:	f7fc fbaf 	bl	8002578 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d901      	bls.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e035      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e2c:	4b1d      	ldr	r3, [pc, #116]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d0ee      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e44:	d10d      	bne.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005e46:	4b17      	ldr	r3, [pc, #92]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e52:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e5a:	4912      	ldr	r1, [pc, #72]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	608b      	str	r3, [r1, #8]
 8005e60:	e005      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005e62:	4b10      	ldr	r3, [pc, #64]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	4a0f      	ldr	r2, [pc, #60]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e68:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e6c:	6093      	str	r3, [r2, #8]
 8005e6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e7a:	490a      	ldr	r1, [pc, #40]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0310 	and.w	r3, r3, #16
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d004      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005e92:	4b06      	ldr	r3, [pc, #24]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005e94:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	40007000 	.word	0x40007000
 8005ea4:	40023800 	.word	0x40023800
 8005ea8:	42470e40 	.word	0x42470e40
 8005eac:	424711e0 	.word	0x424711e0

08005eb0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e025      	b.n	8005f10 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d106      	bne.n	8005ede <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7fc f93b 	bl	8002154 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3304      	adds	r3, #4
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	f001 f8dd 	bl	80070b0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6818      	ldr	r0, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	461a      	mov	r2, r3
 8005f00:	6839      	ldr	r1, [r7, #0]
 8005f02:	f001 f932 	bl	800716a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e07b      	b.n	8006022 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d108      	bne.n	8005f44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f3a:	d009      	beq.n	8005f50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	61da      	str	r2, [r3, #28]
 8005f42:	e005      	b.n	8005f50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d106      	bne.n	8005f70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7fb ff56 	bl	8001e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	431a      	orrs	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd4:	ea42 0103 	orr.w	r1, r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fdc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	0c1b      	lsrs	r3, r3, #16
 8005fee:	f003 0104 	and.w	r1, r3, #4
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	f003 0210 	and.w	r2, r3, #16
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69da      	ldr	r2, [r3, #28]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006010:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b082      	sub	sp, #8
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e041      	b.n	80060c0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d106      	bne.n	8006056 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7fb ff2b 	bl	8001eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2202      	movs	r2, #2
 800605a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3304      	adds	r3, #4
 8006066:	4619      	mov	r1, r3
 8006068:	4610      	mov	r0, r2
 800606a:	f000 fa95 	bl	8006598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d001      	beq.n	80060e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e04e      	b.n	800617e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0201 	orr.w	r2, r2, #1
 80060f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a23      	ldr	r2, [pc, #140]	; (800618c <HAL_TIM_Base_Start_IT+0xc4>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d022      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x80>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610a:	d01d      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x80>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a1f      	ldr	r2, [pc, #124]	; (8006190 <HAL_TIM_Base_Start_IT+0xc8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d018      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x80>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1e      	ldr	r2, [pc, #120]	; (8006194 <HAL_TIM_Base_Start_IT+0xcc>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d013      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x80>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a1c      	ldr	r2, [pc, #112]	; (8006198 <HAL_TIM_Base_Start_IT+0xd0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d00e      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x80>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a1b      	ldr	r2, [pc, #108]	; (800619c <HAL_TIM_Base_Start_IT+0xd4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d009      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x80>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a19      	ldr	r2, [pc, #100]	; (80061a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d004      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x80>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a18      	ldr	r2, [pc, #96]	; (80061a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d111      	bne.n	800616c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f003 0307 	and.w	r3, r3, #7
 8006152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b06      	cmp	r3, #6
 8006158:	d010      	beq.n	800617c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f042 0201 	orr.w	r2, r2, #1
 8006168:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616a:	e007      	b.n	800617c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0201 	orr.w	r2, r2, #1
 800617a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40010000 	.word	0x40010000
 8006190:	40000400 	.word	0x40000400
 8006194:	40000800 	.word	0x40000800
 8006198:	40000c00 	.word	0x40000c00
 800619c:	40010400 	.word	0x40010400
 80061a0:	40014000 	.word	0x40014000
 80061a4:	40001800 	.word	0x40001800

080061a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d122      	bne.n	8006204 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d11b      	bne.n	8006204 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f06f 0202 	mvn.w	r2, #2
 80061d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f9b5 	bl	800655a <HAL_TIM_IC_CaptureCallback>
 80061f0:	e005      	b.n	80061fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f9a7 	bl	8006546 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f9b8 	bl	800656e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	2b04      	cmp	r3, #4
 8006210:	d122      	bne.n	8006258 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b04      	cmp	r3, #4
 800621e:	d11b      	bne.n	8006258 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0204 	mvn.w	r2, #4
 8006228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2202      	movs	r2, #2
 800622e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f98b 	bl	800655a <HAL_TIM_IC_CaptureCallback>
 8006244:	e005      	b.n	8006252 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f97d 	bl	8006546 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f98e 	bl	800656e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f003 0308 	and.w	r3, r3, #8
 8006262:	2b08      	cmp	r3, #8
 8006264:	d122      	bne.n	80062ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f003 0308 	and.w	r3, r3, #8
 8006270:	2b08      	cmp	r3, #8
 8006272:	d11b      	bne.n	80062ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f06f 0208 	mvn.w	r2, #8
 800627c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2204      	movs	r2, #4
 8006282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	f003 0303 	and.w	r3, r3, #3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f961 	bl	800655a <HAL_TIM_IC_CaptureCallback>
 8006298:	e005      	b.n	80062a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f953 	bl	8006546 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f964 	bl	800656e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f003 0310 	and.w	r3, r3, #16
 80062b6:	2b10      	cmp	r3, #16
 80062b8:	d122      	bne.n	8006300 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0310 	and.w	r3, r3, #16
 80062c4:	2b10      	cmp	r3, #16
 80062c6:	d11b      	bne.n	8006300 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0210 	mvn.w	r2, #16
 80062d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2208      	movs	r2, #8
 80062d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f937 	bl	800655a <HAL_TIM_IC_CaptureCallback>
 80062ec:	e005      	b.n	80062fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f929 	bl	8006546 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f93a 	bl	800656e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b01      	cmp	r3, #1
 800630c:	d10e      	bne.n	800632c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b01      	cmp	r3, #1
 800631a:	d107      	bne.n	800632c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f06f 0201 	mvn.w	r2, #1
 8006324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7fb fb54 	bl	80019d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006336:	2b80      	cmp	r3, #128	; 0x80
 8006338:	d10e      	bne.n	8006358 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006344:	2b80      	cmp	r3, #128	; 0x80
 8006346:	d107      	bne.n	8006358 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fae0 	bl	8006918 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006362:	2b40      	cmp	r3, #64	; 0x40
 8006364:	d10e      	bne.n	8006384 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006370:	2b40      	cmp	r3, #64	; 0x40
 8006372:	d107      	bne.n	8006384 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800637c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f8ff 	bl	8006582 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	f003 0320 	and.w	r3, r3, #32
 800638e:	2b20      	cmp	r3, #32
 8006390:	d10e      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f003 0320 	and.w	r3, r3, #32
 800639c:	2b20      	cmp	r3, #32
 800639e:	d107      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f06f 0220 	mvn.w	r2, #32
 80063a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 faaa 	bl	8006904 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063b0:	bf00      	nop
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_TIM_ConfigClockSource+0x1c>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e0b4      	b.n	800653e <HAL_TIM_ConfigClockSource+0x186>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800640c:	d03e      	beq.n	800648c <HAL_TIM_ConfigClockSource+0xd4>
 800640e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006412:	f200 8087 	bhi.w	8006524 <HAL_TIM_ConfigClockSource+0x16c>
 8006416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800641a:	f000 8086 	beq.w	800652a <HAL_TIM_ConfigClockSource+0x172>
 800641e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006422:	d87f      	bhi.n	8006524 <HAL_TIM_ConfigClockSource+0x16c>
 8006424:	2b70      	cmp	r3, #112	; 0x70
 8006426:	d01a      	beq.n	800645e <HAL_TIM_ConfigClockSource+0xa6>
 8006428:	2b70      	cmp	r3, #112	; 0x70
 800642a:	d87b      	bhi.n	8006524 <HAL_TIM_ConfigClockSource+0x16c>
 800642c:	2b60      	cmp	r3, #96	; 0x60
 800642e:	d050      	beq.n	80064d2 <HAL_TIM_ConfigClockSource+0x11a>
 8006430:	2b60      	cmp	r3, #96	; 0x60
 8006432:	d877      	bhi.n	8006524 <HAL_TIM_ConfigClockSource+0x16c>
 8006434:	2b50      	cmp	r3, #80	; 0x50
 8006436:	d03c      	beq.n	80064b2 <HAL_TIM_ConfigClockSource+0xfa>
 8006438:	2b50      	cmp	r3, #80	; 0x50
 800643a:	d873      	bhi.n	8006524 <HAL_TIM_ConfigClockSource+0x16c>
 800643c:	2b40      	cmp	r3, #64	; 0x40
 800643e:	d058      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x13a>
 8006440:	2b40      	cmp	r3, #64	; 0x40
 8006442:	d86f      	bhi.n	8006524 <HAL_TIM_ConfigClockSource+0x16c>
 8006444:	2b30      	cmp	r3, #48	; 0x30
 8006446:	d064      	beq.n	8006512 <HAL_TIM_ConfigClockSource+0x15a>
 8006448:	2b30      	cmp	r3, #48	; 0x30
 800644a:	d86b      	bhi.n	8006524 <HAL_TIM_ConfigClockSource+0x16c>
 800644c:	2b20      	cmp	r3, #32
 800644e:	d060      	beq.n	8006512 <HAL_TIM_ConfigClockSource+0x15a>
 8006450:	2b20      	cmp	r3, #32
 8006452:	d867      	bhi.n	8006524 <HAL_TIM_ConfigClockSource+0x16c>
 8006454:	2b00      	cmp	r3, #0
 8006456:	d05c      	beq.n	8006512 <HAL_TIM_ConfigClockSource+0x15a>
 8006458:	2b10      	cmp	r3, #16
 800645a:	d05a      	beq.n	8006512 <HAL_TIM_ConfigClockSource+0x15a>
 800645c:	e062      	b.n	8006524 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	6899      	ldr	r1, [r3, #8]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f000 f9ad 	bl	80067cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006480:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	609a      	str	r2, [r3, #8]
      break;
 800648a:	e04f      	b.n	800652c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	6899      	ldr	r1, [r3, #8]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f000 f996 	bl	80067cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064ae:	609a      	str	r2, [r3, #8]
      break;
 80064b0:	e03c      	b.n	800652c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6818      	ldr	r0, [r3, #0]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	6859      	ldr	r1, [r3, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	461a      	mov	r2, r3
 80064c0:	f000 f90a 	bl	80066d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2150      	movs	r1, #80	; 0x50
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 f963 	bl	8006796 <TIM_ITRx_SetConfig>
      break;
 80064d0:	e02c      	b.n	800652c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6818      	ldr	r0, [r3, #0]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	6859      	ldr	r1, [r3, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	461a      	mov	r2, r3
 80064e0:	f000 f929 	bl	8006736 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2160      	movs	r1, #96	; 0x60
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 f953 	bl	8006796 <TIM_ITRx_SetConfig>
      break;
 80064f0:	e01c      	b.n	800652c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6818      	ldr	r0, [r3, #0]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	6859      	ldr	r1, [r3, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	461a      	mov	r2, r3
 8006500:	f000 f8ea 	bl	80066d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2140      	movs	r1, #64	; 0x40
 800650a:	4618      	mov	r0, r3
 800650c:	f000 f943 	bl	8006796 <TIM_ITRx_SetConfig>
      break;
 8006510:	e00c      	b.n	800652c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4619      	mov	r1, r3
 800651c:	4610      	mov	r0, r2
 800651e:	f000 f93a 	bl	8006796 <TIM_ITRx_SetConfig>
      break;
 8006522:	e003      	b.n	800652c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	73fb      	strb	r3, [r7, #15]
      break;
 8006528:	e000      	b.n	800652c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800652a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800653c:	7bfb      	ldrb	r3, [r7, #15]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006546:	b480      	push	{r7}
 8006548:	b083      	sub	sp, #12
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800654e:	bf00      	nop
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006562:	bf00      	nop
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800656e:	b480      	push	{r7}
 8006570:	b083      	sub	sp, #12
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006576:	bf00      	nop
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800658a:	bf00      	nop
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
	...

08006598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a40      	ldr	r2, [pc, #256]	; (80066ac <TIM_Base_SetConfig+0x114>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d013      	beq.n	80065d8 <TIM_Base_SetConfig+0x40>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b6:	d00f      	beq.n	80065d8 <TIM_Base_SetConfig+0x40>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a3d      	ldr	r2, [pc, #244]	; (80066b0 <TIM_Base_SetConfig+0x118>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d00b      	beq.n	80065d8 <TIM_Base_SetConfig+0x40>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a3c      	ldr	r2, [pc, #240]	; (80066b4 <TIM_Base_SetConfig+0x11c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d007      	beq.n	80065d8 <TIM_Base_SetConfig+0x40>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a3b      	ldr	r2, [pc, #236]	; (80066b8 <TIM_Base_SetConfig+0x120>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d003      	beq.n	80065d8 <TIM_Base_SetConfig+0x40>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a3a      	ldr	r2, [pc, #232]	; (80066bc <TIM_Base_SetConfig+0x124>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d108      	bne.n	80065ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a2f      	ldr	r2, [pc, #188]	; (80066ac <TIM_Base_SetConfig+0x114>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d02b      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f8:	d027      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a2c      	ldr	r2, [pc, #176]	; (80066b0 <TIM_Base_SetConfig+0x118>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d023      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a2b      	ldr	r2, [pc, #172]	; (80066b4 <TIM_Base_SetConfig+0x11c>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d01f      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a2a      	ldr	r2, [pc, #168]	; (80066b8 <TIM_Base_SetConfig+0x120>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d01b      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a29      	ldr	r2, [pc, #164]	; (80066bc <TIM_Base_SetConfig+0x124>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d017      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a28      	ldr	r2, [pc, #160]	; (80066c0 <TIM_Base_SetConfig+0x128>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d013      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a27      	ldr	r2, [pc, #156]	; (80066c4 <TIM_Base_SetConfig+0x12c>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00f      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a26      	ldr	r2, [pc, #152]	; (80066c8 <TIM_Base_SetConfig+0x130>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d00b      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a25      	ldr	r2, [pc, #148]	; (80066cc <TIM_Base_SetConfig+0x134>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d007      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a24      	ldr	r2, [pc, #144]	; (80066d0 <TIM_Base_SetConfig+0x138>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d003      	beq.n	800664a <TIM_Base_SetConfig+0xb2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a23      	ldr	r2, [pc, #140]	; (80066d4 <TIM_Base_SetConfig+0x13c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d108      	bne.n	800665c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	4313      	orrs	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a0a      	ldr	r2, [pc, #40]	; (80066ac <TIM_Base_SetConfig+0x114>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d003      	beq.n	8006690 <TIM_Base_SetConfig+0xf8>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a0c      	ldr	r2, [pc, #48]	; (80066bc <TIM_Base_SetConfig+0x124>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d103      	bne.n	8006698 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	691a      	ldr	r2, [r3, #16]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	615a      	str	r2, [r3, #20]
}
 800669e:	bf00      	nop
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	40010000 	.word	0x40010000
 80066b0:	40000400 	.word	0x40000400
 80066b4:	40000800 	.word	0x40000800
 80066b8:	40000c00 	.word	0x40000c00
 80066bc:	40010400 	.word	0x40010400
 80066c0:	40014000 	.word	0x40014000
 80066c4:	40014400 	.word	0x40014400
 80066c8:	40014800 	.word	0x40014800
 80066cc:	40001800 	.word	0x40001800
 80066d0:	40001c00 	.word	0x40001c00
 80066d4:	40002000 	.word	0x40002000

080066d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	f023 0201 	bic.w	r2, r3, #1
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006702:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	011b      	lsls	r3, r3, #4
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	4313      	orrs	r3, r2
 800670c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f023 030a 	bic.w	r3, r3, #10
 8006714:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	4313      	orrs	r3, r2
 800671c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	621a      	str	r2, [r3, #32]
}
 800672a:	bf00      	nop
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006736:	b480      	push	{r7}
 8006738:	b087      	sub	sp, #28
 800673a:	af00      	add	r7, sp, #0
 800673c:	60f8      	str	r0, [r7, #12]
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	f023 0210 	bic.w	r2, r3, #16
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006760:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	031b      	lsls	r3, r3, #12
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006772:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	011b      	lsls	r3, r3, #4
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	4313      	orrs	r3, r2
 800677c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	621a      	str	r2, [r3, #32]
}
 800678a:	bf00      	nop
 800678c:	371c      	adds	r7, #28
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006796:	b480      	push	{r7}
 8006798:	b085      	sub	sp, #20
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	f043 0307 	orr.w	r3, r3, #7
 80067b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	609a      	str	r2, [r3, #8]
}
 80067c0:	bf00      	nop
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
 80067d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	021a      	lsls	r2, r3, #8
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	431a      	orrs	r2, r3
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	609a      	str	r2, [r3, #8]
}
 8006800:	bf00      	nop
 8006802:	371c      	adds	r7, #28
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800681c:	2b01      	cmp	r3, #1
 800681e:	d101      	bne.n	8006824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006820:	2302      	movs	r3, #2
 8006822:	e05a      	b.n	80068da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a21      	ldr	r2, [pc, #132]	; (80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d022      	beq.n	80068ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006870:	d01d      	beq.n	80068ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a1d      	ldr	r2, [pc, #116]	; (80068ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d018      	beq.n	80068ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a1b      	ldr	r2, [pc, #108]	; (80068f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d013      	beq.n	80068ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a1a      	ldr	r2, [pc, #104]	; (80068f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00e      	beq.n	80068ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a18      	ldr	r2, [pc, #96]	; (80068f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d009      	beq.n	80068ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a17      	ldr	r2, [pc, #92]	; (80068fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d004      	beq.n	80068ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a15      	ldr	r2, [pc, #84]	; (8006900 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d10c      	bne.n	80068c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	4313      	orrs	r3, r2
 80068be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	40010000 	.word	0x40010000
 80068ec:	40000400 	.word	0x40000400
 80068f0:	40000800 	.word	0x40000800
 80068f4:	40000c00 	.word	0x40000c00
 80068f8:	40010400 	.word	0x40010400
 80068fc:	40014000 	.word	0x40014000
 8006900:	40001800 	.word	0x40001800

08006904 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e03f      	b.n	80069be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d106      	bne.n	8006958 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7fb facc 	bl	8001ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2224      	movs	r2, #36	; 0x24
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800696e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f929 	bl	8006bc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	691a      	ldr	r2, [r3, #16]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006984:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695a      	ldr	r2, [r3, #20]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006994:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68da      	ldr	r2, [r3, #12]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b08a      	sub	sp, #40	; 0x28
 80069ca:	af02      	add	r7, sp, #8
 80069cc:	60f8      	str	r0, [r7, #12]
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	603b      	str	r3, [r7, #0]
 80069d2:	4613      	mov	r3, r2
 80069d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	d17c      	bne.n	8006ae0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d002      	beq.n	80069f2 <HAL_UART_Transmit+0x2c>
 80069ec:	88fb      	ldrh	r3, [r7, #6]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e075      	b.n	8006ae2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d101      	bne.n	8006a04 <HAL_UART_Transmit+0x3e>
 8006a00:	2302      	movs	r3, #2
 8006a02:	e06e      	b.n	8006ae2 <HAL_UART_Transmit+0x11c>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2221      	movs	r2, #33	; 0x21
 8006a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a1a:	f7fb fdad 	bl	8002578 <HAL_GetTick>
 8006a1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	88fa      	ldrh	r2, [r7, #6]
 8006a24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	88fa      	ldrh	r2, [r7, #6]
 8006a2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a34:	d108      	bne.n	8006a48 <HAL_UART_Transmit+0x82>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d104      	bne.n	8006a48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	61bb      	str	r3, [r7, #24]
 8006a46:	e003      	b.n	8006a50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006a58:	e02a      	b.n	8006ab0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	2200      	movs	r2, #0
 8006a62:	2180      	movs	r1, #128	; 0x80
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 f840 	bl	8006aea <UART_WaitOnFlagUntilTimeout>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e036      	b.n	8006ae2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10b      	bne.n	8006a92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	3302      	adds	r3, #2
 8006a8e:	61bb      	str	r3, [r7, #24]
 8006a90:	e007      	b.n	8006aa2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	781a      	ldrb	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1cf      	bne.n	8006a5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	2140      	movs	r1, #64	; 0x40
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 f810 	bl	8006aea <UART_WaitOnFlagUntilTimeout>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e006      	b.n	8006ae2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	e000      	b.n	8006ae2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006ae0:	2302      	movs	r3, #2
  }
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3720      	adds	r7, #32
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b090      	sub	sp, #64	; 0x40
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	60f8      	str	r0, [r7, #12]
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	603b      	str	r3, [r7, #0]
 8006af6:	4613      	mov	r3, r2
 8006af8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006afa:	e050      	b.n	8006b9e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b02:	d04c      	beq.n	8006b9e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d007      	beq.n	8006b1a <UART_WaitOnFlagUntilTimeout+0x30>
 8006b0a:	f7fb fd35 	bl	8002578 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d241      	bcs.n	8006b9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	330c      	adds	r3, #12
 8006b20:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b24:	e853 3f00 	ldrex	r3, [r3]
 8006b28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	330c      	adds	r3, #12
 8006b38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b3a:	637a      	str	r2, [r7, #52]	; 0x34
 8006b3c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b42:	e841 2300 	strex	r3, r2, [r1]
 8006b46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1e5      	bne.n	8006b1a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	3314      	adds	r3, #20
 8006b54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	e853 3f00 	ldrex	r3, [r3]
 8006b5c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f023 0301 	bic.w	r3, r3, #1
 8006b64:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3314      	adds	r3, #20
 8006b6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b6e:	623a      	str	r2, [r7, #32]
 8006b70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b72:	69f9      	ldr	r1, [r7, #28]
 8006b74:	6a3a      	ldr	r2, [r7, #32]
 8006b76:	e841 2300 	strex	r3, r2, [r1]
 8006b7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1e5      	bne.n	8006b4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2220      	movs	r2, #32
 8006b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e00f      	b.n	8006bbe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	bf0c      	ite	eq
 8006bae:	2301      	moveq	r3, #1
 8006bb0:	2300      	movne	r3, #0
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	79fb      	ldrb	r3, [r7, #7]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d09f      	beq.n	8006afc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3740      	adds	r7, #64	; 0x40
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bcc:	b0c0      	sub	sp, #256	; 0x100
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be4:	68d9      	ldr	r1, [r3, #12]
 8006be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	ea40 0301 	orr.w	r3, r0, r1
 8006bf0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c20:	f021 010c 	bic.w	r1, r1, #12
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c2e:	430b      	orrs	r3, r1
 8006c30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c42:	6999      	ldr	r1, [r3, #24]
 8006c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	ea40 0301 	orr.w	r3, r0, r1
 8006c4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	4b8f      	ldr	r3, [pc, #572]	; (8006e94 <UART_SetConfig+0x2cc>)
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d005      	beq.n	8006c68 <UART_SetConfig+0xa0>
 8006c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	4b8d      	ldr	r3, [pc, #564]	; (8006e98 <UART_SetConfig+0x2d0>)
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d104      	bne.n	8006c72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c68:	f7fe ff1c 	bl	8005aa4 <HAL_RCC_GetPCLK2Freq>
 8006c6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c70:	e003      	b.n	8006c7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c72:	f7fe ff03 	bl	8005a7c <HAL_RCC_GetPCLK1Freq>
 8006c76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c84:	f040 810c 	bne.w	8006ea0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006c9a:	4622      	mov	r2, r4
 8006c9c:	462b      	mov	r3, r5
 8006c9e:	1891      	adds	r1, r2, r2
 8006ca0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ca2:	415b      	adcs	r3, r3
 8006ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ca6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006caa:	4621      	mov	r1, r4
 8006cac:	eb12 0801 	adds.w	r8, r2, r1
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	eb43 0901 	adc.w	r9, r3, r1
 8006cb6:	f04f 0200 	mov.w	r2, #0
 8006cba:	f04f 0300 	mov.w	r3, #0
 8006cbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cca:	4690      	mov	r8, r2
 8006ccc:	4699      	mov	r9, r3
 8006cce:	4623      	mov	r3, r4
 8006cd0:	eb18 0303 	adds.w	r3, r8, r3
 8006cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cd8:	462b      	mov	r3, r5
 8006cda:	eb49 0303 	adc.w	r3, r9, r3
 8006cde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006cee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006cf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	18db      	adds	r3, r3, r3
 8006cfa:	653b      	str	r3, [r7, #80]	; 0x50
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	eb42 0303 	adc.w	r3, r2, r3
 8006d02:	657b      	str	r3, [r7, #84]	; 0x54
 8006d04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d0c:	f7f9 ffcc 	bl	8000ca8 <__aeabi_uldivmod>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4b61      	ldr	r3, [pc, #388]	; (8006e9c <UART_SetConfig+0x2d4>)
 8006d16:	fba3 2302 	umull	r2, r3, r3, r2
 8006d1a:	095b      	lsrs	r3, r3, #5
 8006d1c:	011c      	lsls	r4, r3, #4
 8006d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d22:	2200      	movs	r2, #0
 8006d24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d30:	4642      	mov	r2, r8
 8006d32:	464b      	mov	r3, r9
 8006d34:	1891      	adds	r1, r2, r2
 8006d36:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d38:	415b      	adcs	r3, r3
 8006d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d40:	4641      	mov	r1, r8
 8006d42:	eb12 0a01 	adds.w	sl, r2, r1
 8006d46:	4649      	mov	r1, r9
 8006d48:	eb43 0b01 	adc.w	fp, r3, r1
 8006d4c:	f04f 0200 	mov.w	r2, #0
 8006d50:	f04f 0300 	mov.w	r3, #0
 8006d54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d60:	4692      	mov	sl, r2
 8006d62:	469b      	mov	fp, r3
 8006d64:	4643      	mov	r3, r8
 8006d66:	eb1a 0303 	adds.w	r3, sl, r3
 8006d6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d6e:	464b      	mov	r3, r9
 8006d70:	eb4b 0303 	adc.w	r3, fp, r3
 8006d74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006d88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	18db      	adds	r3, r3, r3
 8006d90:	643b      	str	r3, [r7, #64]	; 0x40
 8006d92:	4613      	mov	r3, r2
 8006d94:	eb42 0303 	adc.w	r3, r2, r3
 8006d98:	647b      	str	r3, [r7, #68]	; 0x44
 8006d9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006da2:	f7f9 ff81 	bl	8000ca8 <__aeabi_uldivmod>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4611      	mov	r1, r2
 8006dac:	4b3b      	ldr	r3, [pc, #236]	; (8006e9c <UART_SetConfig+0x2d4>)
 8006dae:	fba3 2301 	umull	r2, r3, r3, r1
 8006db2:	095b      	lsrs	r3, r3, #5
 8006db4:	2264      	movs	r2, #100	; 0x64
 8006db6:	fb02 f303 	mul.w	r3, r2, r3
 8006dba:	1acb      	subs	r3, r1, r3
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006dc2:	4b36      	ldr	r3, [pc, #216]	; (8006e9c <UART_SetConfig+0x2d4>)
 8006dc4:	fba3 2302 	umull	r2, r3, r3, r2
 8006dc8:	095b      	lsrs	r3, r3, #5
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006dd0:	441c      	add	r4, r3
 8006dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ddc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006de0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006de4:	4642      	mov	r2, r8
 8006de6:	464b      	mov	r3, r9
 8006de8:	1891      	adds	r1, r2, r2
 8006dea:	63b9      	str	r1, [r7, #56]	; 0x38
 8006dec:	415b      	adcs	r3, r3
 8006dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006df4:	4641      	mov	r1, r8
 8006df6:	1851      	adds	r1, r2, r1
 8006df8:	6339      	str	r1, [r7, #48]	; 0x30
 8006dfa:	4649      	mov	r1, r9
 8006dfc:	414b      	adcs	r3, r1
 8006dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8006e00:	f04f 0200 	mov.w	r2, #0
 8006e04:	f04f 0300 	mov.w	r3, #0
 8006e08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e0c:	4659      	mov	r1, fp
 8006e0e:	00cb      	lsls	r3, r1, #3
 8006e10:	4651      	mov	r1, sl
 8006e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e16:	4651      	mov	r1, sl
 8006e18:	00ca      	lsls	r2, r1, #3
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4603      	mov	r3, r0
 8006e20:	4642      	mov	r2, r8
 8006e22:	189b      	adds	r3, r3, r2
 8006e24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e28:	464b      	mov	r3, r9
 8006e2a:	460a      	mov	r2, r1
 8006e2c:	eb42 0303 	adc.w	r3, r2, r3
 8006e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e48:	460b      	mov	r3, r1
 8006e4a:	18db      	adds	r3, r3, r3
 8006e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e4e:	4613      	mov	r3, r2
 8006e50:	eb42 0303 	adc.w	r3, r2, r3
 8006e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e5e:	f7f9 ff23 	bl	8000ca8 <__aeabi_uldivmod>
 8006e62:	4602      	mov	r2, r0
 8006e64:	460b      	mov	r3, r1
 8006e66:	4b0d      	ldr	r3, [pc, #52]	; (8006e9c <UART_SetConfig+0x2d4>)
 8006e68:	fba3 1302 	umull	r1, r3, r3, r2
 8006e6c:	095b      	lsrs	r3, r3, #5
 8006e6e:	2164      	movs	r1, #100	; 0x64
 8006e70:	fb01 f303 	mul.w	r3, r1, r3
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	00db      	lsls	r3, r3, #3
 8006e78:	3332      	adds	r3, #50	; 0x32
 8006e7a:	4a08      	ldr	r2, [pc, #32]	; (8006e9c <UART_SetConfig+0x2d4>)
 8006e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e80:	095b      	lsrs	r3, r3, #5
 8006e82:	f003 0207 	and.w	r2, r3, #7
 8006e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4422      	add	r2, r4
 8006e8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e90:	e105      	b.n	800709e <UART_SetConfig+0x4d6>
 8006e92:	bf00      	nop
 8006e94:	40011000 	.word	0x40011000
 8006e98:	40011400 	.word	0x40011400
 8006e9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006eaa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006eae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006eb2:	4642      	mov	r2, r8
 8006eb4:	464b      	mov	r3, r9
 8006eb6:	1891      	adds	r1, r2, r2
 8006eb8:	6239      	str	r1, [r7, #32]
 8006eba:	415b      	adcs	r3, r3
 8006ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8006ebe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ec2:	4641      	mov	r1, r8
 8006ec4:	1854      	adds	r4, r2, r1
 8006ec6:	4649      	mov	r1, r9
 8006ec8:	eb43 0501 	adc.w	r5, r3, r1
 8006ecc:	f04f 0200 	mov.w	r2, #0
 8006ed0:	f04f 0300 	mov.w	r3, #0
 8006ed4:	00eb      	lsls	r3, r5, #3
 8006ed6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006eda:	00e2      	lsls	r2, r4, #3
 8006edc:	4614      	mov	r4, r2
 8006ede:	461d      	mov	r5, r3
 8006ee0:	4643      	mov	r3, r8
 8006ee2:	18e3      	adds	r3, r4, r3
 8006ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ee8:	464b      	mov	r3, r9
 8006eea:	eb45 0303 	adc.w	r3, r5, r3
 8006eee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006efe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f02:	f04f 0200 	mov.w	r2, #0
 8006f06:	f04f 0300 	mov.w	r3, #0
 8006f0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f0e:	4629      	mov	r1, r5
 8006f10:	008b      	lsls	r3, r1, #2
 8006f12:	4621      	mov	r1, r4
 8006f14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f18:	4621      	mov	r1, r4
 8006f1a:	008a      	lsls	r2, r1, #2
 8006f1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f20:	f7f9 fec2 	bl	8000ca8 <__aeabi_uldivmod>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4b60      	ldr	r3, [pc, #384]	; (80070ac <UART_SetConfig+0x4e4>)
 8006f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f2e:	095b      	lsrs	r3, r3, #5
 8006f30:	011c      	lsls	r4, r3, #4
 8006f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f44:	4642      	mov	r2, r8
 8006f46:	464b      	mov	r3, r9
 8006f48:	1891      	adds	r1, r2, r2
 8006f4a:	61b9      	str	r1, [r7, #24]
 8006f4c:	415b      	adcs	r3, r3
 8006f4e:	61fb      	str	r3, [r7, #28]
 8006f50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f54:	4641      	mov	r1, r8
 8006f56:	1851      	adds	r1, r2, r1
 8006f58:	6139      	str	r1, [r7, #16]
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	414b      	adcs	r3, r1
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	f04f 0200 	mov.w	r2, #0
 8006f64:	f04f 0300 	mov.w	r3, #0
 8006f68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f6c:	4659      	mov	r1, fp
 8006f6e:	00cb      	lsls	r3, r1, #3
 8006f70:	4651      	mov	r1, sl
 8006f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f76:	4651      	mov	r1, sl
 8006f78:	00ca      	lsls	r2, r1, #3
 8006f7a:	4610      	mov	r0, r2
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4603      	mov	r3, r0
 8006f80:	4642      	mov	r2, r8
 8006f82:	189b      	adds	r3, r3, r2
 8006f84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f88:	464b      	mov	r3, r9
 8006f8a:	460a      	mov	r2, r1
 8006f8c:	eb42 0303 	adc.w	r3, r2, r3
 8006f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006fa0:	f04f 0200 	mov.w	r2, #0
 8006fa4:	f04f 0300 	mov.w	r3, #0
 8006fa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006fac:	4649      	mov	r1, r9
 8006fae:	008b      	lsls	r3, r1, #2
 8006fb0:	4641      	mov	r1, r8
 8006fb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fb6:	4641      	mov	r1, r8
 8006fb8:	008a      	lsls	r2, r1, #2
 8006fba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006fbe:	f7f9 fe73 	bl	8000ca8 <__aeabi_uldivmod>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4b39      	ldr	r3, [pc, #228]	; (80070ac <UART_SetConfig+0x4e4>)
 8006fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8006fcc:	095b      	lsrs	r3, r3, #5
 8006fce:	2164      	movs	r1, #100	; 0x64
 8006fd0:	fb01 f303 	mul.w	r3, r1, r3
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	011b      	lsls	r3, r3, #4
 8006fd8:	3332      	adds	r3, #50	; 0x32
 8006fda:	4a34      	ldr	r2, [pc, #208]	; (80070ac <UART_SetConfig+0x4e4>)
 8006fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe0:	095b      	lsrs	r3, r3, #5
 8006fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fe6:	441c      	add	r4, r3
 8006fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fec:	2200      	movs	r2, #0
 8006fee:	673b      	str	r3, [r7, #112]	; 0x70
 8006ff0:	677a      	str	r2, [r7, #116]	; 0x74
 8006ff2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ff6:	4642      	mov	r2, r8
 8006ff8:	464b      	mov	r3, r9
 8006ffa:	1891      	adds	r1, r2, r2
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	415b      	adcs	r3, r3
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007006:	4641      	mov	r1, r8
 8007008:	1851      	adds	r1, r2, r1
 800700a:	6039      	str	r1, [r7, #0]
 800700c:	4649      	mov	r1, r9
 800700e:	414b      	adcs	r3, r1
 8007010:	607b      	str	r3, [r7, #4]
 8007012:	f04f 0200 	mov.w	r2, #0
 8007016:	f04f 0300 	mov.w	r3, #0
 800701a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800701e:	4659      	mov	r1, fp
 8007020:	00cb      	lsls	r3, r1, #3
 8007022:	4651      	mov	r1, sl
 8007024:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007028:	4651      	mov	r1, sl
 800702a:	00ca      	lsls	r2, r1, #3
 800702c:	4610      	mov	r0, r2
 800702e:	4619      	mov	r1, r3
 8007030:	4603      	mov	r3, r0
 8007032:	4642      	mov	r2, r8
 8007034:	189b      	adds	r3, r3, r2
 8007036:	66bb      	str	r3, [r7, #104]	; 0x68
 8007038:	464b      	mov	r3, r9
 800703a:	460a      	mov	r2, r1
 800703c:	eb42 0303 	adc.w	r3, r2, r3
 8007040:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	663b      	str	r3, [r7, #96]	; 0x60
 800704c:	667a      	str	r2, [r7, #100]	; 0x64
 800704e:	f04f 0200 	mov.w	r2, #0
 8007052:	f04f 0300 	mov.w	r3, #0
 8007056:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800705a:	4649      	mov	r1, r9
 800705c:	008b      	lsls	r3, r1, #2
 800705e:	4641      	mov	r1, r8
 8007060:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007064:	4641      	mov	r1, r8
 8007066:	008a      	lsls	r2, r1, #2
 8007068:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800706c:	f7f9 fe1c 	bl	8000ca8 <__aeabi_uldivmod>
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <UART_SetConfig+0x4e4>)
 8007076:	fba3 1302 	umull	r1, r3, r3, r2
 800707a:	095b      	lsrs	r3, r3, #5
 800707c:	2164      	movs	r1, #100	; 0x64
 800707e:	fb01 f303 	mul.w	r3, r1, r3
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	011b      	lsls	r3, r3, #4
 8007086:	3332      	adds	r3, #50	; 0x32
 8007088:	4a08      	ldr	r2, [pc, #32]	; (80070ac <UART_SetConfig+0x4e4>)
 800708a:	fba2 2303 	umull	r2, r3, r2, r3
 800708e:	095b      	lsrs	r3, r3, #5
 8007090:	f003 020f 	and.w	r2, r3, #15
 8007094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4422      	add	r2, r4
 800709c:	609a      	str	r2, [r3, #8]
}
 800709e:	bf00      	nop
 80070a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80070a4:	46bd      	mov	sp, r7
 80070a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070aa:	bf00      	nop
 80070ac:	51eb851f 	.word	0x51eb851f

080070b0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d123      	bne.n	800710a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80070ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	6851      	ldr	r1, [r2, #4]
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	6892      	ldr	r2, [r2, #8]
 80070d6:	4311      	orrs	r1, r2
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	68d2      	ldr	r2, [r2, #12]
 80070dc:	4311      	orrs	r1, r2
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	6912      	ldr	r2, [r2, #16]
 80070e2:	4311      	orrs	r1, r2
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	6952      	ldr	r2, [r2, #20]
 80070e8:	4311      	orrs	r1, r2
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	6992      	ldr	r2, [r2, #24]
 80070ee:	4311      	orrs	r1, r2
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	69d2      	ldr	r2, [r2, #28]
 80070f4:	4311      	orrs	r1, r2
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	6a12      	ldr	r2, [r2, #32]
 80070fa:	4311      	orrs	r1, r2
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007100:	430a      	orrs	r2, r1
 8007102:	431a      	orrs	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	e028      	b.n	800715c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	69d9      	ldr	r1, [r3, #28]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	4319      	orrs	r1, r3
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007120:	430b      	orrs	r3, r1
 8007122:	431a      	orrs	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007130:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	6851      	ldr	r1, [r2, #4]
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	6892      	ldr	r2, [r2, #8]
 800713c:	4311      	orrs	r1, r2
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	68d2      	ldr	r2, [r2, #12]
 8007142:	4311      	orrs	r1, r2
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	6912      	ldr	r2, [r2, #16]
 8007148:	4311      	orrs	r1, r2
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	6952      	ldr	r2, [r2, #20]
 800714e:	4311      	orrs	r1, r2
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	6992      	ldr	r2, [r2, #24]
 8007154:	430a      	orrs	r2, r1
 8007156:	431a      	orrs	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800716a:	b480      	push	{r7}
 800716c:	b085      	sub	sp, #20
 800716e:	af00      	add	r7, sp, #0
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d128      	bne.n	80071ce <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	1e59      	subs	r1, r3, #1
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	3b01      	subs	r3, #1
 8007190:	011b      	lsls	r3, r3, #4
 8007192:	4319      	orrs	r1, r3
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	3b01      	subs	r3, #1
 800719a:	021b      	lsls	r3, r3, #8
 800719c:	4319      	orrs	r1, r3
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	031b      	lsls	r3, r3, #12
 80071a6:	4319      	orrs	r1, r3
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	041b      	lsls	r3, r3, #16
 80071b0:	4319      	orrs	r1, r3
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	051b      	lsls	r3, r3, #20
 80071ba:	4319      	orrs	r1, r3
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	061b      	lsls	r3, r3, #24
 80071c4:	430b      	orrs	r3, r1
 80071c6:	431a      	orrs	r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	609a      	str	r2, [r3, #8]
 80071cc:	e02f      	b.n	800722e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80071d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	68d2      	ldr	r2, [r2, #12]
 80071de:	3a01      	subs	r2, #1
 80071e0:	0311      	lsls	r1, r2, #12
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	6952      	ldr	r2, [r2, #20]
 80071e6:	3a01      	subs	r2, #1
 80071e8:	0512      	lsls	r2, r2, #20
 80071ea:	430a      	orrs	r2, r1
 80071ec:	431a      	orrs	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	1e59      	subs	r1, r3, #1
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	3b01      	subs	r3, #1
 8007206:	011b      	lsls	r3, r3, #4
 8007208:	4319      	orrs	r1, r3
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	3b01      	subs	r3, #1
 8007210:	021b      	lsls	r3, r3, #8
 8007212:	4319      	orrs	r1, r3
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	3b01      	subs	r3, #1
 800721a:	041b      	lsls	r3, r3, #16
 800721c:	4319      	orrs	r1, r3
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	3b01      	subs	r3, #1
 8007224:	061b      	lsls	r3, r3, #24
 8007226:	430b      	orrs	r3, r1
 8007228:	431a      	orrs	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800723c:	b084      	sub	sp, #16
 800723e:	b580      	push	{r7, lr}
 8007240:	b084      	sub	sp, #16
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	f107 001c 	add.w	r0, r7, #28
 800724a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007250:	2b01      	cmp	r3, #1
 8007252:	d122      	bne.n	800729a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007258:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800727c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800727e:	2b01      	cmp	r3, #1
 8007280:	d105      	bne.n	800728e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f9c0 	bl	8007614 <USB_CoreReset>
 8007294:	4603      	mov	r3, r0
 8007296:	73fb      	strb	r3, [r7, #15]
 8007298:	e01a      	b.n	80072d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f9b4 	bl	8007614 <USB_CoreReset>
 80072ac:	4603      	mov	r3, r0
 80072ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80072b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d106      	bne.n	80072c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	639a      	str	r2, [r3, #56]	; 0x38
 80072c2:	e005      	b.n	80072d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80072d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d10b      	bne.n	80072ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f043 0206 	orr.w	r2, r3, #6
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f043 0220 	orr.w	r2, r3, #32
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072fa:	b004      	add	sp, #16
 80072fc:	4770      	bx	lr

080072fe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072fe:	b480      	push	{r7}
 8007300:	b083      	sub	sp, #12
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f043 0201 	orr.w	r2, r3, #1
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f023 0201 	bic.w	r2, r3, #1
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	460b      	mov	r3, r1
 800734c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800734e:	2300      	movs	r3, #0
 8007350:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800735e:	78fb      	ldrb	r3, [r7, #3]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d115      	bne.n	8007390 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007370:	2001      	movs	r0, #1
 8007372:	f7fb f90d 	bl	8002590 <HAL_Delay>
      ms++;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	3301      	adds	r3, #1
 800737a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f93a 	bl	80075f6 <USB_GetMode>
 8007382:	4603      	mov	r3, r0
 8007384:	2b01      	cmp	r3, #1
 8007386:	d01e      	beq.n	80073c6 <USB_SetCurrentMode+0x84>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b31      	cmp	r3, #49	; 0x31
 800738c:	d9f0      	bls.n	8007370 <USB_SetCurrentMode+0x2e>
 800738e:	e01a      	b.n	80073c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007390:	78fb      	ldrb	r3, [r7, #3]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d115      	bne.n	80073c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80073a2:	2001      	movs	r0, #1
 80073a4:	f7fb f8f4 	bl	8002590 <HAL_Delay>
      ms++;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	3301      	adds	r3, #1
 80073ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f921 	bl	80075f6 <USB_GetMode>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d005      	beq.n	80073c6 <USB_SetCurrentMode+0x84>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2b31      	cmp	r3, #49	; 0x31
 80073be:	d9f0      	bls.n	80073a2 <USB_SetCurrentMode+0x60>
 80073c0:	e001      	b.n	80073c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e005      	b.n	80073d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2b32      	cmp	r3, #50	; 0x32
 80073ca:	d101      	bne.n	80073d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e000      	b.n	80073d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3301      	adds	r3, #1
 80073ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4a13      	ldr	r2, [pc, #76]	; (8007440 <USB_FlushTxFifo+0x64>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d901      	bls.n	80073fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e01b      	b.n	8007434 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	daf2      	bge.n	80073ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	019b      	lsls	r3, r3, #6
 800740c:	f043 0220 	orr.w	r2, r3, #32
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	3301      	adds	r3, #1
 8007418:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4a08      	ldr	r2, [pc, #32]	; (8007440 <USB_FlushTxFifo+0x64>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d901      	bls.n	8007426 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e006      	b.n	8007434 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	f003 0320 	and.w	r3, r3, #32
 800742e:	2b20      	cmp	r3, #32
 8007430:	d0f0      	beq.n	8007414 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	00030d40 	.word	0x00030d40

08007444 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	3301      	adds	r3, #1
 8007454:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4a11      	ldr	r2, [pc, #68]	; (80074a0 <USB_FlushRxFifo+0x5c>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d901      	bls.n	8007462 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e018      	b.n	8007494 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	2b00      	cmp	r3, #0
 8007468:	daf2      	bge.n	8007450 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2210      	movs	r2, #16
 8007472:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3301      	adds	r3, #1
 8007478:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4a08      	ldr	r2, [pc, #32]	; (80074a0 <USB_FlushRxFifo+0x5c>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d901      	bls.n	8007486 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e006      	b.n	8007494 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	f003 0310 	and.w	r3, r3, #16
 800748e:	2b10      	cmp	r3, #16
 8007490:	d0f0      	beq.n	8007474 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	00030d40 	.word	0x00030d40

080074a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b089      	sub	sp, #36	; 0x24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	4611      	mov	r1, r2
 80074b0:	461a      	mov	r2, r3
 80074b2:	460b      	mov	r3, r1
 80074b4:	71fb      	strb	r3, [r7, #7]
 80074b6:	4613      	mov	r3, r2
 80074b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80074c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d123      	bne.n	8007512 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80074ca:	88bb      	ldrh	r3, [r7, #4]
 80074cc:	3303      	adds	r3, #3
 80074ce:	089b      	lsrs	r3, r3, #2
 80074d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80074d2:	2300      	movs	r3, #0
 80074d4:	61bb      	str	r3, [r7, #24]
 80074d6:	e018      	b.n	800750a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80074d8:	79fb      	ldrb	r3, [r7, #7]
 80074da:	031a      	lsls	r2, r3, #12
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e4:	461a      	mov	r2, r3
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	3301      	adds	r3, #1
 80074f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	3301      	adds	r3, #1
 80074f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	3301      	adds	r3, #1
 80074fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	3301      	adds	r3, #1
 8007502:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	3301      	adds	r3, #1
 8007508:	61bb      	str	r3, [r7, #24]
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	429a      	cmp	r2, r3
 8007510:	d3e2      	bcc.n	80074d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3724      	adds	r7, #36	; 0x24
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007520:	b480      	push	{r7}
 8007522:	b08b      	sub	sp, #44	; 0x2c
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	4613      	mov	r3, r2
 800752c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007536:	88fb      	ldrh	r3, [r7, #6]
 8007538:	089b      	lsrs	r3, r3, #2
 800753a:	b29b      	uxth	r3, r3
 800753c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800753e:	88fb      	ldrh	r3, [r7, #6]
 8007540:	f003 0303 	and.w	r3, r3, #3
 8007544:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007546:	2300      	movs	r3, #0
 8007548:	623b      	str	r3, [r7, #32]
 800754a:	e014      	b.n	8007576 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	601a      	str	r2, [r3, #0]
    pDest++;
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	3301      	adds	r3, #1
 800755c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	3301      	adds	r3, #1
 8007562:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	3301      	adds	r3, #1
 8007568:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	3301      	adds	r3, #1
 800756e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	3301      	adds	r3, #1
 8007574:	623b      	str	r3, [r7, #32]
 8007576:	6a3a      	ldr	r2, [r7, #32]
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	429a      	cmp	r2, r3
 800757c:	d3e6      	bcc.n	800754c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800757e:	8bfb      	ldrh	r3, [r7, #30]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d01e      	beq.n	80075c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007584:	2300      	movs	r3, #0
 8007586:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800758e:	461a      	mov	r2, r3
 8007590:	f107 0310 	add.w	r3, r7, #16
 8007594:	6812      	ldr	r2, [r2, #0]
 8007596:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	fa22 f303 	lsr.w	r3, r2, r3
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	701a      	strb	r2, [r3, #0]
      i++;
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	3301      	adds	r3, #1
 80075ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80075b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b2:	3301      	adds	r3, #1
 80075b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80075b6:	8bfb      	ldrh	r3, [r7, #30]
 80075b8:	3b01      	subs	r3, #1
 80075ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80075bc:	8bfb      	ldrh	r3, [r7, #30]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1ea      	bne.n	8007598 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80075c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	372c      	adds	r7, #44	; 0x2c
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	4013      	ands	r3, r2
 80075e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80075e8:	68fb      	ldr	r3, [r7, #12]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	f003 0301 	and.w	r3, r3, #1
}
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
	...

08007614 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800761c:	2300      	movs	r3, #0
 800761e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	3301      	adds	r3, #1
 8007624:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	4a13      	ldr	r2, [pc, #76]	; (8007678 <USB_CoreReset+0x64>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d901      	bls.n	8007632 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e01b      	b.n	800766a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	2b00      	cmp	r3, #0
 8007638:	daf2      	bge.n	8007620 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	f043 0201 	orr.w	r2, r3, #1
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3301      	adds	r3, #1
 800764e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4a09      	ldr	r2, [pc, #36]	; (8007678 <USB_CoreReset+0x64>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d901      	bls.n	800765c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e006      	b.n	800766a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	2b01      	cmp	r3, #1
 8007666:	d0f0      	beq.n	800764a <USB_CoreReset+0x36>

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	00030d40 	.word	0x00030d40

0800767c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800767c:	b084      	sub	sp, #16
 800767e:	b580      	push	{r7, lr}
 8007680:	b086      	sub	sp, #24
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800768a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800769c:	461a      	mov	r2, r3
 800769e:	2300      	movs	r3, #0
 80076a0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076be:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d018      	beq.n	8007704 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80076d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d10a      	bne.n	80076ee <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076e6:	f043 0304 	orr.w	r3, r3, #4
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	e014      	b.n	8007718 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076fc:	f023 0304 	bic.w	r3, r3, #4
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	e009      	b.n	8007718 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007712:	f023 0304 	bic.w	r3, r3, #4
 8007716:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007718:	2110      	movs	r1, #16
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7ff fe5e 	bl	80073dc <USB_FlushTxFifo>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7ff fe8a 	bl	8007444 <USB_FlushRxFifo>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800773a:	2300      	movs	r3, #0
 800773c:	613b      	str	r3, [r7, #16]
 800773e:	e015      	b.n	800776c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4413      	add	r3, r2
 8007748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800774c:	461a      	mov	r2, r3
 800774e:	f04f 33ff 	mov.w	r3, #4294967295
 8007752:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4413      	add	r3, r2
 800775c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007760:	461a      	mov	r2, r3
 8007762:	2300      	movs	r3, #0
 8007764:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	3301      	adds	r3, #1
 800776a:	613b      	str	r3, [r7, #16]
 800776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	429a      	cmp	r2, r3
 8007772:	d3e5      	bcc.n	8007740 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f04f 32ff 	mov.w	r2, #4294967295
 8007780:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00b      	beq.n	80077a6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007794:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a13      	ldr	r2, [pc, #76]	; (80077e8 <USB_HostInit+0x16c>)
 800779a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a13      	ldr	r2, [pc, #76]	; (80077ec <USB_HostInit+0x170>)
 80077a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80077a4:	e009      	b.n	80077ba <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2280      	movs	r2, #128	; 0x80
 80077aa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a10      	ldr	r2, [pc, #64]	; (80077f0 <USB_HostInit+0x174>)
 80077b0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a0f      	ldr	r2, [pc, #60]	; (80077f4 <USB_HostInit+0x178>)
 80077b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80077ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d105      	bne.n	80077cc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	f043 0210 	orr.w	r2, r3, #16
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	699a      	ldr	r2, [r3, #24]
 80077d0:	4b09      	ldr	r3, [pc, #36]	; (80077f8 <USB_HostInit+0x17c>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077e4:	b004      	add	sp, #16
 80077e6:	4770      	bx	lr
 80077e8:	01000200 	.word	0x01000200
 80077ec:	00e00300 	.word	0x00e00300
 80077f0:	00600080 	.word	0x00600080
 80077f4:	004000e0 	.word	0x004000e0
 80077f8:	a3200008 	.word	0xa3200008

080077fc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	460b      	mov	r3, r1
 8007806:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800781a:	f023 0303 	bic.w	r3, r3, #3
 800781e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	78fb      	ldrb	r3, [r7, #3]
 800782a:	f003 0303 	and.w	r3, r3, #3
 800782e:	68f9      	ldr	r1, [r7, #12]
 8007830:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007834:	4313      	orrs	r3, r2
 8007836:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007838:	78fb      	ldrb	r3, [r7, #3]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d107      	bne.n	800784e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007844:	461a      	mov	r2, r3
 8007846:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800784a:	6053      	str	r3, [r2, #4]
 800784c:	e009      	b.n	8007862 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800784e:	78fb      	ldrb	r3, [r7, #3]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d106      	bne.n	8007862 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800785a:	461a      	mov	r2, r3
 800785c:	f241 7370 	movw	r3, #6000	; 0x1770
 8007860:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007890:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800789a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800789e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80078a0:	2064      	movs	r0, #100	; 0x64
 80078a2:	f7fa fe75 	bl	8002590 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80078ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078b2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80078b4:	200a      	movs	r0, #10
 80078b6:	f7fa fe6b 	bl	8002590 <HAL_Delay>

  return HAL_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	460b      	mov	r3, r1
 80078ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80078e8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d109      	bne.n	8007908 <USB_DriveVbus+0x44>
 80078f4:	78fb      	ldrb	r3, [r7, #3]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d106      	bne.n	8007908 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007902:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007906:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800790e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007912:	d109      	bne.n	8007928 <USB_DriveVbus+0x64>
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d106      	bne.n	8007928 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007922:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007926:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007936:	b480      	push	{r7}
 8007938:	b085      	sub	sp, #20
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007942:	2300      	movs	r3, #0
 8007944:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	0c5b      	lsrs	r3, r3, #17
 8007954:	f003 0303 	and.w	r3, r3, #3
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	b29b      	uxth	r3, r3
}
 800797a:	4618      	mov	r0, r3
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
	...

08007988 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b088      	sub	sp, #32
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	4608      	mov	r0, r1
 8007992:	4611      	mov	r1, r2
 8007994:	461a      	mov	r2, r3
 8007996:	4603      	mov	r3, r0
 8007998:	70fb      	strb	r3, [r7, #3]
 800799a:	460b      	mov	r3, r1
 800799c:	70bb      	strb	r3, [r7, #2]
 800799e:	4613      	mov	r3, r2
 80079a0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80079aa:	78fb      	ldrb	r3, [r7, #3]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079b6:	461a      	mov	r2, r3
 80079b8:	f04f 33ff 	mov.w	r3, #4294967295
 80079bc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80079be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	d87e      	bhi.n	8007ac4 <USB_HC_Init+0x13c>
 80079c6:	a201      	add	r2, pc, #4	; (adr r2, 80079cc <USB_HC_Init+0x44>)
 80079c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079cc:	080079dd 	.word	0x080079dd
 80079d0:	08007a87 	.word	0x08007a87
 80079d4:	080079dd 	.word	0x080079dd
 80079d8:	08007a49 	.word	0x08007a49
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80079dc:	78fb      	ldrb	r3, [r7, #3]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079e8:	461a      	mov	r2, r3
 80079ea:	f240 439d 	movw	r3, #1181	; 0x49d
 80079ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80079f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	da10      	bge.n	8007a1a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80079f8:	78fb      	ldrb	r3, [r7, #3]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	78fa      	ldrb	r2, [r7, #3]
 8007a08:	0151      	lsls	r1, r2, #5
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	440a      	add	r2, r1
 8007a0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a16:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007a18:	e057      	b.n	8007aca <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d051      	beq.n	8007aca <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007a26:	78fb      	ldrb	r3, [r7, #3]
 8007a28:	015a      	lsls	r2, r3, #5
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	78fa      	ldrb	r2, [r7, #3]
 8007a36:	0151      	lsls	r1, r2, #5
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	440a      	add	r2, r1
 8007a3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a40:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007a44:	60d3      	str	r3, [r2, #12]
      break;
 8007a46:	e040      	b.n	8007aca <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a48:	78fb      	ldrb	r3, [r7, #3]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a54:	461a      	mov	r2, r3
 8007a56:	f240 639d 	movw	r3, #1693	; 0x69d
 8007a5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007a5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	da34      	bge.n	8007ace <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007a64:	78fb      	ldrb	r3, [r7, #3]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	78fa      	ldrb	r2, [r7, #3]
 8007a74:	0151      	lsls	r1, r2, #5
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	440a      	add	r2, r1
 8007a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a82:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007a84:	e023      	b.n	8007ace <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a86:	78fb      	ldrb	r3, [r7, #3]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a92:	461a      	mov	r2, r3
 8007a94:	f240 2325 	movw	r3, #549	; 0x225
 8007a98:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007a9a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	da17      	bge.n	8007ad2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007aa2:	78fb      	ldrb	r3, [r7, #3]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	78fa      	ldrb	r2, [r7, #3]
 8007ab2:	0151      	lsls	r1, r2, #5
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	440a      	add	r2, r1
 8007ab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007abc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007ac0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007ac2:	e006      	b.n	8007ad2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	77fb      	strb	r3, [r7, #31]
      break;
 8007ac8:	e004      	b.n	8007ad4 <USB_HC_Init+0x14c>
      break;
 8007aca:	bf00      	nop
 8007acc:	e002      	b.n	8007ad4 <USB_HC_Init+0x14c>
      break;
 8007ace:	bf00      	nop
 8007ad0:	e000      	b.n	8007ad4 <USB_HC_Init+0x14c>
      break;
 8007ad2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007ad4:	78fb      	ldrb	r3, [r7, #3]
 8007ad6:	015a      	lsls	r2, r3, #5
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	78fa      	ldrb	r2, [r7, #3]
 8007ae4:	0151      	lsls	r1, r2, #5
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	440a      	add	r2, r1
 8007aea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aee:	f043 0302 	orr.w	r3, r3, #2
 8007af2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007afa:	699a      	ldr	r2, [r3, #24]
 8007afc:	78fb      	ldrb	r3, [r7, #3]
 8007afe:	f003 030f 	and.w	r3, r3, #15
 8007b02:	2101      	movs	r1, #1
 8007b04:	fa01 f303 	lsl.w	r3, r1, r3
 8007b08:	6939      	ldr	r1, [r7, #16]
 8007b0a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007b1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	da03      	bge.n	8007b2e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b2a:	61bb      	str	r3, [r7, #24]
 8007b2c:	e001      	b.n	8007b32 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7ff feff 	bl	8007936 <USB_GetHostSpeed>
 8007b38:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007b3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d106      	bne.n	8007b50 <USB_HC_Init+0x1c8>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d003      	beq.n	8007b50 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b4c:	617b      	str	r3, [r7, #20]
 8007b4e:	e001      	b.n	8007b54 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b54:	787b      	ldrb	r3, [r7, #1]
 8007b56:	059b      	lsls	r3, r3, #22
 8007b58:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007b5c:	78bb      	ldrb	r3, [r7, #2]
 8007b5e:	02db      	lsls	r3, r3, #11
 8007b60:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b64:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007b66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b6a:	049b      	lsls	r3, r3, #18
 8007b6c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007b70:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b72:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007b74:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007b78:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b7e:	78fb      	ldrb	r3, [r7, #3]
 8007b80:	0159      	lsls	r1, r3, #5
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	440b      	add	r3, r1
 8007b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b8a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b90:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007b92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d003      	beq.n	8007ba2 <USB_HC_Init+0x21a>
 8007b9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d10f      	bne.n	8007bc2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007ba2:	78fb      	ldrb	r3, [r7, #3]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	78fa      	ldrb	r2, [r7, #3]
 8007bb2:	0151      	lsls	r1, r2, #5
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	440a      	add	r2, r1
 8007bb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007bc0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007bc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3720      	adds	r7, #32
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08c      	sub	sp, #48	; 0x30
 8007bd0:	af02      	add	r7, sp, #8
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	785b      	ldrb	r3, [r3, #1]
 8007be2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007be4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007be8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d02d      	beq.n	8007c52 <USB_HC_StartXfer+0x86>
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	791b      	ldrb	r3, [r3, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d129      	bne.n	8007c52 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d117      	bne.n	8007c34 <USB_HC_StartXfer+0x68>
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	79db      	ldrb	r3, [r3, #7]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <USB_HC_StartXfer+0x48>
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	79db      	ldrb	r3, [r3, #7]
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d10f      	bne.n	8007c34 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	69fa      	ldr	r2, [r7, #28]
 8007c24:	0151      	lsls	r1, r2, #5
 8007c26:	6a3a      	ldr	r2, [r7, #32]
 8007c28:	440a      	add	r2, r1
 8007c2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c32:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007c34:	79fb      	ldrb	r3, [r7, #7]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10b      	bne.n	8007c52 <USB_HC_StartXfer+0x86>
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	795b      	ldrb	r3, [r3, #5]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d107      	bne.n	8007c52 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	785b      	ldrb	r3, [r3, #1]
 8007c46:	4619      	mov	r1, r3
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 fa0f 	bl	800806c <USB_DoPing>
      return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	e0f8      	b.n	8007e44 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d018      	beq.n	8007c8c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	8912      	ldrh	r2, [r2, #8]
 8007c62:	4413      	add	r3, r2
 8007c64:	3b01      	subs	r3, #1
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	8912      	ldrh	r2, [r2, #8]
 8007c6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c6e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007c70:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007c72:	8b7b      	ldrh	r3, [r7, #26]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d90b      	bls.n	8007c90 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007c78:	8b7b      	ldrh	r3, [r7, #26]
 8007c7a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007c7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	8912      	ldrh	r2, [r2, #8]
 8007c82:	fb03 f202 	mul.w	r2, r3, r2
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	611a      	str	r2, [r3, #16]
 8007c8a:	e001      	b.n	8007c90 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	78db      	ldrb	r3, [r3, #3]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d007      	beq.n	8007ca8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007c98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	8912      	ldrh	r2, [r2, #8]
 8007c9e:	fb03 f202 	mul.w	r2, r3, r2
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	611a      	str	r2, [r3, #16]
 8007ca6:	e003      	b.n	8007cb0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	695a      	ldr	r2, [r3, #20]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007cb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007cba:	04d9      	lsls	r1, r3, #19
 8007cbc:	4b63      	ldr	r3, [pc, #396]	; (8007e4c <USB_HC_StartXfer+0x280>)
 8007cbe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007cc0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	7a9b      	ldrb	r3, [r3, #10]
 8007cc6:	075b      	lsls	r3, r3, #29
 8007cc8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ccc:	69f9      	ldr	r1, [r7, #28]
 8007cce:	0148      	lsls	r0, r1, #5
 8007cd0:	6a39      	ldr	r1, [r7, #32]
 8007cd2:	4401      	add	r1, r0
 8007cd4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007cd8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007cda:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007cdc:	79fb      	ldrb	r3, [r7, #7]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d009      	beq.n	8007cf6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	68d9      	ldr	r1, [r3, #12]
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cf2:	460a      	mov	r2, r1
 8007cf4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	bf0c      	ite	eq
 8007d06:	2301      	moveq	r3, #1
 8007d08:	2300      	movne	r3, #0
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	015a      	lsls	r2, r3, #5
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	4413      	add	r3, r2
 8007d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	69fa      	ldr	r2, [r7, #28]
 8007d1e:	0151      	lsls	r1, r2, #5
 8007d20:	6a3a      	ldr	r2, [r7, #32]
 8007d22:	440a      	add	r2, r1
 8007d24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d28:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d2c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	7e7b      	ldrb	r3, [r7, #25]
 8007d3e:	075b      	lsls	r3, r3, #29
 8007d40:	69f9      	ldr	r1, [r7, #28]
 8007d42:	0148      	lsls	r0, r1, #5
 8007d44:	6a39      	ldr	r1, [r7, #32]
 8007d46:	4401      	add	r1, r0
 8007d48:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	6a3b      	ldr	r3, [r7, #32]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d66:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	78db      	ldrb	r3, [r3, #3]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d004      	beq.n	8007d7a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d76:	613b      	str	r3, [r7, #16]
 8007d78:	e003      	b.n	8007d82 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d80:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d88:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d96:	461a      	mov	r2, r3
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007d9c:	79fb      	ldrb	r3, [r7, #7]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d001      	beq.n	8007da6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	e04e      	b.n	8007e44 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	78db      	ldrb	r3, [r3, #3]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d149      	bne.n	8007e42 <USB_HC_StartXfer+0x276>
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d045      	beq.n	8007e42 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	79db      	ldrb	r3, [r3, #7]
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d830      	bhi.n	8007e20 <USB_HC_StartXfer+0x254>
 8007dbe:	a201      	add	r2, pc, #4	; (adr r2, 8007dc4 <USB_HC_StartXfer+0x1f8>)
 8007dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc4:	08007dd5 	.word	0x08007dd5
 8007dc8:	08007df9 	.word	0x08007df9
 8007dcc:	08007dd5 	.word	0x08007dd5
 8007dd0:	08007df9 	.word	0x08007df9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	3303      	adds	r3, #3
 8007dda:	089b      	lsrs	r3, r3, #2
 8007ddc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007dde:	8afa      	ldrh	r2, [r7, #22]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d91c      	bls.n	8007e24 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	f043 0220 	orr.w	r2, r3, #32
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	619a      	str	r2, [r3, #24]
        }
        break;
 8007df6:	e015      	b.n	8007e24 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	3303      	adds	r3, #3
 8007dfe:	089b      	lsrs	r3, r3, #2
 8007e00:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007e02:	8afa      	ldrh	r2, [r7, #22]
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d90a      	bls.n	8007e28 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007e1e:	e003      	b.n	8007e28 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007e20:	bf00      	nop
 8007e22:	e002      	b.n	8007e2a <USB_HC_StartXfer+0x25e>
        break;
 8007e24:	bf00      	nop
 8007e26:	e000      	b.n	8007e2a <USB_HC_StartXfer+0x25e>
        break;
 8007e28:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	68d9      	ldr	r1, [r3, #12]
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	785a      	ldrb	r2, [r3, #1]
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	2000      	movs	r0, #0
 8007e3a:	9000      	str	r0, [sp, #0]
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f7ff fb31 	bl	80074a4 <USB_WritePacket>
  }

  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3728      	adds	r7, #40	; 0x28
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	1ff80000 	.word	0x1ff80000

08007e50 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e62:	695b      	ldr	r3, [r3, #20]
 8007e64:	b29b      	uxth	r3, r3
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b089      	sub	sp, #36	; 0x24
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007e82:	78fb      	ldrb	r3, [r7, #3]
 8007e84:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	015a      	lsls	r2, r3, #5
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	4413      	add	r3, r2
 8007e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	0c9b      	lsrs	r3, r3, #18
 8007e9a:	f003 0303 	and.w	r3, r3, #3
 8007e9e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	0fdb      	lsrs	r3, r3, #31
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f003 0320 	and.w	r3, r3, #32
 8007ebe:	2b20      	cmp	r3, #32
 8007ec0:	d104      	bne.n	8007ecc <USB_HC_Halt+0x5a>
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d101      	bne.n	8007ecc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	e0c8      	b.n	800805e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d002      	beq.n	8007ed8 <USB_HC_Halt+0x66>
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d163      	bne.n	8007fa0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	69ba      	ldr	r2, [r7, #24]
 8007ee8:	0151      	lsls	r1, r2, #5
 8007eea:	69fa      	ldr	r2, [r7, #28]
 8007eec:	440a      	add	r2, r1
 8007eee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ef2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ef6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f003 0320 	and.w	r3, r3, #32
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f040 80ab 	bne.w	800805c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d133      	bne.n	8007f7a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	015a      	lsls	r2, r3, #5
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	69ba      	ldr	r2, [r7, #24]
 8007f22:	0151      	lsls	r1, r2, #5
 8007f24:	69fa      	ldr	r2, [r7, #28]
 8007f26:	440a      	add	r2, r1
 8007f28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f30:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	015a      	lsls	r2, r3, #5
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	69ba      	ldr	r2, [r7, #24]
 8007f42:	0151      	lsls	r1, r2, #5
 8007f44:	69fa      	ldr	r2, [r7, #28]
 8007f46:	440a      	add	r2, r1
 8007f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f50:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	3301      	adds	r3, #1
 8007f56:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f5e:	d81d      	bhi.n	8007f9c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f76:	d0ec      	beq.n	8007f52 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f78:	e070      	b.n	800805c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	0151      	lsls	r1, r2, #5
 8007f8c:	69fa      	ldr	r2, [r7, #28]
 8007f8e:	440a      	add	r2, r1
 8007f90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f98:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f9a:	e05f      	b.n	800805c <USB_HC_Halt+0x1ea>
            break;
 8007f9c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f9e:	e05d      	b.n	800805c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	015a      	lsls	r2, r3, #5
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	69ba      	ldr	r2, [r7, #24]
 8007fb0:	0151      	lsls	r1, r2, #5
 8007fb2:	69fa      	ldr	r2, [r7, #28]
 8007fb4:	440a      	add	r2, r1
 8007fb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fbe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d133      	bne.n	8008038 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69ba      	ldr	r2, [r7, #24]
 8007fe0:	0151      	lsls	r1, r2, #5
 8007fe2:	69fa      	ldr	r2, [r7, #28]
 8007fe4:	440a      	add	r2, r1
 8007fe6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	015a      	lsls	r2, r3, #5
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	69ba      	ldr	r2, [r7, #24]
 8008000:	0151      	lsls	r1, r2, #5
 8008002:	69fa      	ldr	r2, [r7, #28]
 8008004:	440a      	add	r2, r1
 8008006:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800800a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800800e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	3301      	adds	r3, #1
 8008014:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800801c:	d81d      	bhi.n	800805a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	4413      	add	r3, r2
 8008026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008030:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008034:	d0ec      	beq.n	8008010 <USB_HC_Halt+0x19e>
 8008036:	e011      	b.n	800805c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	4413      	add	r3, r2
 8008040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	0151      	lsls	r1, r2, #5
 800804a:	69fa      	ldr	r2, [r7, #28]
 800804c:	440a      	add	r2, r1
 800804e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008052:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008056:	6013      	str	r3, [r2, #0]
 8008058:	e000      	b.n	800805c <USB_HC_Halt+0x1ea>
          break;
 800805a:	bf00      	nop
    }
  }

  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3724      	adds	r7, #36	; 0x24
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
	...

0800806c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800806c:	b480      	push	{r7}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	460b      	mov	r3, r1
 8008076:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800807c:	78fb      	ldrb	r3, [r7, #3]
 800807e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008080:	2301      	movs	r3, #1
 8008082:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	04da      	lsls	r2, r3, #19
 8008088:	4b15      	ldr	r3, [pc, #84]	; (80080e0 <USB_DoPing+0x74>)
 800808a:	4013      	ands	r3, r2
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	0151      	lsls	r1, r2, #5
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	440a      	add	r2, r1
 8008094:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008098:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800809c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80080b4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080bc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	015a      	lsls	r2, r3, #5
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	4413      	add	r3, r2
 80080c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ca:	461a      	mov	r2, r3
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	371c      	adds	r7, #28
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	1ff80000 	.word	0x1ff80000

080080e4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b088      	sub	sp, #32
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80080f4:	2300      	movs	r3, #0
 80080f6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7ff f911 	bl	8007320 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80080fe:	2110      	movs	r1, #16
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff f96b 	bl	80073dc <USB_FlushTxFifo>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f7ff f997 	bl	8007444 <USB_FlushRxFifo>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d001      	beq.n	8008120 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008120:	2300      	movs	r3, #0
 8008122:	61bb      	str	r3, [r7, #24]
 8008124:	e01f      	b.n	8008166 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	4413      	add	r3, r2
 800812e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800813c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008144:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800814c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	4413      	add	r3, r2
 8008156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800815a:	461a      	mov	r2, r3
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	3301      	adds	r3, #1
 8008164:	61bb      	str	r3, [r7, #24]
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	2b0f      	cmp	r3, #15
 800816a:	d9dc      	bls.n	8008126 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800816c:	2300      	movs	r3, #0
 800816e:	61bb      	str	r3, [r7, #24]
 8008170:	e034      	b.n	80081dc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	015a      	lsls	r2, r3, #5
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	4413      	add	r3, r2
 800817a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008188:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008190:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008198:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081a6:	461a      	mov	r2, r3
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	3301      	adds	r3, #1
 80081b0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081b8:	d80c      	bhi.n	80081d4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081d0:	d0ec      	beq.n	80081ac <USB_StopHost+0xc8>
 80081d2:	e000      	b.n	80081d6 <USB_StopHost+0xf2>
        break;
 80081d4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	3301      	adds	r3, #1
 80081da:	61bb      	str	r3, [r7, #24]
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	2b0f      	cmp	r3, #15
 80081e0:	d9c7      	bls.n	8008172 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081e8:	461a      	mov	r2, r3
 80081ea:	f04f 33ff 	mov.w	r3, #4294967295
 80081ee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f04f 32ff 	mov.w	r2, #4294967295
 80081f6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff f880 	bl	80072fe <USB_EnableGlobalInt>

  return ret;
 80081fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3720      	adds	r7, #32
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008208:	b590      	push	{r4, r7, lr}
 800820a:	b089      	sub	sp, #36	; 0x24
 800820c:	af04      	add	r7, sp, #16
 800820e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008210:	2301      	movs	r3, #1
 8008212:	2202      	movs	r2, #2
 8008214:	2102      	movs	r1, #2
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fc66 	bl	8008ae8 <USBH_FindInterface>
 800821c:	4603      	mov	r3, r0
 800821e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	2bff      	cmp	r3, #255	; 0xff
 8008224:	d002      	beq.n	800822c <USBH_CDC_InterfaceInit+0x24>
 8008226:	7bfb      	ldrb	r3, [r7, #15]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d901      	bls.n	8008230 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800822c:	2302      	movs	r3, #2
 800822e:	e13d      	b.n	80084ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008230:	7bfb      	ldrb	r3, [r7, #15]
 8008232:	4619      	mov	r1, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fc3b 	bl	8008ab0 <USBH_SelectInterface>
 800823a:	4603      	mov	r3, r0
 800823c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800823e:	7bbb      	ldrb	r3, [r7, #14]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d001      	beq.n	8008248 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008244:	2302      	movs	r3, #2
 8008246:	e131      	b.n	80084ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800824e:	2050      	movs	r0, #80	; 0x50
 8008250:	f002 fb8a 	bl	800a968 <malloc>
 8008254:	4603      	mov	r3, r0
 8008256:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008268:	2302      	movs	r3, #2
 800826a:	e11f      	b.n	80084ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800826c:	2250      	movs	r2, #80	; 0x50
 800826e:	2100      	movs	r1, #0
 8008270:	68b8      	ldr	r0, [r7, #8]
 8008272:	f002 fb89 	bl	800a988 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008276:	7bfb      	ldrb	r3, [r7, #15]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	211a      	movs	r1, #26
 800827c:	fb01 f303 	mul.w	r3, r1, r3
 8008280:	4413      	add	r3, r2
 8008282:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	b25b      	sxtb	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	da15      	bge.n	80082ba <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800828e:	7bfb      	ldrb	r3, [r7, #15]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	211a      	movs	r1, #26
 8008294:	fb01 f303 	mul.w	r3, r1, r3
 8008298:	4413      	add	r3, r2
 800829a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800829e:	781a      	ldrb	r2, [r3, #0]
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	211a      	movs	r1, #26
 80082aa:	fb01 f303 	mul.w	r3, r1, r3
 80082ae:	4413      	add	r3, r2
 80082b0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80082b4:	881a      	ldrh	r2, [r3, #0]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	785b      	ldrb	r3, [r3, #1]
 80082be:	4619      	mov	r1, r3
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f001 ff2c 	bl	800a11e <USBH_AllocPipe>
 80082c6:	4603      	mov	r3, r0
 80082c8:	461a      	mov	r2, r3
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	7819      	ldrb	r1, [r3, #0]
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	7858      	ldrb	r0, [r3, #1]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	8952      	ldrh	r2, [r2, #10]
 80082e6:	9202      	str	r2, [sp, #8]
 80082e8:	2203      	movs	r2, #3
 80082ea:	9201      	str	r2, [sp, #4]
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	4623      	mov	r3, r4
 80082f0:	4602      	mov	r2, r0
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f001 fee4 	bl	800a0c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	2200      	movs	r2, #0
 80082fe:	4619      	mov	r1, r3
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f002 f9f9 	bl	800a6f8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008306:	2300      	movs	r3, #0
 8008308:	2200      	movs	r2, #0
 800830a:	210a      	movs	r1, #10
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fbeb 	bl	8008ae8 <USBH_FindInterface>
 8008312:	4603      	mov	r3, r0
 8008314:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008316:	7bfb      	ldrb	r3, [r7, #15]
 8008318:	2bff      	cmp	r3, #255	; 0xff
 800831a:	d002      	beq.n	8008322 <USBH_CDC_InterfaceInit+0x11a>
 800831c:	7bfb      	ldrb	r3, [r7, #15]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d901      	bls.n	8008326 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008322:	2302      	movs	r3, #2
 8008324:	e0c2      	b.n	80084ac <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008326:	7bfb      	ldrb	r3, [r7, #15]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	211a      	movs	r1, #26
 800832c:	fb01 f303 	mul.w	r3, r1, r3
 8008330:	4413      	add	r3, r2
 8008332:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	b25b      	sxtb	r3, r3
 800833a:	2b00      	cmp	r3, #0
 800833c:	da16      	bge.n	800836c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	211a      	movs	r1, #26
 8008344:	fb01 f303 	mul.w	r3, r1, r3
 8008348:	4413      	add	r3, r2
 800834a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800834e:	781a      	ldrb	r2, [r3, #0]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008354:	7bfb      	ldrb	r3, [r7, #15]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	211a      	movs	r1, #26
 800835a:	fb01 f303 	mul.w	r3, r1, r3
 800835e:	4413      	add	r3, r2
 8008360:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008364:	881a      	ldrh	r2, [r3, #0]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	835a      	strh	r2, [r3, #26]
 800836a:	e015      	b.n	8008398 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800836c:	7bfb      	ldrb	r3, [r7, #15]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	211a      	movs	r1, #26
 8008372:	fb01 f303 	mul.w	r3, r1, r3
 8008376:	4413      	add	r3, r2
 8008378:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800837c:	781a      	ldrb	r2, [r3, #0]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008382:	7bfb      	ldrb	r3, [r7, #15]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	211a      	movs	r1, #26
 8008388:	fb01 f303 	mul.w	r3, r1, r3
 800838c:	4413      	add	r3, r2
 800838e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008392:	881a      	ldrh	r2, [r3, #0]
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	211a      	movs	r1, #26
 800839e:	fb01 f303 	mul.w	r3, r1, r3
 80083a2:	4413      	add	r3, r2
 80083a4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	b25b      	sxtb	r3, r3
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	da16      	bge.n	80083de <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	211a      	movs	r1, #26
 80083b6:	fb01 f303 	mul.w	r3, r1, r3
 80083ba:	4413      	add	r3, r2
 80083bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80083c0:	781a      	ldrb	r2, [r3, #0]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	211a      	movs	r1, #26
 80083cc:	fb01 f303 	mul.w	r3, r1, r3
 80083d0:	4413      	add	r3, r2
 80083d2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80083d6:	881a      	ldrh	r2, [r3, #0]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	835a      	strh	r2, [r3, #26]
 80083dc:	e015      	b.n	800840a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80083de:	7bfb      	ldrb	r3, [r7, #15]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	211a      	movs	r1, #26
 80083e4:	fb01 f303 	mul.w	r3, r1, r3
 80083e8:	4413      	add	r3, r2
 80083ea:	f203 3356 	addw	r3, r3, #854	; 0x356
 80083ee:	781a      	ldrb	r2, [r3, #0]
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	211a      	movs	r1, #26
 80083fa:	fb01 f303 	mul.w	r3, r1, r3
 80083fe:	4413      	add	r3, r2
 8008400:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008404:	881a      	ldrh	r2, [r3, #0]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	7b9b      	ldrb	r3, [r3, #14]
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f001 fe84 	bl	800a11e <USBH_AllocPipe>
 8008416:	4603      	mov	r3, r0
 8008418:	461a      	mov	r2, r3
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	7bdb      	ldrb	r3, [r3, #15]
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f001 fe7a 	bl	800a11e <USBH_AllocPipe>
 800842a:	4603      	mov	r3, r0
 800842c:	461a      	mov	r2, r3
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	7b59      	ldrb	r1, [r3, #13]
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	7b98      	ldrb	r0, [r3, #14]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	8b12      	ldrh	r2, [r2, #24]
 800844a:	9202      	str	r2, [sp, #8]
 800844c:	2202      	movs	r2, #2
 800844e:	9201      	str	r2, [sp, #4]
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	4623      	mov	r3, r4
 8008454:	4602      	mov	r2, r0
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f001 fe32 	bl	800a0c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	7b19      	ldrb	r1, [r3, #12]
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	7bd8      	ldrb	r0, [r3, #15]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	8b52      	ldrh	r2, [r2, #26]
 8008474:	9202      	str	r2, [sp, #8]
 8008476:	2202      	movs	r2, #2
 8008478:	9201      	str	r2, [sp, #4]
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	4623      	mov	r3, r4
 800847e:	4602      	mov	r2, r0
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f001 fe1d 	bl	800a0c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	7b5b      	ldrb	r3, [r3, #13]
 8008492:	2200      	movs	r2, #0
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f002 f92e 	bl	800a6f8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	7b1b      	ldrb	r3, [r3, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f002 f927 	bl	800a6f8 <USBH_LL_SetToggle>

  return USBH_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd90      	pop	{r4, r7, pc}

080084b4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084c2:	69db      	ldr	r3, [r3, #28]
 80084c4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00e      	beq.n	80084ec <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f001 fe12 	bl	800a0fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f001 fe3d 	bl	800a160 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	7b1b      	ldrb	r3, [r3, #12]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00e      	beq.n	8008512 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	7b1b      	ldrb	r3, [r3, #12]
 80084f8:	4619      	mov	r1, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f001 fdff 	bl	800a0fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	7b1b      	ldrb	r3, [r3, #12]
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f001 fe2a 	bl	800a160 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	7b5b      	ldrb	r3, [r3, #13]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00e      	beq.n	8008538 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	7b5b      	ldrb	r3, [r3, #13]
 800851e:	4619      	mov	r1, r3
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f001 fdec 	bl	800a0fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	7b5b      	ldrb	r3, [r3, #13]
 800852a:	4619      	mov	r1, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f001 fe17 	bl	800a160 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800853e:	69db      	ldr	r3, [r3, #28]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00b      	beq.n	800855c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	4618      	mov	r0, r3
 800854e:	f002 fa13 	bl	800a978 <free>
    phost->pActiveClass->pData = 0U;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008558:	2200      	movs	r2, #0
 800855a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	3340      	adds	r3, #64	; 0x40
 800857c:	4619      	mov	r1, r3
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f8b1 	bl	80086e6 <GetLineCoding>
 8008584:	4603      	mov	r3, r0
 8008586:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008588:	7afb      	ldrb	r3, [r7, #11]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d105      	bne.n	800859a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008594:	2102      	movs	r1, #2
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800859a:	7afb      	ldrb	r3, [r7, #11]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80085ac:	2301      	movs	r3, #1
 80085ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085ba:	69db      	ldr	r3, [r3, #28]
 80085bc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80085c4:	2b04      	cmp	r3, #4
 80085c6:	d877      	bhi.n	80086b8 <USBH_CDC_Process+0x114>
 80085c8:	a201      	add	r2, pc, #4	; (adr r2, 80085d0 <USBH_CDC_Process+0x2c>)
 80085ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ce:	bf00      	nop
 80085d0:	080085e5 	.word	0x080085e5
 80085d4:	080085eb 	.word	0x080085eb
 80085d8:	0800861b 	.word	0x0800861b
 80085dc:	0800868f 	.word	0x0800868f
 80085e0:	0800869d 	.word	0x0800869d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	73fb      	strb	r3, [r7, #15]
      break;
 80085e8:	e06d      	b.n	80086c6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f897 	bl	8008724 <SetLineCoding>
 80085f6:	4603      	mov	r3, r0
 80085f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d104      	bne.n	800860a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2202      	movs	r2, #2
 8008604:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008608:	e058      	b.n	80086bc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d055      	beq.n	80086bc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	2204      	movs	r2, #4
 8008614:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008618:	e050      	b.n	80086bc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	3340      	adds	r3, #64	; 0x40
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f860 	bl	80086e6 <GetLineCoding>
 8008626:	4603      	mov	r3, r0
 8008628:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800862a:	7bbb      	ldrb	r3, [r7, #14]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d126      	bne.n	800867e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008642:	791b      	ldrb	r3, [r3, #4]
 8008644:	429a      	cmp	r2, r3
 8008646:	d13b      	bne.n	80086c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008652:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008654:	429a      	cmp	r2, r3
 8008656:	d133      	bne.n	80086c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008662:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008664:	429a      	cmp	r2, r3
 8008666:	d12b      	bne.n	80086c0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008670:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008672:	429a      	cmp	r2, r3
 8008674:	d124      	bne.n	80086c0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f958 	bl	800892c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800867c:	e020      	b.n	80086c0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800867e:	7bbb      	ldrb	r3, [r7, #14]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d01d      	beq.n	80086c0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	2204      	movs	r2, #4
 8008688:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800868c:	e018      	b.n	80086c0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f867 	bl	8008762 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f8da 	bl	800884e <CDC_ProcessReception>
      break;
 800869a:	e014      	b.n	80086c6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800869c:	2100      	movs	r1, #0
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 ffef 	bl	8009682 <USBH_ClrFeature>
 80086a4:	4603      	mov	r3, r0
 80086a6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10a      	bne.n	80086c4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80086b6:	e005      	b.n	80086c4 <USBH_CDC_Process+0x120>

    default:
      break;
 80086b8:	bf00      	nop
 80086ba:	e004      	b.n	80086c6 <USBH_CDC_Process+0x122>
      break;
 80086bc:	bf00      	nop
 80086be:	e002      	b.n	80086c6 <USBH_CDC_Process+0x122>
      break;
 80086c0:	bf00      	nop
 80086c2:	e000      	b.n	80086c6 <USBH_CDC_Process+0x122>
      break;
 80086c4:	bf00      	nop

  }

  return status;
 80086c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b082      	sub	sp, #8
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	22a1      	movs	r2, #161	; 0xa1
 80086f4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2221      	movs	r2, #33	; 0x21
 80086fa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2207      	movs	r2, #7
 800870c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	2207      	movs	r2, #7
 8008712:	4619      	mov	r1, r3
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f001 fa81 	bl	8009c1c <USBH_CtlReq>
 800871a:	4603      	mov	r3, r0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2221      	movs	r2, #33	; 0x21
 8008732:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2220      	movs	r2, #32
 8008738:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2207      	movs	r2, #7
 800874a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	2207      	movs	r2, #7
 8008750:	4619      	mov	r1, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f001 fa62 	bl	8009c1c <USBH_CtlReq>
 8008758:	4603      	mov	r3, r0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b086      	sub	sp, #24
 8008766:	af02      	add	r7, sp, #8
 8008768:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008774:	2300      	movs	r3, #0
 8008776:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800877e:	2b01      	cmp	r3, #1
 8008780:	d002      	beq.n	8008788 <CDC_ProcessTransmission+0x26>
 8008782:	2b02      	cmp	r3, #2
 8008784:	d023      	beq.n	80087ce <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008786:	e05e      	b.n	8008846 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	8b12      	ldrh	r2, [r2, #24]
 8008790:	4293      	cmp	r3, r2
 8008792:	d90b      	bls.n	80087ac <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	69d9      	ldr	r1, [r3, #28]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	8b1a      	ldrh	r2, [r3, #24]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	7b5b      	ldrb	r3, [r3, #13]
 80087a0:	2001      	movs	r0, #1
 80087a2:	9000      	str	r0, [sp, #0]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f001 fc48 	bl	800a03a <USBH_BulkSendData>
 80087aa:	e00b      	b.n	80087c4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	7b5b      	ldrb	r3, [r3, #13]
 80087ba:	2001      	movs	r0, #1
 80087bc:	9000      	str	r0, [sp, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f001 fc3b 	bl	800a03a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2202      	movs	r2, #2
 80087c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80087cc:	e03b      	b.n	8008846 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	7b5b      	ldrb	r3, [r3, #13]
 80087d2:	4619      	mov	r1, r3
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f001 ff65 	bl	800a6a4 <USBH_LL_GetURBState>
 80087da:	4603      	mov	r3, r0
 80087dc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80087de:	7afb      	ldrb	r3, [r7, #11]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d128      	bne.n	8008836 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	8b12      	ldrh	r2, [r2, #24]
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d90e      	bls.n	800880e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	8b12      	ldrh	r2, [r2, #24]
 80087f8:	1a9a      	subs	r2, r3, r2
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	8b12      	ldrh	r2, [r2, #24]
 8008806:	441a      	add	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	61da      	str	r2, [r3, #28]
 800880c:	e002      	b.n	8008814 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	2b00      	cmp	r3, #0
 800881a:	d004      	beq.n	8008826 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008824:	e00e      	b.n	8008844 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f868 	bl	8008904 <USBH_CDC_TransmitCallback>
      break;
 8008834:	e006      	b.n	8008844 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008836:	7afb      	ldrb	r3, [r7, #11]
 8008838:	2b02      	cmp	r3, #2
 800883a:	d103      	bne.n	8008844 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008844:	bf00      	nop
  }
}
 8008846:	bf00      	nop
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b086      	sub	sp, #24
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800885c:	69db      	ldr	r3, [r3, #28]
 800885e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008860:	2300      	movs	r3, #0
 8008862:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800886a:	2b03      	cmp	r3, #3
 800886c:	d002      	beq.n	8008874 <CDC_ProcessReception+0x26>
 800886e:	2b04      	cmp	r3, #4
 8008870:	d00e      	beq.n	8008890 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008872:	e043      	b.n	80088fc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	6a19      	ldr	r1, [r3, #32]
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	8b5a      	ldrh	r2, [r3, #26]
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	7b1b      	ldrb	r3, [r3, #12]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f001 fbff 	bl	800a084 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	2204      	movs	r2, #4
 800888a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800888e:	e035      	b.n	80088fc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	7b1b      	ldrb	r3, [r3, #12]
 8008894:	4619      	mov	r1, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f001 ff04 	bl	800a6a4 <USBH_LL_GetURBState>
 800889c:	4603      	mov	r3, r0
 800889e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80088a0:	7cfb      	ldrb	r3, [r7, #19]
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d129      	bne.n	80088fa <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	7b1b      	ldrb	r3, [r3, #12]
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f001 fe67 	bl	800a580 <USBH_LL_GetLastXferSize>
 80088b2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d016      	beq.n	80088ec <CDC_ProcessReception+0x9e>
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	8b5b      	ldrh	r3, [r3, #26]
 80088c2:	461a      	mov	r2, r3
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d910      	bls.n	80088ec <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	1ad2      	subs	r2, r2, r3
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	6a1a      	ldr	r2, [r3, #32]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	441a      	add	r2, r3
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	2203      	movs	r2, #3
 80088e6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80088ea:	e006      	b.n	80088fa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 f80f 	bl	8008918 <USBH_CDC_ReceiveCallback>
      break;
 80088fa:	bf00      	nop
  }
}
 80088fc:	bf00      	nop
 80088fe:	3718      	adds	r7, #24
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	4613      	mov	r3, r2
 800894c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008954:	2302      	movs	r3, #2
 8008956:	e029      	b.n	80089ac <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	79fa      	ldrb	r2, [r7, #7]
 800895c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f000 f81f 	bl	80089b4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d003      	beq.n	80089a4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f001 fd2d 	bl	800a404 <USBH_LL_Init>

  return USBH_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80089bc:	2300      	movs	r3, #0
 80089be:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80089c0:	2300      	movs	r3, #0
 80089c2:	60fb      	str	r3, [r7, #12]
 80089c4:	e009      	b.n	80089da <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	33e0      	adds	r3, #224	; 0xe0
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	2200      	movs	r2, #0
 80089d2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	3301      	adds	r3, #1
 80089d8:	60fb      	str	r3, [r7, #12]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2b0f      	cmp	r3, #15
 80089de:	d9f2      	bls.n	80089c6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80089e0:	2300      	movs	r3, #0
 80089e2:	60fb      	str	r3, [r7, #12]
 80089e4:	e009      	b.n	80089fa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	4413      	add	r3, r2
 80089ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80089f0:	2200      	movs	r2, #0
 80089f2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3301      	adds	r3, #1
 80089f8:	60fb      	str	r3, [r7, #12]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a00:	d3f1      	bcc.n	80089e6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2201      	movs	r2, #1
 8008a12:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2240      	movs	r2, #64	; 0x40
 8008a26:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d016      	beq.n	8008a9e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10e      	bne.n	8008a98 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008a80:	1c59      	adds	r1, r3, #1
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	33de      	adds	r3, #222	; 0xde
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	73fb      	strb	r3, [r7, #15]
 8008a96:	e004      	b.n	8008aa2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008a98:	2302      	movs	r3, #2
 8008a9a:	73fb      	strb	r3, [r7, #15]
 8008a9c:	e001      	b.n	8008aa2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008a9e:	2302      	movs	r3, #2
 8008aa0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008ac6:	78fa      	ldrb	r2, [r7, #3]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d204      	bcs.n	8008ad6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	78fa      	ldrb	r2, [r7, #3]
 8008ad0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008ad4:	e001      	b.n	8008ada <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3714      	adds	r7, #20
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b087      	sub	sp, #28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	4608      	mov	r0, r1
 8008af2:	4611      	mov	r1, r2
 8008af4:	461a      	mov	r2, r3
 8008af6:	4603      	mov	r3, r0
 8008af8:	70fb      	strb	r3, [r7, #3]
 8008afa:	460b      	mov	r3, r1
 8008afc:	70bb      	strb	r3, [r7, #2]
 8008afe:	4613      	mov	r3, r2
 8008b00:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008b06:	2300      	movs	r3, #0
 8008b08:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008b10:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b12:	e025      	b.n	8008b60 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008b14:	7dfb      	ldrb	r3, [r7, #23]
 8008b16:	221a      	movs	r2, #26
 8008b18:	fb02 f303 	mul.w	r3, r2, r3
 8008b1c:	3308      	adds	r3, #8
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	4413      	add	r3, r2
 8008b22:	3302      	adds	r3, #2
 8008b24:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	795b      	ldrb	r3, [r3, #5]
 8008b2a:	78fa      	ldrb	r2, [r7, #3]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d002      	beq.n	8008b36 <USBH_FindInterface+0x4e>
 8008b30:	78fb      	ldrb	r3, [r7, #3]
 8008b32:	2bff      	cmp	r3, #255	; 0xff
 8008b34:	d111      	bne.n	8008b5a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008b3a:	78ba      	ldrb	r2, [r7, #2]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d002      	beq.n	8008b46 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b40:	78bb      	ldrb	r3, [r7, #2]
 8008b42:	2bff      	cmp	r3, #255	; 0xff
 8008b44:	d109      	bne.n	8008b5a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b4a:	787a      	ldrb	r2, [r7, #1]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d002      	beq.n	8008b56 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008b50:	787b      	ldrb	r3, [r7, #1]
 8008b52:	2bff      	cmp	r3, #255	; 0xff
 8008b54:	d101      	bne.n	8008b5a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008b56:	7dfb      	ldrb	r3, [r7, #23]
 8008b58:	e006      	b.n	8008b68 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008b5a:	7dfb      	ldrb	r3, [r7, #23]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b60:	7dfb      	ldrb	r3, [r7, #23]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d9d6      	bls.n	8008b14 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008b66:	23ff      	movs	r3, #255	; 0xff
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	371c      	adds	r7, #28
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f001 fc87 	bl	800a490 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008b82:	2101      	movs	r1, #1
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f001 fda0 	bl	800a6ca <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b088      	sub	sp, #32
 8008b98:	af04      	add	r7, sp, #16
 8008b9a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d102      	bne.n	8008bb6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2203      	movs	r2, #3
 8008bb4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	2b0b      	cmp	r3, #11
 8008bbe:	f200 81be 	bhi.w	8008f3e <USBH_Process+0x3aa>
 8008bc2:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <USBH_Process+0x34>)
 8008bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc8:	08008bf9 	.word	0x08008bf9
 8008bcc:	08008c2b 	.word	0x08008c2b
 8008bd0:	08008c93 	.word	0x08008c93
 8008bd4:	08008ed9 	.word	0x08008ed9
 8008bd8:	08008f3f 	.word	0x08008f3f
 8008bdc:	08008d37 	.word	0x08008d37
 8008be0:	08008e7f 	.word	0x08008e7f
 8008be4:	08008d6d 	.word	0x08008d6d
 8008be8:	08008d8d 	.word	0x08008d8d
 8008bec:	08008dad 	.word	0x08008dad
 8008bf0:	08008df1 	.word	0x08008df1
 8008bf4:	08008ec1 	.word	0x08008ec1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 819e 	beq.w	8008f42 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008c0c:	20c8      	movs	r0, #200	; 0xc8
 8008c0e:	f001 fda3 	bl	800a758 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f001 fc99 	bl	800a54a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008c28:	e18b      	b.n	8008f42 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d107      	bne.n	8008c44 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c42:	e18d      	b.n	8008f60 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c4e:	d914      	bls.n	8008c7a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008c56:	3301      	adds	r3, #1
 8008c58:	b2da      	uxtb	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008c66:	2b03      	cmp	r3, #3
 8008c68:	d903      	bls.n	8008c72 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	220d      	movs	r2, #13
 8008c6e:	701a      	strb	r2, [r3, #0]
      break;
 8008c70:	e176      	b.n	8008f60 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	701a      	strb	r2, [r3, #0]
      break;
 8008c78:	e172      	b.n	8008f60 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008c80:	f103 020a 	add.w	r2, r3, #10
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008c8a:	200a      	movs	r0, #10
 8008c8c:	f001 fd64 	bl	800a758 <USBH_Delay>
      break;
 8008c90:	e166      	b.n	8008f60 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d005      	beq.n	8008ca8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ca2:	2104      	movs	r1, #4
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008ca8:	2064      	movs	r0, #100	; 0x64
 8008caa:	f001 fd55 	bl	800a758 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f001 fc24 	bl	800a4fc <USBH_LL_GetSpeed>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2205      	movs	r2, #5
 8008cc2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f001 fa29 	bl	800a11e <USBH_AllocPipe>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	461a      	mov	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008cd4:	2180      	movs	r1, #128	; 0x80
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f001 fa21 	bl	800a11e <USBH_AllocPipe>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	461a      	mov	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	7919      	ldrb	r1, [r3, #4]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008cf8:	b292      	uxth	r2, r2
 8008cfa:	9202      	str	r2, [sp, #8]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	9201      	str	r2, [sp, #4]
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	4603      	mov	r3, r0
 8008d04:	2280      	movs	r2, #128	; 0x80
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f001 f9da 	bl	800a0c0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	7959      	ldrb	r1, [r3, #5]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008d20:	b292      	uxth	r2, r2
 8008d22:	9202      	str	r2, [sp, #8]
 8008d24:	2200      	movs	r2, #0
 8008d26:	9201      	str	r2, [sp, #4]
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f001 f9c6 	bl	800a0c0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d34:	e114      	b.n	8008f60 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f918 	bl	8008f6c <USBH_HandleEnum>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008d40:	7bbb      	ldrb	r3, [r7, #14]
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f040 80fe 	bne.w	8008f46 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d103      	bne.n	8008d64 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2208      	movs	r2, #8
 8008d60:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d62:	e0f0      	b.n	8008f46 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2207      	movs	r2, #7
 8008d68:	701a      	strb	r2, [r3, #0]
      break;
 8008d6a:	e0ec      	b.n	8008f46 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 80e9 	beq.w	8008f4a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d7e:	2101      	movs	r1, #1
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2208      	movs	r2, #8
 8008d88:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008d8a:	e0de      	b.n	8008f4a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fc2c 	bl	80095f4 <USBH_SetCfg>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f040 80d5 	bne.w	8008f4e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2209      	movs	r2, #9
 8008da8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008daa:	e0d0      	b.n	8008f4e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008db2:	f003 0320 	and.w	r3, r3, #32
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d016      	beq.n	8008de8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008dba:	2101      	movs	r1, #1
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fc3c 	bl	800963a <USBH_SetFeature>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008dc6:	7bbb      	ldrb	r3, [r7, #14]
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d103      	bne.n	8008dd6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	220a      	movs	r2, #10
 8008dd2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008dd4:	e0bd      	b.n	8008f52 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8008dd6:	7bbb      	ldrb	r3, [r7, #14]
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	f040 80b9 	bne.w	8008f52 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	220a      	movs	r2, #10
 8008de4:	701a      	strb	r2, [r3, #0]
      break;
 8008de6:	e0b4      	b.n	8008f52 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	220a      	movs	r2, #10
 8008dec:	701a      	strb	r2, [r3, #0]
      break;
 8008dee:	e0b0      	b.n	8008f52 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 80ad 	beq.w	8008f56 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008e04:	2300      	movs	r3, #0
 8008e06:	73fb      	strb	r3, [r7, #15]
 8008e08:	e016      	b.n	8008e38 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008e0a:	7bfa      	ldrb	r2, [r7, #15]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	32de      	adds	r2, #222	; 0xde
 8008e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e14:	791a      	ldrb	r2, [r3, #4]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d108      	bne.n	8008e32 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008e20:	7bfa      	ldrb	r2, [r7, #15]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	32de      	adds	r2, #222	; 0xde
 8008e26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008e30:	e005      	b.n	8008e3e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
 8008e34:	3301      	adds	r3, #1
 8008e36:	73fb      	strb	r3, [r7, #15]
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d0e5      	beq.n	8008e0a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d016      	beq.n	8008e76 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	4798      	blx	r3
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d109      	bne.n	8008e6e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2206      	movs	r2, #6
 8008e5e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e66:	2103      	movs	r1, #3
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e6c:	e073      	b.n	8008f56 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	220d      	movs	r2, #13
 8008e72:	701a      	strb	r2, [r3, #0]
      break;
 8008e74:	e06f      	b.n	8008f56 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	220d      	movs	r2, #13
 8008e7a:	701a      	strb	r2, [r3, #0]
      break;
 8008e7c:	e06b      	b.n	8008f56 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d017      	beq.n	8008eb8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	4798      	blx	r3
 8008e94:	4603      	mov	r3, r0
 8008e96:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008e98:	7bbb      	ldrb	r3, [r7, #14]
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d103      	bne.n	8008ea8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	220b      	movs	r2, #11
 8008ea4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ea6:	e058      	b.n	8008f5a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008ea8:	7bbb      	ldrb	r3, [r7, #14]
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d154      	bne.n	8008f5a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	220d      	movs	r2, #13
 8008eb4:	701a      	strb	r2, [r3, #0]
      break;
 8008eb6:	e050      	b.n	8008f5a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	220d      	movs	r2, #13
 8008ebc:	701a      	strb	r2, [r3, #0]
      break;
 8008ebe:	e04c      	b.n	8008f5a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d049      	beq.n	8008f5e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	4798      	blx	r3
      }
      break;
 8008ed6:	e042      	b.n	8008f5e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f7ff fd67 	bl	80089b4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d009      	beq.n	8008f04 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d005      	beq.n	8008f1a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f14:	2105      	movs	r1, #5
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d107      	bne.n	8008f36 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7ff fe20 	bl	8008b74 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f34:	e014      	b.n	8008f60 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f001 faaa 	bl	800a490 <USBH_LL_Start>
      break;
 8008f3c:	e010      	b.n	8008f60 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008f3e:	bf00      	nop
 8008f40:	e00e      	b.n	8008f60 <USBH_Process+0x3cc>
      break;
 8008f42:	bf00      	nop
 8008f44:	e00c      	b.n	8008f60 <USBH_Process+0x3cc>
      break;
 8008f46:	bf00      	nop
 8008f48:	e00a      	b.n	8008f60 <USBH_Process+0x3cc>
    break;
 8008f4a:	bf00      	nop
 8008f4c:	e008      	b.n	8008f60 <USBH_Process+0x3cc>
      break;
 8008f4e:	bf00      	nop
 8008f50:	e006      	b.n	8008f60 <USBH_Process+0x3cc>
      break;
 8008f52:	bf00      	nop
 8008f54:	e004      	b.n	8008f60 <USBH_Process+0x3cc>
      break;
 8008f56:	bf00      	nop
 8008f58:	e002      	b.n	8008f60 <USBH_Process+0x3cc>
      break;
 8008f5a:	bf00      	nop
 8008f5c:	e000      	b.n	8008f60 <USBH_Process+0x3cc>
      break;
 8008f5e:	bf00      	nop
  }
  return USBH_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop

08008f6c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af04      	add	r7, sp, #16
 8008f72:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008f74:	2301      	movs	r3, #1
 8008f76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	785b      	ldrb	r3, [r3, #1]
 8008f80:	2b07      	cmp	r3, #7
 8008f82:	f200 81c1 	bhi.w	8009308 <USBH_HandleEnum+0x39c>
 8008f86:	a201      	add	r2, pc, #4	; (adr r2, 8008f8c <USBH_HandleEnum+0x20>)
 8008f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8c:	08008fad 	.word	0x08008fad
 8008f90:	0800906b 	.word	0x0800906b
 8008f94:	080090d5 	.word	0x080090d5
 8008f98:	08009163 	.word	0x08009163
 8008f9c:	080091cd 	.word	0x080091cd
 8008fa0:	0800923d 	.word	0x0800923d
 8008fa4:	08009283 	.word	0x08009283
 8008fa8:	080092c9 	.word	0x080092c9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008fac:	2108      	movs	r1, #8
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fa50 	bl	8009454 <USBH_Get_DevDesc>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008fb8:	7bbb      	ldrb	r3, [r7, #14]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d130      	bne.n	8009020 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	7919      	ldrb	r1, [r3, #4]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008fe2:	b292      	uxth	r2, r2
 8008fe4:	9202      	str	r2, [sp, #8]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	9201      	str	r2, [sp, #4]
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	4603      	mov	r3, r0
 8008fee:	2280      	movs	r2, #128	; 0x80
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f001 f865 	bl	800a0c0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	7959      	ldrb	r1, [r3, #5]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800900a:	b292      	uxth	r2, r2
 800900c:	9202      	str	r2, [sp, #8]
 800900e:	2200      	movs	r2, #0
 8009010:	9201      	str	r2, [sp, #4]
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	4603      	mov	r3, r0
 8009016:	2200      	movs	r2, #0
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f001 f851 	bl	800a0c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800901e:	e175      	b.n	800930c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009020:	7bbb      	ldrb	r3, [r7, #14]
 8009022:	2b03      	cmp	r3, #3
 8009024:	f040 8172 	bne.w	800930c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800902e:	3301      	adds	r3, #1
 8009030:	b2da      	uxtb	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800903e:	2b03      	cmp	r3, #3
 8009040:	d903      	bls.n	800904a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	220d      	movs	r2, #13
 8009046:	701a      	strb	r2, [r3, #0]
      break;
 8009048:	e160      	b.n	800930c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	795b      	ldrb	r3, [r3, #5]
 800904e:	4619      	mov	r1, r3
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f001 f885 	bl	800a160 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	791b      	ldrb	r3, [r3, #4]
 800905a:	4619      	mov	r1, r3
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f001 f87f 	bl	800a160 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	701a      	strb	r2, [r3, #0]
      break;
 8009068:	e150      	b.n	800930c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800906a:	2112      	movs	r1, #18
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f9f1 	bl	8009454 <USBH_Get_DevDesc>
 8009072:	4603      	mov	r3, r0
 8009074:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009076:	7bbb      	ldrb	r3, [r7, #14]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d103      	bne.n	8009084 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2202      	movs	r2, #2
 8009080:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009082:	e145      	b.n	8009310 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009084:	7bbb      	ldrb	r3, [r7, #14]
 8009086:	2b03      	cmp	r3, #3
 8009088:	f040 8142 	bne.w	8009310 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009092:	3301      	adds	r3, #1
 8009094:	b2da      	uxtb	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090a2:	2b03      	cmp	r3, #3
 80090a4:	d903      	bls.n	80090ae <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	220d      	movs	r2, #13
 80090aa:	701a      	strb	r2, [r3, #0]
      break;
 80090ac:	e130      	b.n	8009310 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	795b      	ldrb	r3, [r3, #5]
 80090b2:	4619      	mov	r1, r3
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f001 f853 	bl	800a160 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	791b      	ldrb	r3, [r3, #4]
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f001 f84d 	bl	800a160 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	701a      	strb	r2, [r3, #0]
      break;
 80090d2:	e11d      	b.n	8009310 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80090d4:	2101      	movs	r1, #1
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fa68 	bl	80095ac <USBH_SetAddress>
 80090dc:	4603      	mov	r3, r0
 80090de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80090e0:	7bbb      	ldrb	r3, [r7, #14]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d132      	bne.n	800914c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80090e6:	2002      	movs	r0, #2
 80090e8:	f001 fb36 	bl	800a758 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2203      	movs	r2, #3
 80090f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	7919      	ldrb	r1, [r3, #4]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800910e:	b292      	uxth	r2, r2
 8009110:	9202      	str	r2, [sp, #8]
 8009112:	2200      	movs	r2, #0
 8009114:	9201      	str	r2, [sp, #4]
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	4603      	mov	r3, r0
 800911a:	2280      	movs	r2, #128	; 0x80
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 ffcf 	bl	800a0c0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	7959      	ldrb	r1, [r3, #5]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009136:	b292      	uxth	r2, r2
 8009138:	9202      	str	r2, [sp, #8]
 800913a:	2200      	movs	r2, #0
 800913c:	9201      	str	r2, [sp, #4]
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	4603      	mov	r3, r0
 8009142:	2200      	movs	r2, #0
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 ffbb 	bl	800a0c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800914a:	e0e3      	b.n	8009314 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800914c:	7bbb      	ldrb	r3, [r7, #14]
 800914e:	2b03      	cmp	r3, #3
 8009150:	f040 80e0 	bne.w	8009314 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	220d      	movs	r2, #13
 8009158:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	705a      	strb	r2, [r3, #1]
      break;
 8009160:	e0d8      	b.n	8009314 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009162:	2109      	movs	r1, #9
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f99d 	bl	80094a4 <USBH_Get_CfgDesc>
 800916a:	4603      	mov	r3, r0
 800916c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800916e:	7bbb      	ldrb	r3, [r7, #14]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d103      	bne.n	800917c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2204      	movs	r2, #4
 8009178:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800917a:	e0cd      	b.n	8009318 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800917c:	7bbb      	ldrb	r3, [r7, #14]
 800917e:	2b03      	cmp	r3, #3
 8009180:	f040 80ca 	bne.w	8009318 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800918a:	3301      	adds	r3, #1
 800918c:	b2da      	uxtb	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800919a:	2b03      	cmp	r3, #3
 800919c:	d903      	bls.n	80091a6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	220d      	movs	r2, #13
 80091a2:	701a      	strb	r2, [r3, #0]
      break;
 80091a4:	e0b8      	b.n	8009318 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	795b      	ldrb	r3, [r3, #5]
 80091aa:	4619      	mov	r1, r3
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 ffd7 	bl	800a160 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	791b      	ldrb	r3, [r3, #4]
 80091b6:	4619      	mov	r1, r3
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 ffd1 	bl	800a160 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	701a      	strb	r2, [r3, #0]
      break;
 80091ca:	e0a5      	b.n	8009318 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80091d2:	4619      	mov	r1, r3
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 f965 	bl	80094a4 <USBH_Get_CfgDesc>
 80091da:	4603      	mov	r3, r0
 80091dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80091de:	7bbb      	ldrb	r3, [r7, #14]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d103      	bne.n	80091ec <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2205      	movs	r2, #5
 80091e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80091ea:	e097      	b.n	800931c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091ec:	7bbb      	ldrb	r3, [r7, #14]
 80091ee:	2b03      	cmp	r3, #3
 80091f0:	f040 8094 	bne.w	800931c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80091fa:	3301      	adds	r3, #1
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800920a:	2b03      	cmp	r3, #3
 800920c:	d903      	bls.n	8009216 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	220d      	movs	r2, #13
 8009212:	701a      	strb	r2, [r3, #0]
      break;
 8009214:	e082      	b.n	800931c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	795b      	ldrb	r3, [r3, #5]
 800921a:	4619      	mov	r1, r3
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 ff9f 	bl	800a160 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	791b      	ldrb	r3, [r3, #4]
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 ff99 	bl	800a160 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	701a      	strb	r2, [r3, #0]
      break;
 800923a:	e06f      	b.n	800931c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009242:	2b00      	cmp	r3, #0
 8009244:	d019      	beq.n	800927a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009252:	23ff      	movs	r3, #255	; 0xff
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f949 	bl	80094ec <USBH_Get_StringDesc>
 800925a:	4603      	mov	r3, r0
 800925c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800925e:	7bbb      	ldrb	r3, [r7, #14]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d103      	bne.n	800926c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2206      	movs	r2, #6
 8009268:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800926a:	e059      	b.n	8009320 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	2b03      	cmp	r3, #3
 8009270:	d156      	bne.n	8009320 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2206      	movs	r2, #6
 8009276:	705a      	strb	r2, [r3, #1]
      break;
 8009278:	e052      	b.n	8009320 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2206      	movs	r2, #6
 800927e:	705a      	strb	r2, [r3, #1]
      break;
 8009280:	e04e      	b.n	8009320 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009288:	2b00      	cmp	r3, #0
 800928a:	d019      	beq.n	80092c0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009298:	23ff      	movs	r3, #255	; 0xff
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f926 	bl	80094ec <USBH_Get_StringDesc>
 80092a0:	4603      	mov	r3, r0
 80092a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80092a4:	7bbb      	ldrb	r3, [r7, #14]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d103      	bne.n	80092b2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2207      	movs	r2, #7
 80092ae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80092b0:	e038      	b.n	8009324 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092b2:	7bbb      	ldrb	r3, [r7, #14]
 80092b4:	2b03      	cmp	r3, #3
 80092b6:	d135      	bne.n	8009324 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2207      	movs	r2, #7
 80092bc:	705a      	strb	r2, [r3, #1]
      break;
 80092be:	e031      	b.n	8009324 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2207      	movs	r2, #7
 80092c4:	705a      	strb	r2, [r3, #1]
      break;
 80092c6:	e02d      	b.n	8009324 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d017      	beq.n	8009302 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80092de:	23ff      	movs	r3, #255	; 0xff
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f903 	bl	80094ec <USBH_Get_StringDesc>
 80092e6:	4603      	mov	r3, r0
 80092e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80092ea:	7bbb      	ldrb	r3, [r7, #14]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d102      	bne.n	80092f6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80092f4:	e018      	b.n	8009328 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092f6:	7bbb      	ldrb	r3, [r7, #14]
 80092f8:	2b03      	cmp	r3, #3
 80092fa:	d115      	bne.n	8009328 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009300:	e012      	b.n	8009328 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	73fb      	strb	r3, [r7, #15]
      break;
 8009306:	e00f      	b.n	8009328 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009308:	bf00      	nop
 800930a:	e00e      	b.n	800932a <USBH_HandleEnum+0x3be>
      break;
 800930c:	bf00      	nop
 800930e:	e00c      	b.n	800932a <USBH_HandleEnum+0x3be>
      break;
 8009310:	bf00      	nop
 8009312:	e00a      	b.n	800932a <USBH_HandleEnum+0x3be>
      break;
 8009314:	bf00      	nop
 8009316:	e008      	b.n	800932a <USBH_HandleEnum+0x3be>
      break;
 8009318:	bf00      	nop
 800931a:	e006      	b.n	800932a <USBH_HandleEnum+0x3be>
      break;
 800931c:	bf00      	nop
 800931e:	e004      	b.n	800932a <USBH_HandleEnum+0x3be>
      break;
 8009320:	bf00      	nop
 8009322:	e002      	b.n	800932a <USBH_HandleEnum+0x3be>
      break;
 8009324:	bf00      	nop
 8009326:	e000      	b.n	800932a <USBH_HandleEnum+0x3be>
      break;
 8009328:	bf00      	nop
  }
  return Status;
 800932a:	7bfb      	ldrb	r3, [r7, #15]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	683a      	ldr	r2, [r7, #0]
 8009342:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009346:	bf00      	nop
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b082      	sub	sp, #8
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009360:	1c5a      	adds	r2, r3, #1
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 f804 	bl	8009376 <USBH_HandleSof>
}
 800936e:	bf00      	nop
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b082      	sub	sp, #8
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	b2db      	uxtb	r3, r3
 8009384:	2b0b      	cmp	r3, #11
 8009386:	d10a      	bne.n	800939e <USBH_HandleSof+0x28>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800938e:	2b00      	cmp	r3, #0
 8009390:	d005      	beq.n	800939e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009398:	699b      	ldr	r3, [r3, #24]
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	4798      	blx	r3
  }
}
 800939e:	bf00      	nop
 80093a0:	3708      	adds	r7, #8
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80093a6:	b480      	push	{r7}
 80093a8:	b083      	sub	sp, #12
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2201      	movs	r2, #1
 80093b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80093b6:	bf00      	nop
}
 80093b8:	370c      	adds	r7, #12
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b083      	sub	sp, #12
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80093d2:	bf00      	nop
}
 80093d4:	370c      	adds	r7, #12
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr

080093de <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80093de:	b480      	push	{r7}
 80093e0:	b083      	sub	sp, #12
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2201      	movs	r2, #1
 80093ea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f001 f84a 	bl	800a4c6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	791b      	ldrb	r3, [r3, #4]
 8009436:	4619      	mov	r1, r3
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fe91 	bl	800a160 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	795b      	ldrb	r3, [r3, #5]
 8009442:	4619      	mov	r1, r3
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 fe8b 	bl	800a160 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b086      	sub	sp, #24
 8009458:	af02      	add	r7, sp, #8
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	460b      	mov	r3, r1
 800945e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009466:	78fb      	ldrb	r3, [r7, #3]
 8009468:	b29b      	uxth	r3, r3
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	4613      	mov	r3, r2
 800946e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009472:	2100      	movs	r1, #0
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f864 	bl	8009542 <USBH_GetDescriptor>
 800947a:	4603      	mov	r3, r0
 800947c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800947e:	7bfb      	ldrb	r3, [r7, #15]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10a      	bne.n	800949a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f203 3026 	addw	r0, r3, #806	; 0x326
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009490:	78fa      	ldrb	r2, [r7, #3]
 8009492:	b292      	uxth	r2, r2
 8009494:	4619      	mov	r1, r3
 8009496:	f000 f918 	bl	80096ca <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800949a:	7bfb      	ldrb	r3, [r7, #15]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b086      	sub	sp, #24
 80094a8:	af02      	add	r7, sp, #8
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	460b      	mov	r3, r1
 80094ae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	331c      	adds	r3, #28
 80094b4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80094b6:	887b      	ldrh	r3, [r7, #2]
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094c0:	2100      	movs	r1, #0
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f83d 	bl	8009542 <USBH_GetDescriptor>
 80094c8:	4603      	mov	r3, r0
 80094ca:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80094cc:	7bfb      	ldrb	r3, [r7, #15]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d107      	bne.n	80094e2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80094d2:	887b      	ldrh	r3, [r7, #2]
 80094d4:	461a      	mov	r2, r3
 80094d6:	68b9      	ldr	r1, [r7, #8]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 f987 	bl	80097ec <USBH_ParseCfgDesc>
 80094de:	4603      	mov	r3, r0
 80094e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b088      	sub	sp, #32
 80094f0:	af02      	add	r7, sp, #8
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	607a      	str	r2, [r7, #4]
 80094f6:	461a      	mov	r2, r3
 80094f8:	460b      	mov	r3, r1
 80094fa:	72fb      	strb	r3, [r7, #11]
 80094fc:	4613      	mov	r3, r2
 80094fe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009500:	7afb      	ldrb	r3, [r7, #11]
 8009502:	b29b      	uxth	r3, r3
 8009504:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009508:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009510:	893b      	ldrh	r3, [r7, #8]
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	460b      	mov	r3, r1
 8009516:	2100      	movs	r1, #0
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f000 f812 	bl	8009542 <USBH_GetDescriptor>
 800951e:	4603      	mov	r3, r0
 8009520:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009522:	7dfb      	ldrb	r3, [r7, #23]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d107      	bne.n	8009538 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800952e:	893a      	ldrh	r2, [r7, #8]
 8009530:	6879      	ldr	r1, [r7, #4]
 8009532:	4618      	mov	r0, r3
 8009534:	f000 fb24 	bl	8009b80 <USBH_ParseStringDesc>
  }

  return status;
 8009538:	7dfb      	ldrb	r3, [r7, #23]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3718      	adds	r7, #24
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b084      	sub	sp, #16
 8009546:	af00      	add	r7, sp, #0
 8009548:	60f8      	str	r0, [r7, #12]
 800954a:	607b      	str	r3, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	72fb      	strb	r3, [r7, #11]
 8009550:	4613      	mov	r3, r2
 8009552:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	789b      	ldrb	r3, [r3, #2]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d11c      	bne.n	8009596 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800955c:	7afb      	ldrb	r3, [r7, #11]
 800955e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009562:	b2da      	uxtb	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2206      	movs	r2, #6
 800956c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	893a      	ldrh	r2, [r7, #8]
 8009572:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009574:	893b      	ldrh	r3, [r7, #8]
 8009576:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800957a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800957e:	d104      	bne.n	800958a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f240 4209 	movw	r2, #1033	; 0x409
 8009586:	829a      	strh	r2, [r3, #20]
 8009588:	e002      	b.n	8009590 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	8b3a      	ldrh	r2, [r7, #24]
 8009594:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009596:	8b3b      	ldrh	r3, [r7, #24]
 8009598:	461a      	mov	r2, r3
 800959a:	6879      	ldr	r1, [r7, #4]
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 fb3d 	bl	8009c1c <USBH_CtlReq>
 80095a2:	4603      	mov	r3, r0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	460b      	mov	r3, r1
 80095b6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	789b      	ldrb	r3, [r3, #2]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d10f      	bne.n	80095e0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2205      	movs	r2, #5
 80095ca:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80095cc:	78fb      	ldrb	r3, [r7, #3]
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80095e0:	2200      	movs	r2, #0
 80095e2:	2100      	movs	r1, #0
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fb19 	bl	8009c1c <USBH_CtlReq>
 80095ea:	4603      	mov	r3, r0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	460b      	mov	r3, r1
 80095fe:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	789b      	ldrb	r3, [r3, #2]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d10e      	bne.n	8009626 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2209      	movs	r2, #9
 8009612:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	887a      	ldrh	r2, [r7, #2]
 8009618:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009626:	2200      	movs	r2, #0
 8009628:	2100      	movs	r1, #0
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 faf6 	bl	8009c1c <USBH_CtlReq>
 8009630:	4603      	mov	r3, r0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b082      	sub	sp, #8
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	460b      	mov	r3, r1
 8009644:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	789b      	ldrb	r3, [r3, #2]
 800964a:	2b01      	cmp	r3, #1
 800964c:	d10f      	bne.n	800966e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2203      	movs	r2, #3
 8009658:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800965a:	78fb      	ldrb	r3, [r7, #3]
 800965c:	b29a      	uxth	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800966e:	2200      	movs	r2, #0
 8009670:	2100      	movs	r1, #0
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 fad2 	bl	8009c1c <USBH_CtlReq>
 8009678:	4603      	mov	r3, r0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b082      	sub	sp, #8
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	460b      	mov	r3, r1
 800968c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	789b      	ldrb	r3, [r3, #2]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d10f      	bne.n	80096b6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2202      	movs	r2, #2
 800969a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80096a8:	78fb      	ldrb	r3, [r7, #3]
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80096b6:	2200      	movs	r2, #0
 80096b8:	2100      	movs	r1, #0
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 faae 	bl	8009c1c <USBH_CtlReq>
 80096c0:	4603      	mov	r3, r0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b085      	sub	sp, #20
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	60f8      	str	r0, [r7, #12]
 80096d2:	60b9      	str	r1, [r7, #8]
 80096d4:	4613      	mov	r3, r2
 80096d6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	781a      	ldrb	r2, [r3, #0]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	785a      	ldrb	r2, [r3, #1]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	3302      	adds	r3, #2
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	3303      	adds	r3, #3
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	021b      	lsls	r3, r3, #8
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	4313      	orrs	r3, r2
 80096fe:	b29a      	uxth	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	791a      	ldrb	r2, [r3, #4]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	795a      	ldrb	r2, [r3, #5]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	799a      	ldrb	r2, [r3, #6]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	79da      	ldrb	r2, [r3, #7]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	79db      	ldrb	r3, [r3, #7]
 8009728:	2b20      	cmp	r3, #32
 800972a:	dc11      	bgt.n	8009750 <USBH_ParseDevDesc+0x86>
 800972c:	2b08      	cmp	r3, #8
 800972e:	db16      	blt.n	800975e <USBH_ParseDevDesc+0x94>
 8009730:	3b08      	subs	r3, #8
 8009732:	2201      	movs	r2, #1
 8009734:	fa02 f303 	lsl.w	r3, r2, r3
 8009738:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800973c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009740:	2b00      	cmp	r3, #0
 8009742:	bf14      	ite	ne
 8009744:	2301      	movne	r3, #1
 8009746:	2300      	moveq	r3, #0
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b00      	cmp	r3, #0
 800974c:	d102      	bne.n	8009754 <USBH_ParseDevDesc+0x8a>
 800974e:	e006      	b.n	800975e <USBH_ParseDevDesc+0x94>
 8009750:	2b40      	cmp	r3, #64	; 0x40
 8009752:	d104      	bne.n	800975e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	79da      	ldrb	r2, [r3, #7]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	71da      	strb	r2, [r3, #7]
      break;
 800975c:	e003      	b.n	8009766 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2240      	movs	r2, #64	; 0x40
 8009762:	71da      	strb	r2, [r3, #7]
      break;
 8009764:	bf00      	nop
  }

  if (length > 8U)
 8009766:	88fb      	ldrh	r3, [r7, #6]
 8009768:	2b08      	cmp	r3, #8
 800976a:	d939      	bls.n	80097e0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	3308      	adds	r3, #8
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	b29a      	uxth	r2, r3
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	3309      	adds	r3, #9
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	b29b      	uxth	r3, r3
 800977c:	021b      	lsls	r3, r3, #8
 800977e:	b29b      	uxth	r3, r3
 8009780:	4313      	orrs	r3, r2
 8009782:	b29a      	uxth	r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	330a      	adds	r3, #10
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	b29a      	uxth	r2, r3
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	330b      	adds	r3, #11
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	b29b      	uxth	r3, r3
 8009798:	021b      	lsls	r3, r3, #8
 800979a:	b29b      	uxth	r3, r3
 800979c:	4313      	orrs	r3, r2
 800979e:	b29a      	uxth	r2, r3
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	330c      	adds	r3, #12
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	330d      	adds	r3, #13
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	021b      	lsls	r3, r3, #8
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	4313      	orrs	r3, r2
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	7b9a      	ldrb	r2, [r3, #14]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	7bda      	ldrb	r2, [r3, #15]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	7c1a      	ldrb	r2, [r3, #16]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	7c5a      	ldrb	r2, [r3, #17]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	745a      	strb	r2, [r3, #17]
  }
}
 80097e0:	bf00      	nop
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b08c      	sub	sp, #48	; 0x30
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	4613      	mov	r3, r2
 80097f8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009800:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009802:	2300      	movs	r3, #0
 8009804:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800980c:	2300      	movs	r3, #0
 800980e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009812:	2300      	movs	r3, #0
 8009814:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	781a      	ldrb	r2, [r3, #0]
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	785a      	ldrb	r2, [r3, #1]
 8009828:	6a3b      	ldr	r3, [r7, #32]
 800982a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	3302      	adds	r3, #2
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	b29a      	uxth	r2, r3
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	3303      	adds	r3, #3
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	b29b      	uxth	r3, r3
 800983c:	021b      	lsls	r3, r3, #8
 800983e:	b29b      	uxth	r3, r3
 8009840:	4313      	orrs	r3, r2
 8009842:	b29b      	uxth	r3, r3
 8009844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009848:	bf28      	it	cs
 800984a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800984e:	b29a      	uxth	r2, r3
 8009850:	6a3b      	ldr	r3, [r7, #32]
 8009852:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	791a      	ldrb	r2, [r3, #4]
 8009858:	6a3b      	ldr	r3, [r7, #32]
 800985a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	795a      	ldrb	r2, [r3, #5]
 8009860:	6a3b      	ldr	r3, [r7, #32]
 8009862:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	799a      	ldrb	r2, [r3, #6]
 8009868:	6a3b      	ldr	r3, [r7, #32]
 800986a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	79da      	ldrb	r2, [r3, #7]
 8009870:	6a3b      	ldr	r3, [r7, #32]
 8009872:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	7a1a      	ldrb	r2, [r3, #8]
 8009878:	6a3b      	ldr	r3, [r7, #32]
 800987a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800987c:	6a3b      	ldr	r3, [r7, #32]
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	2b09      	cmp	r3, #9
 8009882:	d002      	beq.n	800988a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	2209      	movs	r2, #9
 8009888:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800988a:	88fb      	ldrh	r3, [r7, #6]
 800988c:	2b09      	cmp	r3, #9
 800988e:	f240 809d 	bls.w	80099cc <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8009892:	2309      	movs	r3, #9
 8009894:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009896:	2300      	movs	r3, #0
 8009898:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800989a:	e081      	b.n	80099a0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800989c:	f107 0316 	add.w	r3, r7, #22
 80098a0:	4619      	mov	r1, r3
 80098a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098a4:	f000 f99f 	bl	8009be6 <USBH_GetNextDesc>
 80098a8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80098aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ac:	785b      	ldrb	r3, [r3, #1]
 80098ae:	2b04      	cmp	r3, #4
 80098b0:	d176      	bne.n	80099a0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80098b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	2b09      	cmp	r3, #9
 80098b8:	d002      	beq.n	80098c0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80098ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098bc:	2209      	movs	r2, #9
 80098be:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80098c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098c4:	221a      	movs	r2, #26
 80098c6:	fb02 f303 	mul.w	r3, r2, r3
 80098ca:	3308      	adds	r3, #8
 80098cc:	6a3a      	ldr	r2, [r7, #32]
 80098ce:	4413      	add	r3, r2
 80098d0:	3302      	adds	r3, #2
 80098d2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80098d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098d6:	69f8      	ldr	r0, [r7, #28]
 80098d8:	f000 f87e 	bl	80099d8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80098dc:	2300      	movs	r3, #0
 80098de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80098e2:	2300      	movs	r3, #0
 80098e4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80098e6:	e043      	b.n	8009970 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80098e8:	f107 0316 	add.w	r3, r7, #22
 80098ec:	4619      	mov	r1, r3
 80098ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098f0:	f000 f979 	bl	8009be6 <USBH_GetNextDesc>
 80098f4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80098f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f8:	785b      	ldrb	r3, [r3, #1]
 80098fa:	2b05      	cmp	r3, #5
 80098fc:	d138      	bne.n	8009970 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	795b      	ldrb	r3, [r3, #5]
 8009902:	2b01      	cmp	r3, #1
 8009904:	d10f      	bne.n	8009926 <USBH_ParseCfgDesc+0x13a>
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	799b      	ldrb	r3, [r3, #6]
 800990a:	2b02      	cmp	r3, #2
 800990c:	d10b      	bne.n	8009926 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	79db      	ldrb	r3, [r3, #7]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10f      	bne.n	8009936 <USBH_ParseCfgDesc+0x14a>
 8009916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	2b09      	cmp	r3, #9
 800991c:	d00b      	beq.n	8009936 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800991e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009920:	2209      	movs	r2, #9
 8009922:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009924:	e007      	b.n	8009936 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8009926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	2b07      	cmp	r3, #7
 800992c:	d004      	beq.n	8009938 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800992e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009930:	2207      	movs	r2, #7
 8009932:	701a      	strb	r2, [r3, #0]
 8009934:	e000      	b.n	8009938 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009936:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800993c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009940:	3201      	adds	r2, #1
 8009942:	00d2      	lsls	r2, r2, #3
 8009944:	211a      	movs	r1, #26
 8009946:	fb01 f303 	mul.w	r3, r1, r3
 800994a:	4413      	add	r3, r2
 800994c:	3308      	adds	r3, #8
 800994e:	6a3a      	ldr	r2, [r7, #32]
 8009950:	4413      	add	r3, r2
 8009952:	3304      	adds	r3, #4
 8009954:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009958:	69b9      	ldr	r1, [r7, #24]
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f000 f86b 	bl	8009a36 <USBH_ParseEPDesc>
 8009960:	4603      	mov	r3, r0
 8009962:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8009966:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800996a:	3301      	adds	r3, #1
 800996c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	791b      	ldrb	r3, [r3, #4]
 8009974:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009978:	429a      	cmp	r2, r3
 800997a:	d204      	bcs.n	8009986 <USBH_ParseCfgDesc+0x19a>
 800997c:	6a3b      	ldr	r3, [r7, #32]
 800997e:	885a      	ldrh	r2, [r3, #2]
 8009980:	8afb      	ldrh	r3, [r7, #22]
 8009982:	429a      	cmp	r2, r3
 8009984:	d8b0      	bhi.n	80098e8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	791b      	ldrb	r3, [r3, #4]
 800998a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800998e:	429a      	cmp	r2, r3
 8009990:	d201      	bcs.n	8009996 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8009992:	2303      	movs	r3, #3
 8009994:	e01c      	b.n	80099d0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8009996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800999a:	3301      	adds	r3, #1
 800999c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80099a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d805      	bhi.n	80099b4 <USBH_ParseCfgDesc+0x1c8>
 80099a8:	6a3b      	ldr	r3, [r7, #32]
 80099aa:	885a      	ldrh	r2, [r3, #2]
 80099ac:	8afb      	ldrh	r3, [r7, #22]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	f63f af74 	bhi.w	800989c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	791b      	ldrb	r3, [r3, #4]
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	bf28      	it	cs
 80099bc:	2302      	movcs	r3, #2
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d201      	bcs.n	80099cc <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80099c8:	2303      	movs	r3, #3
 80099ca:	e001      	b.n	80099d0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80099cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3730      	adds	r7, #48	; 0x30
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	781a      	ldrb	r2, [r3, #0]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	785a      	ldrb	r2, [r3, #1]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	789a      	ldrb	r2, [r3, #2]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	78da      	ldrb	r2, [r3, #3]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	791a      	ldrb	r2, [r3, #4]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	795a      	ldrb	r2, [r3, #5]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	799a      	ldrb	r2, [r3, #6]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	79da      	ldrb	r2, [r3, #7]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	7a1a      	ldrb	r2, [r3, #8]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	721a      	strb	r2, [r3, #8]
}
 8009a2a:	bf00      	nop
 8009a2c:	370c      	adds	r7, #12
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr

08009a36 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8009a36:	b480      	push	{r7}
 8009a38:	b087      	sub	sp, #28
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	60f8      	str	r0, [r7, #12]
 8009a3e:	60b9      	str	r1, [r7, #8]
 8009a40:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	781a      	ldrb	r2, [r3, #0]
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	785a      	ldrb	r2, [r3, #1]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	789a      	ldrb	r2, [r3, #2]
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	78da      	ldrb	r2, [r3, #3]
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	3304      	adds	r3, #4
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	3305      	adds	r3, #5
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	021b      	lsls	r3, r3, #8
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	799a      	ldrb	r2, [r3, #6]
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	889b      	ldrh	r3, [r3, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d102      	bne.n	8009a98 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8009a92:	2303      	movs	r3, #3
 8009a94:	75fb      	strb	r3, [r7, #23]
 8009a96:	e033      	b.n	8009b00 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	889b      	ldrh	r3, [r3, #4]
 8009a9c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009aa0:	f023 0307 	bic.w	r3, r3, #7
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	889b      	ldrh	r3, [r3, #4]
 8009aae:	b21a      	sxth	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	3304      	adds	r3, #4
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	b299      	uxth	r1, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	3305      	adds	r3, #5
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	021b      	lsls	r3, r3, #8
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	430b      	orrs	r3, r1
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d110      	bne.n	8009af2 <USBH_ParseEPDesc+0xbc>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	3304      	adds	r3, #4
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	b299      	uxth	r1, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	3305      	adds	r3, #5
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	021b      	lsls	r3, r3, #8
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	430b      	orrs	r3, r1
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	b21b      	sxth	r3, r3
 8009aea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009aee:	b21b      	sxth	r3, r3
 8009af0:	e001      	b.n	8009af6 <USBH_ParseEPDesc+0xc0>
 8009af2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009af6:	4313      	orrs	r3, r2
 8009af8:	b21b      	sxth	r3, r3
 8009afa:	b29a      	uxth	r2, r3
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d116      	bne.n	8009b38 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	78db      	ldrb	r3, [r3, #3]
 8009b0e:	f003 0303 	and.w	r3, r3, #3
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d005      	beq.n	8009b22 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	78db      	ldrb	r3, [r3, #3]
 8009b1a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009b1e:	2b03      	cmp	r3, #3
 8009b20:	d127      	bne.n	8009b72 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	799b      	ldrb	r3, [r3, #6]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d003      	beq.n	8009b32 <USBH_ParseEPDesc+0xfc>
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	799b      	ldrb	r3, [r3, #6]
 8009b2e:	2b10      	cmp	r3, #16
 8009b30:	d91f      	bls.n	8009b72 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009b32:	2303      	movs	r3, #3
 8009b34:	75fb      	strb	r3, [r7, #23]
 8009b36:	e01c      	b.n	8009b72 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	78db      	ldrb	r3, [r3, #3]
 8009b3c:	f003 0303 	and.w	r3, r3, #3
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d10a      	bne.n	8009b5a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	799b      	ldrb	r3, [r3, #6]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d003      	beq.n	8009b54 <USBH_ParseEPDesc+0x11e>
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	799b      	ldrb	r3, [r3, #6]
 8009b50:	2b10      	cmp	r3, #16
 8009b52:	d90e      	bls.n	8009b72 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009b54:	2303      	movs	r3, #3
 8009b56:	75fb      	strb	r3, [r7, #23]
 8009b58:	e00b      	b.n	8009b72 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	78db      	ldrb	r3, [r3, #3]
 8009b5e:	f003 0303 	and.w	r3, r3, #3
 8009b62:	2b03      	cmp	r3, #3
 8009b64:	d105      	bne.n	8009b72 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	799b      	ldrb	r3, [r3, #6]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d101      	bne.n	8009b72 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	371c      	adds	r7, #28
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b087      	sub	sp, #28
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	3301      	adds	r3, #1
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	2b03      	cmp	r3, #3
 8009b96:	d120      	bne.n	8009bda <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	1e9a      	subs	r2, r3, #2
 8009b9e:	88fb      	ldrh	r3, [r7, #6]
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	bf28      	it	cs
 8009ba4:	4613      	movcs	r3, r2
 8009ba6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	3302      	adds	r3, #2
 8009bac:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009bae:	2300      	movs	r3, #0
 8009bb0:	82fb      	strh	r3, [r7, #22]
 8009bb2:	e00b      	b.n	8009bcc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009bb4:	8afb      	ldrh	r3, [r7, #22]
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	4413      	add	r3, r2
 8009bba:	781a      	ldrb	r2, [r3, #0]
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009bc6:	8afb      	ldrh	r3, [r7, #22]
 8009bc8:	3302      	adds	r3, #2
 8009bca:	82fb      	strh	r3, [r7, #22]
 8009bcc:	8afa      	ldrh	r2, [r7, #22]
 8009bce:	8abb      	ldrh	r3, [r7, #20]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d3ef      	bcc.n	8009bb4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	701a      	strb	r2, [r3, #0]
  }
}
 8009bda:	bf00      	nop
 8009bdc:	371c      	adds	r7, #28
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr

08009be6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009be6:	b480      	push	{r7}
 8009be8:	b085      	sub	sp, #20
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
 8009bee:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	881a      	ldrh	r2, [r3, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	4413      	add	r3, r2
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3714      	adds	r7, #20
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b086      	sub	sp, #24
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	4613      	mov	r3, r2
 8009c28:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	789b      	ldrb	r3, [r3, #2]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d002      	beq.n	8009c3c <USBH_CtlReq+0x20>
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d00f      	beq.n	8009c5a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009c3a:	e027      	b.n	8009c8c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	88fa      	ldrh	r2, [r7, #6]
 8009c46:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2202      	movs	r2, #2
 8009c52:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009c54:	2301      	movs	r3, #1
 8009c56:	75fb      	strb	r3, [r7, #23]
      break;
 8009c58:	e018      	b.n	8009c8c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 f81c 	bl	8009c98 <USBH_HandleControl>
 8009c60:	4603      	mov	r3, r0
 8009c62:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009c64:	7dfb      	ldrb	r3, [r7, #23]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d002      	beq.n	8009c70 <USBH_CtlReq+0x54>
 8009c6a:	7dfb      	ldrb	r3, [r7, #23]
 8009c6c:	2b03      	cmp	r3, #3
 8009c6e:	d106      	bne.n	8009c7e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2201      	movs	r2, #1
 8009c74:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	761a      	strb	r2, [r3, #24]
      break;
 8009c7c:	e005      	b.n	8009c8a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009c7e:	7dfb      	ldrb	r3, [r7, #23]
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d102      	bne.n	8009c8a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2201      	movs	r2, #1
 8009c88:	709a      	strb	r2, [r3, #2]
      break;
 8009c8a:	bf00      	nop
  }
  return status;
 8009c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3718      	adds	r7, #24
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
	...

08009c98 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af02      	add	r7, sp, #8
 8009c9e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	7e1b      	ldrb	r3, [r3, #24]
 8009cac:	3b01      	subs	r3, #1
 8009cae:	2b0a      	cmp	r3, #10
 8009cb0:	f200 8156 	bhi.w	8009f60 <USBH_HandleControl+0x2c8>
 8009cb4:	a201      	add	r2, pc, #4	; (adr r2, 8009cbc <USBH_HandleControl+0x24>)
 8009cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cba:	bf00      	nop
 8009cbc:	08009ce9 	.word	0x08009ce9
 8009cc0:	08009d03 	.word	0x08009d03
 8009cc4:	08009d6d 	.word	0x08009d6d
 8009cc8:	08009d93 	.word	0x08009d93
 8009ccc:	08009dcb 	.word	0x08009dcb
 8009cd0:	08009df5 	.word	0x08009df5
 8009cd4:	08009e47 	.word	0x08009e47
 8009cd8:	08009e69 	.word	0x08009e69
 8009cdc:	08009ea5 	.word	0x08009ea5
 8009ce0:	08009ecb 	.word	0x08009ecb
 8009ce4:	08009f09 	.word	0x08009f09
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f103 0110 	add.w	r1, r3, #16
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	795b      	ldrb	r3, [r3, #5]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f943 	bl	8009f80 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2202      	movs	r2, #2
 8009cfe:	761a      	strb	r2, [r3, #24]
      break;
 8009d00:	e139      	b.n	8009f76 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	795b      	ldrb	r3, [r3, #5]
 8009d06:	4619      	mov	r1, r3
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 fccb 	bl	800a6a4 <USBH_LL_GetURBState>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009d12:	7bbb      	ldrb	r3, [r7, #14]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d11e      	bne.n	8009d56 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	7c1b      	ldrb	r3, [r3, #16]
 8009d1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d20:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	8adb      	ldrh	r3, [r3, #22]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00a      	beq.n	8009d40 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009d2a:	7b7b      	ldrb	r3, [r7, #13]
 8009d2c:	2b80      	cmp	r3, #128	; 0x80
 8009d2e:	d103      	bne.n	8009d38 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2203      	movs	r2, #3
 8009d34:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009d36:	e115      	b.n	8009f64 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2205      	movs	r2, #5
 8009d3c:	761a      	strb	r2, [r3, #24]
      break;
 8009d3e:	e111      	b.n	8009f64 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009d40:	7b7b      	ldrb	r3, [r7, #13]
 8009d42:	2b80      	cmp	r3, #128	; 0x80
 8009d44:	d103      	bne.n	8009d4e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2209      	movs	r2, #9
 8009d4a:	761a      	strb	r2, [r3, #24]
      break;
 8009d4c:	e10a      	b.n	8009f64 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2207      	movs	r2, #7
 8009d52:	761a      	strb	r2, [r3, #24]
      break;
 8009d54:	e106      	b.n	8009f64 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009d56:	7bbb      	ldrb	r3, [r7, #14]
 8009d58:	2b04      	cmp	r3, #4
 8009d5a:	d003      	beq.n	8009d64 <USBH_HandleControl+0xcc>
 8009d5c:	7bbb      	ldrb	r3, [r7, #14]
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	f040 8100 	bne.w	8009f64 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	220b      	movs	r2, #11
 8009d68:	761a      	strb	r2, [r3, #24]
      break;
 8009d6a:	e0fb      	b.n	8009f64 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6899      	ldr	r1, [r3, #8]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	899a      	ldrh	r2, [r3, #12]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	791b      	ldrb	r3, [r3, #4]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f93a 	bl	8009ffe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2204      	movs	r2, #4
 8009d8e:	761a      	strb	r2, [r3, #24]
      break;
 8009d90:	e0f1      	b.n	8009f76 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	791b      	ldrb	r3, [r3, #4]
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 fc83 	bl	800a6a4 <USBH_LL_GetURBState>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009da2:	7bbb      	ldrb	r3, [r7, #14]
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d102      	bne.n	8009dae <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2209      	movs	r2, #9
 8009dac:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009dae:	7bbb      	ldrb	r3, [r7, #14]
 8009db0:	2b05      	cmp	r3, #5
 8009db2:	d102      	bne.n	8009dba <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009db4:	2303      	movs	r3, #3
 8009db6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009db8:	e0d6      	b.n	8009f68 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009dba:	7bbb      	ldrb	r3, [r7, #14]
 8009dbc:	2b04      	cmp	r3, #4
 8009dbe:	f040 80d3 	bne.w	8009f68 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	220b      	movs	r2, #11
 8009dc6:	761a      	strb	r2, [r3, #24]
      break;
 8009dc8:	e0ce      	b.n	8009f68 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6899      	ldr	r1, [r3, #8]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	899a      	ldrh	r2, [r3, #12]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	795b      	ldrb	r3, [r3, #5]
 8009dd6:	2001      	movs	r0, #1
 8009dd8:	9000      	str	r0, [sp, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f8ea 	bl	8009fb4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2206      	movs	r2, #6
 8009df0:	761a      	strb	r2, [r3, #24]
      break;
 8009df2:	e0c0      	b.n	8009f76 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	795b      	ldrb	r3, [r3, #5]
 8009df8:	4619      	mov	r1, r3
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 fc52 	bl	800a6a4 <USBH_LL_GetURBState>
 8009e00:	4603      	mov	r3, r0
 8009e02:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009e04:	7bbb      	ldrb	r3, [r7, #14]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d103      	bne.n	8009e12 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2207      	movs	r2, #7
 8009e0e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e10:	e0ac      	b.n	8009f6c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009e12:	7bbb      	ldrb	r3, [r7, #14]
 8009e14:	2b05      	cmp	r3, #5
 8009e16:	d105      	bne.n	8009e24 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	220c      	movs	r2, #12
 8009e1c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009e1e:	2303      	movs	r3, #3
 8009e20:	73fb      	strb	r3, [r7, #15]
      break;
 8009e22:	e0a3      	b.n	8009f6c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009e24:	7bbb      	ldrb	r3, [r7, #14]
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	d103      	bne.n	8009e32 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2205      	movs	r2, #5
 8009e2e:	761a      	strb	r2, [r3, #24]
      break;
 8009e30:	e09c      	b.n	8009f6c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009e32:	7bbb      	ldrb	r3, [r7, #14]
 8009e34:	2b04      	cmp	r3, #4
 8009e36:	f040 8099 	bne.w	8009f6c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	220b      	movs	r2, #11
 8009e3e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009e40:	2302      	movs	r3, #2
 8009e42:	73fb      	strb	r3, [r7, #15]
      break;
 8009e44:	e092      	b.n	8009f6c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	791b      	ldrb	r3, [r3, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f8d5 	bl	8009ffe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2208      	movs	r2, #8
 8009e64:	761a      	strb	r2, [r3, #24]

      break;
 8009e66:	e086      	b.n	8009f76 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	791b      	ldrb	r3, [r3, #4]
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fc18 	bl	800a6a4 <USBH_LL_GetURBState>
 8009e74:	4603      	mov	r3, r0
 8009e76:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009e78:	7bbb      	ldrb	r3, [r7, #14]
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d105      	bne.n	8009e8a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	220d      	movs	r2, #13
 8009e82:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009e84:	2300      	movs	r3, #0
 8009e86:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e88:	e072      	b.n	8009f70 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009e8a:	7bbb      	ldrb	r3, [r7, #14]
 8009e8c:	2b04      	cmp	r3, #4
 8009e8e:	d103      	bne.n	8009e98 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	220b      	movs	r2, #11
 8009e94:	761a      	strb	r2, [r3, #24]
      break;
 8009e96:	e06b      	b.n	8009f70 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009e98:	7bbb      	ldrb	r3, [r7, #14]
 8009e9a:	2b05      	cmp	r3, #5
 8009e9c:	d168      	bne.n	8009f70 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ea2:	e065      	b.n	8009f70 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	795b      	ldrb	r3, [r3, #5]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	9200      	str	r2, [sp, #0]
 8009eac:	2200      	movs	r2, #0
 8009eae:	2100      	movs	r1, #0
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f87f 	bl	8009fb4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	220a      	movs	r2, #10
 8009ec6:	761a      	strb	r2, [r3, #24]
      break;
 8009ec8:	e055      	b.n	8009f76 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	795b      	ldrb	r3, [r3, #5]
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 fbe7 	bl	800a6a4 <USBH_LL_GetURBState>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009eda:	7bbb      	ldrb	r3, [r7, #14]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d105      	bne.n	8009eec <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	220d      	movs	r2, #13
 8009ee8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009eea:	e043      	b.n	8009f74 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009eec:	7bbb      	ldrb	r3, [r7, #14]
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d103      	bne.n	8009efa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2209      	movs	r2, #9
 8009ef6:	761a      	strb	r2, [r3, #24]
      break;
 8009ef8:	e03c      	b.n	8009f74 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009efa:	7bbb      	ldrb	r3, [r7, #14]
 8009efc:	2b04      	cmp	r3, #4
 8009efe:	d139      	bne.n	8009f74 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	220b      	movs	r2, #11
 8009f04:	761a      	strb	r2, [r3, #24]
      break;
 8009f06:	e035      	b.n	8009f74 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	7e5b      	ldrb	r3, [r3, #25]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	b2da      	uxtb	r2, r3
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	765a      	strb	r2, [r3, #25]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	7e5b      	ldrb	r3, [r3, #25]
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d806      	bhi.n	8009f2a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009f28:	e025      	b.n	8009f76 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f30:	2106      	movs	r1, #6
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	795b      	ldrb	r3, [r3, #5]
 8009f40:	4619      	mov	r1, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f90c 	bl	800a160 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	791b      	ldrb	r3, [r3, #4]
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f906 	bl	800a160 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f5e:	e00a      	b.n	8009f76 <USBH_HandleControl+0x2de>

    default:
      break;
 8009f60:	bf00      	nop
 8009f62:	e008      	b.n	8009f76 <USBH_HandleControl+0x2de>
      break;
 8009f64:	bf00      	nop
 8009f66:	e006      	b.n	8009f76 <USBH_HandleControl+0x2de>
      break;
 8009f68:	bf00      	nop
 8009f6a:	e004      	b.n	8009f76 <USBH_HandleControl+0x2de>
      break;
 8009f6c:	bf00      	nop
 8009f6e:	e002      	b.n	8009f76 <USBH_HandleControl+0x2de>
      break;
 8009f70:	bf00      	nop
 8009f72:	e000      	b.n	8009f76 <USBH_HandleControl+0x2de>
      break;
 8009f74:	bf00      	nop
  }

  return status;
 8009f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b088      	sub	sp, #32
 8009f84:	af04      	add	r7, sp, #16
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009f8e:	79f9      	ldrb	r1, [r7, #7]
 8009f90:	2300      	movs	r3, #0
 8009f92:	9303      	str	r3, [sp, #12]
 8009f94:	2308      	movs	r3, #8
 8009f96:	9302      	str	r3, [sp, #8]
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	9301      	str	r3, [sp, #4]
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f000 fb4c 	bl	800a642 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009faa:	2300      	movs	r3, #0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b088      	sub	sp, #32
 8009fb8:	af04      	add	r7, sp, #16
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	4611      	mov	r1, r2
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	80fb      	strh	r3, [r7, #6]
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009fd8:	7979      	ldrb	r1, [r7, #5]
 8009fda:	7e3b      	ldrb	r3, [r7, #24]
 8009fdc:	9303      	str	r3, [sp, #12]
 8009fde:	88fb      	ldrh	r3, [r7, #6]
 8009fe0:	9302      	str	r3, [sp, #8]
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	9301      	str	r3, [sp, #4]
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	2300      	movs	r3, #0
 8009fec:	2200      	movs	r2, #0
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f000 fb27 	bl	800a642 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b088      	sub	sp, #32
 800a002:	af04      	add	r7, sp, #16
 800a004:	60f8      	str	r0, [r7, #12]
 800a006:	60b9      	str	r1, [r7, #8]
 800a008:	4611      	mov	r1, r2
 800a00a:	461a      	mov	r2, r3
 800a00c:	460b      	mov	r3, r1
 800a00e:	80fb      	strh	r3, [r7, #6]
 800a010:	4613      	mov	r3, r2
 800a012:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a014:	7979      	ldrb	r1, [r7, #5]
 800a016:	2300      	movs	r3, #0
 800a018:	9303      	str	r3, [sp, #12]
 800a01a:	88fb      	ldrh	r3, [r7, #6]
 800a01c:	9302      	str	r3, [sp, #8]
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	9301      	str	r3, [sp, #4]
 800a022:	2301      	movs	r3, #1
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	2300      	movs	r3, #0
 800a028:	2201      	movs	r2, #1
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f000 fb09 	bl	800a642 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a030:	2300      	movs	r3, #0

}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b088      	sub	sp, #32
 800a03e:	af04      	add	r7, sp, #16
 800a040:	60f8      	str	r0, [r7, #12]
 800a042:	60b9      	str	r1, [r7, #8]
 800a044:	4611      	mov	r1, r2
 800a046:	461a      	mov	r2, r3
 800a048:	460b      	mov	r3, r1
 800a04a:	80fb      	strh	r3, [r7, #6]
 800a04c:	4613      	mov	r3, r2
 800a04e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a056:	2b00      	cmp	r3, #0
 800a058:	d001      	beq.n	800a05e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a05a:	2300      	movs	r3, #0
 800a05c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a05e:	7979      	ldrb	r1, [r7, #5]
 800a060:	7e3b      	ldrb	r3, [r7, #24]
 800a062:	9303      	str	r3, [sp, #12]
 800a064:	88fb      	ldrh	r3, [r7, #6]
 800a066:	9302      	str	r3, [sp, #8]
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	9301      	str	r3, [sp, #4]
 800a06c:	2301      	movs	r3, #1
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	2302      	movs	r3, #2
 800a072:	2200      	movs	r2, #0
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f000 fae4 	bl	800a642 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3710      	adds	r7, #16
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b088      	sub	sp, #32
 800a088:	af04      	add	r7, sp, #16
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	4611      	mov	r1, r2
 800a090:	461a      	mov	r2, r3
 800a092:	460b      	mov	r3, r1
 800a094:	80fb      	strh	r3, [r7, #6]
 800a096:	4613      	mov	r3, r2
 800a098:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a09a:	7979      	ldrb	r1, [r7, #5]
 800a09c:	2300      	movs	r3, #0
 800a09e:	9303      	str	r3, [sp, #12]
 800a0a0:	88fb      	ldrh	r3, [r7, #6]
 800a0a2:	9302      	str	r3, [sp, #8]
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	9301      	str	r3, [sp, #4]
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	2302      	movs	r3, #2
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f000 fac6 	bl	800a642 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af04      	add	r7, sp, #16
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	4608      	mov	r0, r1
 800a0ca:	4611      	mov	r1, r2
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	70fb      	strb	r3, [r7, #3]
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	70bb      	strb	r3, [r7, #2]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a0da:	7878      	ldrb	r0, [r7, #1]
 800a0dc:	78ba      	ldrb	r2, [r7, #2]
 800a0de:	78f9      	ldrb	r1, [r7, #3]
 800a0e0:	8b3b      	ldrh	r3, [r7, #24]
 800a0e2:	9302      	str	r3, [sp, #8]
 800a0e4:	7d3b      	ldrb	r3, [r7, #20]
 800a0e6:	9301      	str	r3, [sp, #4]
 800a0e8:	7c3b      	ldrb	r3, [r7, #16]
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 fa59 	bl	800a5a6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3708      	adds	r7, #8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b082      	sub	sp, #8
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	460b      	mov	r3, r1
 800a108:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a10a:	78fb      	ldrb	r3, [r7, #3]
 800a10c:	4619      	mov	r1, r3
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 fa78 	bl	800a604 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b084      	sub	sp, #16
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
 800a126:	460b      	mov	r3, r1
 800a128:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 f836 	bl	800a19c <USBH_GetFreePipe>
 800a130:	4603      	mov	r3, r0
 800a132:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a134:	89fb      	ldrh	r3, [r7, #14]
 800a136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d00a      	beq.n	800a154 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a13e:	78fa      	ldrb	r2, [r7, #3]
 800a140:	89fb      	ldrh	r3, [r7, #14]
 800a142:	f003 030f 	and.w	r3, r3, #15
 800a146:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a14a:	6879      	ldr	r1, [r7, #4]
 800a14c:	33e0      	adds	r3, #224	; 0xe0
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	440b      	add	r3, r1
 800a152:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a154:	89fb      	ldrh	r3, [r7, #14]
 800a156:	b2db      	uxtb	r3, r3
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	460b      	mov	r3, r1
 800a16a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a16c:	78fb      	ldrb	r3, [r7, #3]
 800a16e:	2b0f      	cmp	r3, #15
 800a170:	d80d      	bhi.n	800a18e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a172:	78fb      	ldrb	r3, [r7, #3]
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	33e0      	adds	r3, #224	; 0xe0
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	4413      	add	r3, r2
 800a17c:	685a      	ldr	r2, [r3, #4]
 800a17e:	78fb      	ldrb	r3, [r7, #3]
 800a180:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a184:	6879      	ldr	r1, [r7, #4]
 800a186:	33e0      	adds	r3, #224	; 0xe0
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	440b      	add	r3, r1
 800a18c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a18e:	2300      	movs	r3, #0
}
 800a190:	4618      	mov	r0, r3
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	73fb      	strb	r3, [r7, #15]
 800a1ac:	e00f      	b.n	800a1ce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a1ae:	7bfb      	ldrb	r3, [r7, #15]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	33e0      	adds	r3, #224	; 0xe0
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4413      	add	r3, r2
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d102      	bne.n	800a1c8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a1c2:	7bfb      	ldrb	r3, [r7, #15]
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	e007      	b.n	800a1d8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a1c8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	73fb      	strb	r3, [r7, #15]
 800a1ce:	7bfb      	ldrb	r3, [r7, #15]
 800a1d0:	2b0f      	cmp	r3, #15
 800a1d2:	d9ec      	bls.n	800a1ae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a1d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3714      	adds	r7, #20
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	490e      	ldr	r1, [pc, #56]	; (800a224 <MX_USB_HOST_Init+0x40>)
 800a1ec:	480e      	ldr	r0, [pc, #56]	; (800a228 <MX_USB_HOST_Init+0x44>)
 800a1ee:	f7fe fba7 	bl	8008940 <USBH_Init>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d001      	beq.n	800a1fc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a1f8:	f7f7 fbfe 	bl	80019f8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800a1fc:	490b      	ldr	r1, [pc, #44]	; (800a22c <MX_USB_HOST_Init+0x48>)
 800a1fe:	480a      	ldr	r0, [pc, #40]	; (800a228 <MX_USB_HOST_Init+0x44>)
 800a200:	f7fe fc2c 	bl	8008a5c <USBH_RegisterClass>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d001      	beq.n	800a20e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a20a:	f7f7 fbf5 	bl	80019f8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800a20e:	4806      	ldr	r0, [pc, #24]	; (800a228 <MX_USB_HOST_Init+0x44>)
 800a210:	f7fe fcb0 	bl	8008b74 <USBH_Start>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d001      	beq.n	800a21e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a21a:	f7f7 fbed 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a21e:	bf00      	nop
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	0800a245 	.word	0x0800a245
 800a228:	20000a24 	.word	0x20000a24
 800a22c:	2000050c 	.word	0x2000050c

0800a230 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800a234:	4802      	ldr	r0, [pc, #8]	; (800a240 <MX_USB_HOST_Process+0x10>)
 800a236:	f7fe fcad 	bl	8008b94 <USBH_Process>
}
 800a23a:	bf00      	nop
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	20000a24 	.word	0x20000a24

0800a244 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	460b      	mov	r3, r1
 800a24e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a250:	78fb      	ldrb	r3, [r7, #3]
 800a252:	3b01      	subs	r3, #1
 800a254:	2b04      	cmp	r3, #4
 800a256:	d819      	bhi.n	800a28c <USBH_UserProcess+0x48>
 800a258:	a201      	add	r2, pc, #4	; (adr r2, 800a260 <USBH_UserProcess+0x1c>)
 800a25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25e:	bf00      	nop
 800a260:	0800a28d 	.word	0x0800a28d
 800a264:	0800a27d 	.word	0x0800a27d
 800a268:	0800a28d 	.word	0x0800a28d
 800a26c:	0800a285 	.word	0x0800a285
 800a270:	0800a275 	.word	0x0800a275
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a274:	4b09      	ldr	r3, [pc, #36]	; (800a29c <USBH_UserProcess+0x58>)
 800a276:	2203      	movs	r2, #3
 800a278:	701a      	strb	r2, [r3, #0]
  break;
 800a27a:	e008      	b.n	800a28e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a27c:	4b07      	ldr	r3, [pc, #28]	; (800a29c <USBH_UserProcess+0x58>)
 800a27e:	2202      	movs	r2, #2
 800a280:	701a      	strb	r2, [r3, #0]
  break;
 800a282:	e004      	b.n	800a28e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a284:	4b05      	ldr	r3, [pc, #20]	; (800a29c <USBH_UserProcess+0x58>)
 800a286:	2201      	movs	r2, #1
 800a288:	701a      	strb	r2, [r3, #0]
  break;
 800a28a:	e000      	b.n	800a28e <USBH_UserProcess+0x4a>

  default:
  break;
 800a28c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a28e:	bf00      	nop
 800a290:	370c      	adds	r7, #12
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	20000dfc 	.word	0x20000dfc

0800a2a0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b08a      	sub	sp, #40	; 0x28
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2a8:	f107 0314 	add.w	r3, r7, #20
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	601a      	str	r2, [r3, #0]
 800a2b0:	605a      	str	r2, [r3, #4]
 800a2b2:	609a      	str	r2, [r3, #8]
 800a2b4:	60da      	str	r2, [r3, #12]
 800a2b6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a24      	ldr	r2, [pc, #144]	; (800a350 <HAL_HCD_MspInit+0xb0>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d141      	bne.n	800a346 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	613b      	str	r3, [r7, #16]
 800a2c6:	4b23      	ldr	r3, [pc, #140]	; (800a354 <HAL_HCD_MspInit+0xb4>)
 800a2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ca:	4a22      	ldr	r2, [pc, #136]	; (800a354 <HAL_HCD_MspInit+0xb4>)
 800a2cc:	f043 0302 	orr.w	r3, r3, #2
 800a2d0:	6313      	str	r3, [r2, #48]	; 0x30
 800a2d2:	4b20      	ldr	r3, [pc, #128]	; (800a354 <HAL_HCD_MspInit+0xb4>)
 800a2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d6:	f003 0302 	and.w	r3, r3, #2
 800a2da:	613b      	str	r3, [r7, #16]
 800a2dc:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800a2de:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800a2e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800a2f0:	230c      	movs	r3, #12
 800a2f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a2f4:	f107 0314 	add.w	r3, r7, #20
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	4817      	ldr	r0, [pc, #92]	; (800a358 <HAL_HCD_MspInit+0xb8>)
 800a2fc:	f7f8 fc56 	bl	8002bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800a300:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a306:	2300      	movs	r3, #0
 800a308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a30a:	2300      	movs	r3, #0
 800a30c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800a30e:	f107 0314 	add.w	r3, r7, #20
 800a312:	4619      	mov	r1, r3
 800a314:	4810      	ldr	r0, [pc, #64]	; (800a358 <HAL_HCD_MspInit+0xb8>)
 800a316:	f7f8 fc49 	bl	8002bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800a31a:	2300      	movs	r3, #0
 800a31c:	60fb      	str	r3, [r7, #12]
 800a31e:	4b0d      	ldr	r3, [pc, #52]	; (800a354 <HAL_HCD_MspInit+0xb4>)
 800a320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a322:	4a0c      	ldr	r2, [pc, #48]	; (800a354 <HAL_HCD_MspInit+0xb4>)
 800a324:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a328:	6313      	str	r3, [r2, #48]	; 0x30
 800a32a:	4b0a      	ldr	r3, [pc, #40]	; (800a354 <HAL_HCD_MspInit+0xb4>)
 800a32c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a32e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a332:	60fb      	str	r3, [r7, #12]
 800a334:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800a336:	2200      	movs	r2, #0
 800a338:	2100      	movs	r1, #0
 800a33a:	204d      	movs	r0, #77	; 0x4d
 800a33c:	f7f8 fa04 	bl	8002748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800a340:	204d      	movs	r0, #77	; 0x4d
 800a342:	f7f8 fa1d 	bl	8002780 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800a346:	bf00      	nop
 800a348:	3728      	adds	r7, #40	; 0x28
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	40040000 	.word	0x40040000
 800a354:	40023800 	.word	0x40023800
 800a358:	40020400 	.word	0x40020400

0800a35c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7fe fff1 	bl	8009352 <USBH_LL_IncTimer>
}
 800a370:	bf00      	nop
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a386:	4618      	mov	r0, r3
 800a388:	f7ff f829 	bl	80093de <USBH_LL_Connect>
}
 800a38c:	bf00      	nop
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7ff f832 	bl	800940c <USBH_LL_Disconnect>
}
 800a3a8:	bf00      	nop
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	70fb      	strb	r3, [r7, #3]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a3c0:	bf00      	nop
 800a3c2:	370c      	adds	r7, #12
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr

0800a3cc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fe ffe3 	bl	80093a6 <USBH_LL_PortEnabled>
}
 800a3e0:	bf00      	nop
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7fe ffe3 	bl	80093c2 <USBH_LL_PortDisabled>
}
 800a3fc:	bf00      	nop
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a412:	2b00      	cmp	r3, #0
 800a414:	d132      	bne.n	800a47c <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800a416:	4a1c      	ldr	r2, [pc, #112]	; (800a488 <USBH_LL_Init+0x84>)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a19      	ldr	r2, [pc, #100]	; (800a488 <USBH_LL_Init+0x84>)
 800a422:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a426:	4b18      	ldr	r3, [pc, #96]	; (800a488 <USBH_LL_Init+0x84>)
 800a428:	4a18      	ldr	r2, [pc, #96]	; (800a48c <USBH_LL_Init+0x88>)
 800a42a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800a42c:	4b16      	ldr	r3, [pc, #88]	; (800a488 <USBH_LL_Init+0x84>)
 800a42e:	220c      	movs	r2, #12
 800a430:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800a432:	4b15      	ldr	r3, [pc, #84]	; (800a488 <USBH_LL_Init+0x84>)
 800a434:	2201      	movs	r2, #1
 800a436:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a438:	4b13      	ldr	r3, [pc, #76]	; (800a488 <USBH_LL_Init+0x84>)
 800a43a:	2200      	movs	r2, #0
 800a43c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800a43e:	4b12      	ldr	r3, [pc, #72]	; (800a488 <USBH_LL_Init+0x84>)
 800a440:	2202      	movs	r2, #2
 800a442:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a444:	4b10      	ldr	r3, [pc, #64]	; (800a488 <USBH_LL_Init+0x84>)
 800a446:	2200      	movs	r2, #0
 800a448:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a44a:	4b0f      	ldr	r3, [pc, #60]	; (800a488 <USBH_LL_Init+0x84>)
 800a44c:	2200      	movs	r2, #0
 800a44e:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a450:	4b0d      	ldr	r3, [pc, #52]	; (800a488 <USBH_LL_Init+0x84>)
 800a452:	2200      	movs	r2, #0
 800a454:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a456:	4b0c      	ldr	r3, [pc, #48]	; (800a488 <USBH_LL_Init+0x84>)
 800a458:	2200      	movs	r2, #0
 800a45a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800a45c:	480a      	ldr	r0, [pc, #40]	; (800a488 <USBH_LL_Init+0x84>)
 800a45e:	f7f8 fd6a 	bl	8002f36 <HAL_HCD_Init>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800a468:	f7f7 fac6 	bl	80019f8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800a46c:	4806      	ldr	r0, [pc, #24]	; (800a488 <USBH_LL_Init+0x84>)
 800a46e:	f7f9 f94e 	bl	800370e <HAL_HCD_GetCurrentFrame>
 800a472:	4603      	mov	r3, r0
 800a474:	4619      	mov	r1, r3
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7fe ff5c 	bl	8009334 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3708      	adds	r7, #8
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	20000e00 	.word	0x20000e00
 800a48c:	40040000 	.word	0x40040000

0800a490 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a498:	2300      	movs	r3, #0
 800a49a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a49c:	2300      	movs	r3, #0
 800a49e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7f9 f8bb 	bl	8003622 <HAL_HCD_Start>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a4b0:	7bfb      	ldrb	r3, [r7, #15]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f000 f95c 	bl	800a770 <USBH_Get_USB_Status>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b084      	sub	sp, #16
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7f9 f8c3 	bl	8003668 <HAL_HCD_Stop>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f000 f941 	bl	800a770 <USBH_Get_USB_Status>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a504:	2301      	movs	r3, #1
 800a506:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a50e:	4618      	mov	r0, r3
 800a510:	f7f9 f90b 	bl	800372a <HAL_HCD_GetCurrentSpeed>
 800a514:	4603      	mov	r3, r0
 800a516:	2b02      	cmp	r3, #2
 800a518:	d00c      	beq.n	800a534 <USBH_LL_GetSpeed+0x38>
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d80d      	bhi.n	800a53a <USBH_LL_GetSpeed+0x3e>
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d002      	beq.n	800a528 <USBH_LL_GetSpeed+0x2c>
 800a522:	2b01      	cmp	r3, #1
 800a524:	d003      	beq.n	800a52e <USBH_LL_GetSpeed+0x32>
 800a526:	e008      	b.n	800a53a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a528:	2300      	movs	r3, #0
 800a52a:	73fb      	strb	r3, [r7, #15]
    break;
 800a52c:	e008      	b.n	800a540 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a52e:	2301      	movs	r3, #1
 800a530:	73fb      	strb	r3, [r7, #15]
    break;
 800a532:	e005      	b.n	800a540 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a534:	2302      	movs	r3, #2
 800a536:	73fb      	strb	r3, [r7, #15]
    break;
 800a538:	e002      	b.n	800a540 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a53a:	2301      	movs	r3, #1
 800a53c:	73fb      	strb	r3, [r7, #15]
    break;
 800a53e:	bf00      	nop
  }
  return  speed;
 800a540:	7bfb      	ldrb	r3, [r7, #15]
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b084      	sub	sp, #16
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a552:	2300      	movs	r3, #0
 800a554:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a556:	2300      	movs	r3, #0
 800a558:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a560:	4618      	mov	r0, r3
 800a562:	f7f9 f89e 	bl	80036a2 <HAL_HCD_ResetPort>
 800a566:	4603      	mov	r3, r0
 800a568:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a56a:	7bfb      	ldrb	r3, [r7, #15]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 f8ff 	bl	800a770 <USBH_Get_USB_Status>
 800a572:	4603      	mov	r3, r0
 800a574:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a576:	7bbb      	ldrb	r3, [r7, #14]
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	460b      	mov	r3, r1
 800a58a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a592:	78fa      	ldrb	r2, [r7, #3]
 800a594:	4611      	mov	r1, r2
 800a596:	4618      	mov	r0, r3
 800a598:	f7f9 f8a5 	bl	80036e6 <HAL_HCD_HC_GetXferCount>
 800a59c:	4603      	mov	r3, r0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a5a6:	b590      	push	{r4, r7, lr}
 800a5a8:	b089      	sub	sp, #36	; 0x24
 800a5aa:	af04      	add	r7, sp, #16
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	4608      	mov	r0, r1
 800a5b0:	4611      	mov	r1, r2
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	70fb      	strb	r3, [r7, #3]
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	70bb      	strb	r3, [r7, #2]
 800a5bc:	4613      	mov	r3, r2
 800a5be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a5ce:	787c      	ldrb	r4, [r7, #1]
 800a5d0:	78ba      	ldrb	r2, [r7, #2]
 800a5d2:	78f9      	ldrb	r1, [r7, #3]
 800a5d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a5d6:	9302      	str	r3, [sp, #8]
 800a5d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a5dc:	9301      	str	r3, [sp, #4]
 800a5de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	4623      	mov	r3, r4
 800a5e6:	f7f8 fd08 	bl	8002ffa <HAL_HCD_HC_Init>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5ee:	7bfb      	ldrb	r3, [r7, #15]
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f000 f8bd 	bl	800a770 <USBH_Get_USB_Status>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3714      	adds	r7, #20
 800a600:	46bd      	mov	sp, r7
 800a602:	bd90      	pop	{r4, r7, pc}

0800a604 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	460b      	mov	r3, r1
 800a60e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a610:	2300      	movs	r3, #0
 800a612:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a61e:	78fa      	ldrb	r2, [r7, #3]
 800a620:	4611      	mov	r1, r2
 800a622:	4618      	mov	r0, r3
 800a624:	f7f8 fd78 	bl	8003118 <HAL_HCD_HC_Halt>
 800a628:	4603      	mov	r3, r0
 800a62a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a62c:	7bfb      	ldrb	r3, [r7, #15]
 800a62e:	4618      	mov	r0, r3
 800a630:	f000 f89e 	bl	800a770 <USBH_Get_USB_Status>
 800a634:	4603      	mov	r3, r0
 800a636:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a638:	7bbb      	ldrb	r3, [r7, #14]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a642:	b590      	push	{r4, r7, lr}
 800a644:	b089      	sub	sp, #36	; 0x24
 800a646:	af04      	add	r7, sp, #16
 800a648:	6078      	str	r0, [r7, #4]
 800a64a:	4608      	mov	r0, r1
 800a64c:	4611      	mov	r1, r2
 800a64e:	461a      	mov	r2, r3
 800a650:	4603      	mov	r3, r0
 800a652:	70fb      	strb	r3, [r7, #3]
 800a654:	460b      	mov	r3, r1
 800a656:	70bb      	strb	r3, [r7, #2]
 800a658:	4613      	mov	r3, r2
 800a65a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a65c:	2300      	movs	r3, #0
 800a65e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a660:	2300      	movs	r3, #0
 800a662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a66a:	787c      	ldrb	r4, [r7, #1]
 800a66c:	78ba      	ldrb	r2, [r7, #2]
 800a66e:	78f9      	ldrb	r1, [r7, #3]
 800a670:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a674:	9303      	str	r3, [sp, #12]
 800a676:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a678:	9302      	str	r3, [sp, #8]
 800a67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67c:	9301      	str	r3, [sp, #4]
 800a67e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	4623      	mov	r3, r4
 800a686:	f7f8 fd6b 	bl	8003160 <HAL_HCD_HC_SubmitRequest>
 800a68a:	4603      	mov	r3, r0
 800a68c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a68e:	7bfb      	ldrb	r3, [r7, #15]
 800a690:	4618      	mov	r0, r3
 800a692:	f000 f86d 	bl	800a770 <USBH_Get_USB_Status>
 800a696:	4603      	mov	r3, r0
 800a698:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a69a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3714      	adds	r7, #20
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd90      	pop	{r4, r7, pc}

0800a6a4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a6b6:	78fa      	ldrb	r2, [r7, #3]
 800a6b8:	4611      	mov	r1, r2
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7f8 ffff 	bl	80036be <HAL_HCD_HC_GetURBState>
 800a6c0:	4603      	mov	r3, r0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3708      	adds	r7, #8
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b082      	sub	sp, #8
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d103      	bne.n	800a6e8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800a6e0:	78fb      	ldrb	r3, [r7, #3]
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f000 f870 	bl	800a7c8 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a6e8:	20c8      	movs	r0, #200	; 0xc8
 800a6ea:	f7f7 ff51 	bl	8002590 <HAL_Delay>
  return USBH_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	460b      	mov	r3, r1
 800a702:	70fb      	strb	r3, [r7, #3]
 800a704:	4613      	mov	r3, r2
 800a706:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a70e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a710:	78fb      	ldrb	r3, [r7, #3]
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	212c      	movs	r1, #44	; 0x2c
 800a716:	fb01 f303 	mul.w	r3, r1, r3
 800a71a:	4413      	add	r3, r2
 800a71c:	333b      	adds	r3, #59	; 0x3b
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d009      	beq.n	800a738 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a724:	78fb      	ldrb	r3, [r7, #3]
 800a726:	68fa      	ldr	r2, [r7, #12]
 800a728:	212c      	movs	r1, #44	; 0x2c
 800a72a:	fb01 f303 	mul.w	r3, r1, r3
 800a72e:	4413      	add	r3, r2
 800a730:	3354      	adds	r3, #84	; 0x54
 800a732:	78ba      	ldrb	r2, [r7, #2]
 800a734:	701a      	strb	r2, [r3, #0]
 800a736:	e008      	b.n	800a74a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a738:	78fb      	ldrb	r3, [r7, #3]
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	212c      	movs	r1, #44	; 0x2c
 800a73e:	fb01 f303 	mul.w	r3, r1, r3
 800a742:	4413      	add	r3, r2
 800a744:	3355      	adds	r3, #85	; 0x55
 800a746:	78ba      	ldrb	r2, [r7, #2]
 800a748:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f7f7 ff15 	bl	8002590 <HAL_Delay>
}
 800a766:	bf00      	nop
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
	...

0800a770 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	4603      	mov	r3, r0
 800a778:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a77e:	79fb      	ldrb	r3, [r7, #7]
 800a780:	2b03      	cmp	r3, #3
 800a782:	d817      	bhi.n	800a7b4 <USBH_Get_USB_Status+0x44>
 800a784:	a201      	add	r2, pc, #4	; (adr r2, 800a78c <USBH_Get_USB_Status+0x1c>)
 800a786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a78a:	bf00      	nop
 800a78c:	0800a79d 	.word	0x0800a79d
 800a790:	0800a7a3 	.word	0x0800a7a3
 800a794:	0800a7a9 	.word	0x0800a7a9
 800a798:	0800a7af 	.word	0x0800a7af
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a79c:	2300      	movs	r3, #0
 800a79e:	73fb      	strb	r3, [r7, #15]
    break;
 800a7a0:	e00b      	b.n	800a7ba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a7a2:	2302      	movs	r3, #2
 800a7a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a7a6:	e008      	b.n	800a7ba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a7ac:	e005      	b.n	800a7ba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a7ae:	2302      	movs	r3, #2
 800a7b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a7b2:	e002      	b.n	800a7ba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a7b4:	2302      	movs	r3, #2
 800a7b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a7b8:	bf00      	nop
  }
  return usb_status;
 800a7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3714      	adds	r7, #20
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a7d2:	79fb      	ldrb	r3, [r7, #7]
 800a7d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800a7d6:	79fb      	ldrb	r3, [r7, #7]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d102      	bne.n	800a7e2 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	73fb      	strb	r3, [r7, #15]
 800a7e0:	e001      	b.n	800a7e6 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800a7e6:	7bfb      	ldrb	r3, [r7, #15]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	2110      	movs	r1, #16
 800a7ec:	4803      	ldr	r0, [pc, #12]	; (800a7fc <MX_DriverVbusHS+0x34>)
 800a7ee:	f7f8 fb89 	bl	8002f04 <HAL_GPIO_WritePin>
}
 800a7f2:	bf00      	nop
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	40020800 	.word	0x40020800

0800a800 <arm_std_f32>:
 800a800:	2901      	cmp	r1, #1
 800a802:	d97d      	bls.n	800a900 <arm_std_f32+0x100>
 800a804:	b530      	push	{r4, r5, lr}
 800a806:	ed2d 8b02 	vpush	{d8}
 800a80a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800a910 <arm_std_f32+0x110>
 800a80e:	088d      	lsrs	r5, r1, #2
 800a810:	b083      	sub	sp, #12
 800a812:	eef0 4a47 	vmov.f32	s9, s14
 800a816:	d028      	beq.n	800a86a <arm_std_f32+0x6a>
 800a818:	f100 0310 	add.w	r3, r0, #16
 800a81c:	462c      	mov	r4, r5
 800a81e:	ed53 7a04 	vldr	s15, [r3, #-16]
 800a822:	ed13 5a03 	vldr	s10, [r3, #-12]
 800a826:	ed53 5a02 	vldr	s11, [r3, #-8]
 800a82a:	ed13 6a01 	vldr	s12, [r3, #-4]
 800a82e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800a832:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800a836:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a83a:	ee65 6a05 	vmul.f32	s13, s10, s10
 800a83e:	ee77 7a85 	vadd.f32	s15, s15, s10
 800a842:	ee76 6a87 	vadd.f32	s13, s13, s14
 800a846:	ee25 7aa5 	vmul.f32	s14, s11, s11
 800a84a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a84e:	ee77 6a26 	vadd.f32	s13, s14, s13
 800a852:	ee26 7a06 	vmul.f32	s14, s12, s12
 800a856:	3c01      	subs	r4, #1
 800a858:	ee77 4a86 	vadd.f32	s9, s15, s12
 800a85c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a860:	f103 0310 	add.w	r3, r3, #16
 800a864:	d1db      	bne.n	800a81e <arm_std_f32+0x1e>
 800a866:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800a86a:	f011 0303 	ands.w	r3, r1, #3
 800a86e:	d01b      	beq.n	800a8a8 <arm_std_f32+0xa8>
 800a870:	edd0 7a00 	vldr	s15, [r0]
 800a874:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800a878:	3b01      	subs	r3, #1
 800a87a:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800a87e:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a882:	d011      	beq.n	800a8a8 <arm_std_f32+0xa8>
 800a884:	edd0 7a01 	vldr	s15, [r0, #4]
 800a888:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800a892:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a896:	d007      	beq.n	800a8a8 <arm_std_f32+0xa8>
 800a898:	edd0 7a02 	vldr	s15, [r0, #8]
 800a89c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800a8a0:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800a8a4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a8a8:	ee07 1a90 	vmov	s15, r1
 800a8ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8b0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a8b4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800a8b8:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 800a8bc:	eec7 5a86 	vdiv.f32	s11, s15, s12
 800a8c0:	ee87 0a06 	vdiv.f32	s0, s14, s12
 800a8c4:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800a8c8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a8cc:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a8d0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a8d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8d8:	db0c      	blt.n	800a8f4 <arm_std_f32+0xf4>
 800a8da:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8e2:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a8e6:	d40e      	bmi.n	800a906 <arm_std_f32+0x106>
 800a8e8:	ed82 8a00 	vstr	s16, [r2]
 800a8ec:	b003      	add	sp, #12
 800a8ee:	ecbd 8b02 	vpop	{d8}
 800a8f2:	bd30      	pop	{r4, r5, pc}
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	6013      	str	r3, [r2, #0]
 800a8f8:	b003      	add	sp, #12
 800a8fa:	ecbd 8b02 	vpop	{d8}
 800a8fe:	bd30      	pop	{r4, r5, pc}
 800a900:	2300      	movs	r3, #0
 800a902:	6013      	str	r3, [r2, #0]
 800a904:	4770      	bx	lr
 800a906:	9201      	str	r2, [sp, #4]
 800a908:	f004 fd4a 	bl	800f3a0 <sqrtf>
 800a90c:	9a01      	ldr	r2, [sp, #4]
 800a90e:	e7eb      	b.n	800a8e8 <arm_std_f32+0xe8>
 800a910:	00000000 	.word	0x00000000

0800a914 <__errno>:
 800a914:	4b01      	ldr	r3, [pc, #4]	; (800a91c <__errno+0x8>)
 800a916:	6818      	ldr	r0, [r3, #0]
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	2000052c 	.word	0x2000052c

0800a920 <__libc_init_array>:
 800a920:	b570      	push	{r4, r5, r6, lr}
 800a922:	4d0d      	ldr	r5, [pc, #52]	; (800a958 <__libc_init_array+0x38>)
 800a924:	4c0d      	ldr	r4, [pc, #52]	; (800a95c <__libc_init_array+0x3c>)
 800a926:	1b64      	subs	r4, r4, r5
 800a928:	10a4      	asrs	r4, r4, #2
 800a92a:	2600      	movs	r6, #0
 800a92c:	42a6      	cmp	r6, r4
 800a92e:	d109      	bne.n	800a944 <__libc_init_array+0x24>
 800a930:	4d0b      	ldr	r5, [pc, #44]	; (800a960 <__libc_init_array+0x40>)
 800a932:	4c0c      	ldr	r4, [pc, #48]	; (800a964 <__libc_init_array+0x44>)
 800a934:	f005 f97e 	bl	800fc34 <_init>
 800a938:	1b64      	subs	r4, r4, r5
 800a93a:	10a4      	asrs	r4, r4, #2
 800a93c:	2600      	movs	r6, #0
 800a93e:	42a6      	cmp	r6, r4
 800a940:	d105      	bne.n	800a94e <__libc_init_array+0x2e>
 800a942:	bd70      	pop	{r4, r5, r6, pc}
 800a944:	f855 3b04 	ldr.w	r3, [r5], #4
 800a948:	4798      	blx	r3
 800a94a:	3601      	adds	r6, #1
 800a94c:	e7ee      	b.n	800a92c <__libc_init_array+0xc>
 800a94e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a952:	4798      	blx	r3
 800a954:	3601      	adds	r6, #1
 800a956:	e7f2      	b.n	800a93e <__libc_init_array+0x1e>
 800a958:	08010144 	.word	0x08010144
 800a95c:	08010144 	.word	0x08010144
 800a960:	08010144 	.word	0x08010144
 800a964:	08010148 	.word	0x08010148

0800a968 <malloc>:
 800a968:	4b02      	ldr	r3, [pc, #8]	; (800a974 <malloc+0xc>)
 800a96a:	4601      	mov	r1, r0
 800a96c:	6818      	ldr	r0, [r3, #0]
 800a96e:	f000 b87f 	b.w	800aa70 <_malloc_r>
 800a972:	bf00      	nop
 800a974:	2000052c 	.word	0x2000052c

0800a978 <free>:
 800a978:	4b02      	ldr	r3, [pc, #8]	; (800a984 <free+0xc>)
 800a97a:	4601      	mov	r1, r0
 800a97c:	6818      	ldr	r0, [r3, #0]
 800a97e:	f000 b80b 	b.w	800a998 <_free_r>
 800a982:	bf00      	nop
 800a984:	2000052c 	.word	0x2000052c

0800a988 <memset>:
 800a988:	4402      	add	r2, r0
 800a98a:	4603      	mov	r3, r0
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d100      	bne.n	800a992 <memset+0xa>
 800a990:	4770      	bx	lr
 800a992:	f803 1b01 	strb.w	r1, [r3], #1
 800a996:	e7f9      	b.n	800a98c <memset+0x4>

0800a998 <_free_r>:
 800a998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a99a:	2900      	cmp	r1, #0
 800a99c:	d044      	beq.n	800aa28 <_free_r+0x90>
 800a99e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9a2:	9001      	str	r0, [sp, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f1a1 0404 	sub.w	r4, r1, #4
 800a9aa:	bfb8      	it	lt
 800a9ac:	18e4      	addlt	r4, r4, r3
 800a9ae:	f003 f94d 	bl	800dc4c <__malloc_lock>
 800a9b2:	4a1e      	ldr	r2, [pc, #120]	; (800aa2c <_free_r+0x94>)
 800a9b4:	9801      	ldr	r0, [sp, #4]
 800a9b6:	6813      	ldr	r3, [r2, #0]
 800a9b8:	b933      	cbnz	r3, 800a9c8 <_free_r+0x30>
 800a9ba:	6063      	str	r3, [r4, #4]
 800a9bc:	6014      	str	r4, [r2, #0]
 800a9be:	b003      	add	sp, #12
 800a9c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9c4:	f003 b948 	b.w	800dc58 <__malloc_unlock>
 800a9c8:	42a3      	cmp	r3, r4
 800a9ca:	d908      	bls.n	800a9de <_free_r+0x46>
 800a9cc:	6825      	ldr	r5, [r4, #0]
 800a9ce:	1961      	adds	r1, r4, r5
 800a9d0:	428b      	cmp	r3, r1
 800a9d2:	bf01      	itttt	eq
 800a9d4:	6819      	ldreq	r1, [r3, #0]
 800a9d6:	685b      	ldreq	r3, [r3, #4]
 800a9d8:	1949      	addeq	r1, r1, r5
 800a9da:	6021      	streq	r1, [r4, #0]
 800a9dc:	e7ed      	b.n	800a9ba <_free_r+0x22>
 800a9de:	461a      	mov	r2, r3
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	b10b      	cbz	r3, 800a9e8 <_free_r+0x50>
 800a9e4:	42a3      	cmp	r3, r4
 800a9e6:	d9fa      	bls.n	800a9de <_free_r+0x46>
 800a9e8:	6811      	ldr	r1, [r2, #0]
 800a9ea:	1855      	adds	r5, r2, r1
 800a9ec:	42a5      	cmp	r5, r4
 800a9ee:	d10b      	bne.n	800aa08 <_free_r+0x70>
 800a9f0:	6824      	ldr	r4, [r4, #0]
 800a9f2:	4421      	add	r1, r4
 800a9f4:	1854      	adds	r4, r2, r1
 800a9f6:	42a3      	cmp	r3, r4
 800a9f8:	6011      	str	r1, [r2, #0]
 800a9fa:	d1e0      	bne.n	800a9be <_free_r+0x26>
 800a9fc:	681c      	ldr	r4, [r3, #0]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	6053      	str	r3, [r2, #4]
 800aa02:	4421      	add	r1, r4
 800aa04:	6011      	str	r1, [r2, #0]
 800aa06:	e7da      	b.n	800a9be <_free_r+0x26>
 800aa08:	d902      	bls.n	800aa10 <_free_r+0x78>
 800aa0a:	230c      	movs	r3, #12
 800aa0c:	6003      	str	r3, [r0, #0]
 800aa0e:	e7d6      	b.n	800a9be <_free_r+0x26>
 800aa10:	6825      	ldr	r5, [r4, #0]
 800aa12:	1961      	adds	r1, r4, r5
 800aa14:	428b      	cmp	r3, r1
 800aa16:	bf04      	itt	eq
 800aa18:	6819      	ldreq	r1, [r3, #0]
 800aa1a:	685b      	ldreq	r3, [r3, #4]
 800aa1c:	6063      	str	r3, [r4, #4]
 800aa1e:	bf04      	itt	eq
 800aa20:	1949      	addeq	r1, r1, r5
 800aa22:	6021      	streq	r1, [r4, #0]
 800aa24:	6054      	str	r4, [r2, #4]
 800aa26:	e7ca      	b.n	800a9be <_free_r+0x26>
 800aa28:	b003      	add	sp, #12
 800aa2a:	bd30      	pop	{r4, r5, pc}
 800aa2c:	20001104 	.word	0x20001104

0800aa30 <sbrk_aligned>:
 800aa30:	b570      	push	{r4, r5, r6, lr}
 800aa32:	4e0e      	ldr	r6, [pc, #56]	; (800aa6c <sbrk_aligned+0x3c>)
 800aa34:	460c      	mov	r4, r1
 800aa36:	6831      	ldr	r1, [r6, #0]
 800aa38:	4605      	mov	r5, r0
 800aa3a:	b911      	cbnz	r1, 800aa42 <sbrk_aligned+0x12>
 800aa3c:	f000 ff1e 	bl	800b87c <_sbrk_r>
 800aa40:	6030      	str	r0, [r6, #0]
 800aa42:	4621      	mov	r1, r4
 800aa44:	4628      	mov	r0, r5
 800aa46:	f000 ff19 	bl	800b87c <_sbrk_r>
 800aa4a:	1c43      	adds	r3, r0, #1
 800aa4c:	d00a      	beq.n	800aa64 <sbrk_aligned+0x34>
 800aa4e:	1cc4      	adds	r4, r0, #3
 800aa50:	f024 0403 	bic.w	r4, r4, #3
 800aa54:	42a0      	cmp	r0, r4
 800aa56:	d007      	beq.n	800aa68 <sbrk_aligned+0x38>
 800aa58:	1a21      	subs	r1, r4, r0
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	f000 ff0e 	bl	800b87c <_sbrk_r>
 800aa60:	3001      	adds	r0, #1
 800aa62:	d101      	bne.n	800aa68 <sbrk_aligned+0x38>
 800aa64:	f04f 34ff 	mov.w	r4, #4294967295
 800aa68:	4620      	mov	r0, r4
 800aa6a:	bd70      	pop	{r4, r5, r6, pc}
 800aa6c:	20001108 	.word	0x20001108

0800aa70 <_malloc_r>:
 800aa70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa74:	1ccd      	adds	r5, r1, #3
 800aa76:	f025 0503 	bic.w	r5, r5, #3
 800aa7a:	3508      	adds	r5, #8
 800aa7c:	2d0c      	cmp	r5, #12
 800aa7e:	bf38      	it	cc
 800aa80:	250c      	movcc	r5, #12
 800aa82:	2d00      	cmp	r5, #0
 800aa84:	4607      	mov	r7, r0
 800aa86:	db01      	blt.n	800aa8c <_malloc_r+0x1c>
 800aa88:	42a9      	cmp	r1, r5
 800aa8a:	d905      	bls.n	800aa98 <_malloc_r+0x28>
 800aa8c:	230c      	movs	r3, #12
 800aa8e:	603b      	str	r3, [r7, #0]
 800aa90:	2600      	movs	r6, #0
 800aa92:	4630      	mov	r0, r6
 800aa94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa98:	4e2e      	ldr	r6, [pc, #184]	; (800ab54 <_malloc_r+0xe4>)
 800aa9a:	f003 f8d7 	bl	800dc4c <__malloc_lock>
 800aa9e:	6833      	ldr	r3, [r6, #0]
 800aaa0:	461c      	mov	r4, r3
 800aaa2:	bb34      	cbnz	r4, 800aaf2 <_malloc_r+0x82>
 800aaa4:	4629      	mov	r1, r5
 800aaa6:	4638      	mov	r0, r7
 800aaa8:	f7ff ffc2 	bl	800aa30 <sbrk_aligned>
 800aaac:	1c43      	adds	r3, r0, #1
 800aaae:	4604      	mov	r4, r0
 800aab0:	d14d      	bne.n	800ab4e <_malloc_r+0xde>
 800aab2:	6834      	ldr	r4, [r6, #0]
 800aab4:	4626      	mov	r6, r4
 800aab6:	2e00      	cmp	r6, #0
 800aab8:	d140      	bne.n	800ab3c <_malloc_r+0xcc>
 800aaba:	6823      	ldr	r3, [r4, #0]
 800aabc:	4631      	mov	r1, r6
 800aabe:	4638      	mov	r0, r7
 800aac0:	eb04 0803 	add.w	r8, r4, r3
 800aac4:	f000 feda 	bl	800b87c <_sbrk_r>
 800aac8:	4580      	cmp	r8, r0
 800aaca:	d13a      	bne.n	800ab42 <_malloc_r+0xd2>
 800aacc:	6821      	ldr	r1, [r4, #0]
 800aace:	3503      	adds	r5, #3
 800aad0:	1a6d      	subs	r5, r5, r1
 800aad2:	f025 0503 	bic.w	r5, r5, #3
 800aad6:	3508      	adds	r5, #8
 800aad8:	2d0c      	cmp	r5, #12
 800aada:	bf38      	it	cc
 800aadc:	250c      	movcc	r5, #12
 800aade:	4629      	mov	r1, r5
 800aae0:	4638      	mov	r0, r7
 800aae2:	f7ff ffa5 	bl	800aa30 <sbrk_aligned>
 800aae6:	3001      	adds	r0, #1
 800aae8:	d02b      	beq.n	800ab42 <_malloc_r+0xd2>
 800aaea:	6823      	ldr	r3, [r4, #0]
 800aaec:	442b      	add	r3, r5
 800aaee:	6023      	str	r3, [r4, #0]
 800aaf0:	e00e      	b.n	800ab10 <_malloc_r+0xa0>
 800aaf2:	6822      	ldr	r2, [r4, #0]
 800aaf4:	1b52      	subs	r2, r2, r5
 800aaf6:	d41e      	bmi.n	800ab36 <_malloc_r+0xc6>
 800aaf8:	2a0b      	cmp	r2, #11
 800aafa:	d916      	bls.n	800ab2a <_malloc_r+0xba>
 800aafc:	1961      	adds	r1, r4, r5
 800aafe:	42a3      	cmp	r3, r4
 800ab00:	6025      	str	r5, [r4, #0]
 800ab02:	bf18      	it	ne
 800ab04:	6059      	strne	r1, [r3, #4]
 800ab06:	6863      	ldr	r3, [r4, #4]
 800ab08:	bf08      	it	eq
 800ab0a:	6031      	streq	r1, [r6, #0]
 800ab0c:	5162      	str	r2, [r4, r5]
 800ab0e:	604b      	str	r3, [r1, #4]
 800ab10:	4638      	mov	r0, r7
 800ab12:	f104 060b 	add.w	r6, r4, #11
 800ab16:	f003 f89f 	bl	800dc58 <__malloc_unlock>
 800ab1a:	f026 0607 	bic.w	r6, r6, #7
 800ab1e:	1d23      	adds	r3, r4, #4
 800ab20:	1af2      	subs	r2, r6, r3
 800ab22:	d0b6      	beq.n	800aa92 <_malloc_r+0x22>
 800ab24:	1b9b      	subs	r3, r3, r6
 800ab26:	50a3      	str	r3, [r4, r2]
 800ab28:	e7b3      	b.n	800aa92 <_malloc_r+0x22>
 800ab2a:	6862      	ldr	r2, [r4, #4]
 800ab2c:	42a3      	cmp	r3, r4
 800ab2e:	bf0c      	ite	eq
 800ab30:	6032      	streq	r2, [r6, #0]
 800ab32:	605a      	strne	r2, [r3, #4]
 800ab34:	e7ec      	b.n	800ab10 <_malloc_r+0xa0>
 800ab36:	4623      	mov	r3, r4
 800ab38:	6864      	ldr	r4, [r4, #4]
 800ab3a:	e7b2      	b.n	800aaa2 <_malloc_r+0x32>
 800ab3c:	4634      	mov	r4, r6
 800ab3e:	6876      	ldr	r6, [r6, #4]
 800ab40:	e7b9      	b.n	800aab6 <_malloc_r+0x46>
 800ab42:	230c      	movs	r3, #12
 800ab44:	603b      	str	r3, [r7, #0]
 800ab46:	4638      	mov	r0, r7
 800ab48:	f003 f886 	bl	800dc58 <__malloc_unlock>
 800ab4c:	e7a1      	b.n	800aa92 <_malloc_r+0x22>
 800ab4e:	6025      	str	r5, [r4, #0]
 800ab50:	e7de      	b.n	800ab10 <_malloc_r+0xa0>
 800ab52:	bf00      	nop
 800ab54:	20001104 	.word	0x20001104

0800ab58 <__cvt>:
 800ab58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab5c:	ec55 4b10 	vmov	r4, r5, d0
 800ab60:	2d00      	cmp	r5, #0
 800ab62:	460e      	mov	r6, r1
 800ab64:	4619      	mov	r1, r3
 800ab66:	462b      	mov	r3, r5
 800ab68:	bfbb      	ittet	lt
 800ab6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ab6e:	461d      	movlt	r5, r3
 800ab70:	2300      	movge	r3, #0
 800ab72:	232d      	movlt	r3, #45	; 0x2d
 800ab74:	700b      	strb	r3, [r1, #0]
 800ab76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ab7c:	4691      	mov	r9, r2
 800ab7e:	f023 0820 	bic.w	r8, r3, #32
 800ab82:	bfbc      	itt	lt
 800ab84:	4622      	movlt	r2, r4
 800ab86:	4614      	movlt	r4, r2
 800ab88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab8c:	d005      	beq.n	800ab9a <__cvt+0x42>
 800ab8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ab92:	d100      	bne.n	800ab96 <__cvt+0x3e>
 800ab94:	3601      	adds	r6, #1
 800ab96:	2102      	movs	r1, #2
 800ab98:	e000      	b.n	800ab9c <__cvt+0x44>
 800ab9a:	2103      	movs	r1, #3
 800ab9c:	ab03      	add	r3, sp, #12
 800ab9e:	9301      	str	r3, [sp, #4]
 800aba0:	ab02      	add	r3, sp, #8
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	ec45 4b10 	vmov	d0, r4, r5
 800aba8:	4653      	mov	r3, sl
 800abaa:	4632      	mov	r2, r6
 800abac:	f001 fdd4 	bl	800c758 <_dtoa_r>
 800abb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800abb4:	4607      	mov	r7, r0
 800abb6:	d102      	bne.n	800abbe <__cvt+0x66>
 800abb8:	f019 0f01 	tst.w	r9, #1
 800abbc:	d022      	beq.n	800ac04 <__cvt+0xac>
 800abbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800abc2:	eb07 0906 	add.w	r9, r7, r6
 800abc6:	d110      	bne.n	800abea <__cvt+0x92>
 800abc8:	783b      	ldrb	r3, [r7, #0]
 800abca:	2b30      	cmp	r3, #48	; 0x30
 800abcc:	d10a      	bne.n	800abe4 <__cvt+0x8c>
 800abce:	2200      	movs	r2, #0
 800abd0:	2300      	movs	r3, #0
 800abd2:	4620      	mov	r0, r4
 800abd4:	4629      	mov	r1, r5
 800abd6:	f7f5 ff87 	bl	8000ae8 <__aeabi_dcmpeq>
 800abda:	b918      	cbnz	r0, 800abe4 <__cvt+0x8c>
 800abdc:	f1c6 0601 	rsb	r6, r6, #1
 800abe0:	f8ca 6000 	str.w	r6, [sl]
 800abe4:	f8da 3000 	ldr.w	r3, [sl]
 800abe8:	4499      	add	r9, r3
 800abea:	2200      	movs	r2, #0
 800abec:	2300      	movs	r3, #0
 800abee:	4620      	mov	r0, r4
 800abf0:	4629      	mov	r1, r5
 800abf2:	f7f5 ff79 	bl	8000ae8 <__aeabi_dcmpeq>
 800abf6:	b108      	cbz	r0, 800abfc <__cvt+0xa4>
 800abf8:	f8cd 900c 	str.w	r9, [sp, #12]
 800abfc:	2230      	movs	r2, #48	; 0x30
 800abfe:	9b03      	ldr	r3, [sp, #12]
 800ac00:	454b      	cmp	r3, r9
 800ac02:	d307      	bcc.n	800ac14 <__cvt+0xbc>
 800ac04:	9b03      	ldr	r3, [sp, #12]
 800ac06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac08:	1bdb      	subs	r3, r3, r7
 800ac0a:	4638      	mov	r0, r7
 800ac0c:	6013      	str	r3, [r2, #0]
 800ac0e:	b004      	add	sp, #16
 800ac10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac14:	1c59      	adds	r1, r3, #1
 800ac16:	9103      	str	r1, [sp, #12]
 800ac18:	701a      	strb	r2, [r3, #0]
 800ac1a:	e7f0      	b.n	800abfe <__cvt+0xa6>

0800ac1c <__exponent>:
 800ac1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2900      	cmp	r1, #0
 800ac22:	bfb8      	it	lt
 800ac24:	4249      	neglt	r1, r1
 800ac26:	f803 2b02 	strb.w	r2, [r3], #2
 800ac2a:	bfb4      	ite	lt
 800ac2c:	222d      	movlt	r2, #45	; 0x2d
 800ac2e:	222b      	movge	r2, #43	; 0x2b
 800ac30:	2909      	cmp	r1, #9
 800ac32:	7042      	strb	r2, [r0, #1]
 800ac34:	dd2a      	ble.n	800ac8c <__exponent+0x70>
 800ac36:	f10d 0407 	add.w	r4, sp, #7
 800ac3a:	46a4      	mov	ip, r4
 800ac3c:	270a      	movs	r7, #10
 800ac3e:	46a6      	mov	lr, r4
 800ac40:	460a      	mov	r2, r1
 800ac42:	fb91 f6f7 	sdiv	r6, r1, r7
 800ac46:	fb07 1516 	mls	r5, r7, r6, r1
 800ac4a:	3530      	adds	r5, #48	; 0x30
 800ac4c:	2a63      	cmp	r2, #99	; 0x63
 800ac4e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ac52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ac56:	4631      	mov	r1, r6
 800ac58:	dcf1      	bgt.n	800ac3e <__exponent+0x22>
 800ac5a:	3130      	adds	r1, #48	; 0x30
 800ac5c:	f1ae 0502 	sub.w	r5, lr, #2
 800ac60:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ac64:	1c44      	adds	r4, r0, #1
 800ac66:	4629      	mov	r1, r5
 800ac68:	4561      	cmp	r1, ip
 800ac6a:	d30a      	bcc.n	800ac82 <__exponent+0x66>
 800ac6c:	f10d 0209 	add.w	r2, sp, #9
 800ac70:	eba2 020e 	sub.w	r2, r2, lr
 800ac74:	4565      	cmp	r5, ip
 800ac76:	bf88      	it	hi
 800ac78:	2200      	movhi	r2, #0
 800ac7a:	4413      	add	r3, r2
 800ac7c:	1a18      	subs	r0, r3, r0
 800ac7e:	b003      	add	sp, #12
 800ac80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac86:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ac8a:	e7ed      	b.n	800ac68 <__exponent+0x4c>
 800ac8c:	2330      	movs	r3, #48	; 0x30
 800ac8e:	3130      	adds	r1, #48	; 0x30
 800ac90:	7083      	strb	r3, [r0, #2]
 800ac92:	70c1      	strb	r1, [r0, #3]
 800ac94:	1d03      	adds	r3, r0, #4
 800ac96:	e7f1      	b.n	800ac7c <__exponent+0x60>

0800ac98 <_printf_float>:
 800ac98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9c:	ed2d 8b02 	vpush	{d8}
 800aca0:	b08d      	sub	sp, #52	; 0x34
 800aca2:	460c      	mov	r4, r1
 800aca4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aca8:	4616      	mov	r6, r2
 800acaa:	461f      	mov	r7, r3
 800acac:	4605      	mov	r5, r0
 800acae:	f002 ffa5 	bl	800dbfc <_localeconv_r>
 800acb2:	f8d0 a000 	ldr.w	sl, [r0]
 800acb6:	4650      	mov	r0, sl
 800acb8:	f7f5 fa9a 	bl	80001f0 <strlen>
 800acbc:	2300      	movs	r3, #0
 800acbe:	930a      	str	r3, [sp, #40]	; 0x28
 800acc0:	6823      	ldr	r3, [r4, #0]
 800acc2:	9305      	str	r3, [sp, #20]
 800acc4:	f8d8 3000 	ldr.w	r3, [r8]
 800acc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800accc:	3307      	adds	r3, #7
 800acce:	f023 0307 	bic.w	r3, r3, #7
 800acd2:	f103 0208 	add.w	r2, r3, #8
 800acd6:	f8c8 2000 	str.w	r2, [r8]
 800acda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acde:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ace2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ace6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800acea:	9307      	str	r3, [sp, #28]
 800acec:	f8cd 8018 	str.w	r8, [sp, #24]
 800acf0:	ee08 0a10 	vmov	s16, r0
 800acf4:	4b9f      	ldr	r3, [pc, #636]	; (800af74 <_printf_float+0x2dc>)
 800acf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acfa:	f04f 32ff 	mov.w	r2, #4294967295
 800acfe:	f7f5 ff25 	bl	8000b4c <__aeabi_dcmpun>
 800ad02:	bb88      	cbnz	r0, 800ad68 <_printf_float+0xd0>
 800ad04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad08:	4b9a      	ldr	r3, [pc, #616]	; (800af74 <_printf_float+0x2dc>)
 800ad0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad0e:	f7f5 feff 	bl	8000b10 <__aeabi_dcmple>
 800ad12:	bb48      	cbnz	r0, 800ad68 <_printf_float+0xd0>
 800ad14:	2200      	movs	r2, #0
 800ad16:	2300      	movs	r3, #0
 800ad18:	4640      	mov	r0, r8
 800ad1a:	4649      	mov	r1, r9
 800ad1c:	f7f5 feee 	bl	8000afc <__aeabi_dcmplt>
 800ad20:	b110      	cbz	r0, 800ad28 <_printf_float+0x90>
 800ad22:	232d      	movs	r3, #45	; 0x2d
 800ad24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad28:	4b93      	ldr	r3, [pc, #588]	; (800af78 <_printf_float+0x2e0>)
 800ad2a:	4894      	ldr	r0, [pc, #592]	; (800af7c <_printf_float+0x2e4>)
 800ad2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ad30:	bf94      	ite	ls
 800ad32:	4698      	movls	r8, r3
 800ad34:	4680      	movhi	r8, r0
 800ad36:	2303      	movs	r3, #3
 800ad38:	6123      	str	r3, [r4, #16]
 800ad3a:	9b05      	ldr	r3, [sp, #20]
 800ad3c:	f023 0204 	bic.w	r2, r3, #4
 800ad40:	6022      	str	r2, [r4, #0]
 800ad42:	f04f 0900 	mov.w	r9, #0
 800ad46:	9700      	str	r7, [sp, #0]
 800ad48:	4633      	mov	r3, r6
 800ad4a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ad4c:	4621      	mov	r1, r4
 800ad4e:	4628      	mov	r0, r5
 800ad50:	f000 f9d8 	bl	800b104 <_printf_common>
 800ad54:	3001      	adds	r0, #1
 800ad56:	f040 8090 	bne.w	800ae7a <_printf_float+0x1e2>
 800ad5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad5e:	b00d      	add	sp, #52	; 0x34
 800ad60:	ecbd 8b02 	vpop	{d8}
 800ad64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad68:	4642      	mov	r2, r8
 800ad6a:	464b      	mov	r3, r9
 800ad6c:	4640      	mov	r0, r8
 800ad6e:	4649      	mov	r1, r9
 800ad70:	f7f5 feec 	bl	8000b4c <__aeabi_dcmpun>
 800ad74:	b140      	cbz	r0, 800ad88 <_printf_float+0xf0>
 800ad76:	464b      	mov	r3, r9
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	bfbc      	itt	lt
 800ad7c:	232d      	movlt	r3, #45	; 0x2d
 800ad7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ad82:	487f      	ldr	r0, [pc, #508]	; (800af80 <_printf_float+0x2e8>)
 800ad84:	4b7f      	ldr	r3, [pc, #508]	; (800af84 <_printf_float+0x2ec>)
 800ad86:	e7d1      	b.n	800ad2c <_printf_float+0x94>
 800ad88:	6863      	ldr	r3, [r4, #4]
 800ad8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ad8e:	9206      	str	r2, [sp, #24]
 800ad90:	1c5a      	adds	r2, r3, #1
 800ad92:	d13f      	bne.n	800ae14 <_printf_float+0x17c>
 800ad94:	2306      	movs	r3, #6
 800ad96:	6063      	str	r3, [r4, #4]
 800ad98:	9b05      	ldr	r3, [sp, #20]
 800ad9a:	6861      	ldr	r1, [r4, #4]
 800ad9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ada0:	2300      	movs	r3, #0
 800ada2:	9303      	str	r3, [sp, #12]
 800ada4:	ab0a      	add	r3, sp, #40	; 0x28
 800ada6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800adaa:	ab09      	add	r3, sp, #36	; 0x24
 800adac:	ec49 8b10 	vmov	d0, r8, r9
 800adb0:	9300      	str	r3, [sp, #0]
 800adb2:	6022      	str	r2, [r4, #0]
 800adb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800adb8:	4628      	mov	r0, r5
 800adba:	f7ff fecd 	bl	800ab58 <__cvt>
 800adbe:	9b06      	ldr	r3, [sp, #24]
 800adc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800adc2:	2b47      	cmp	r3, #71	; 0x47
 800adc4:	4680      	mov	r8, r0
 800adc6:	d108      	bne.n	800adda <_printf_float+0x142>
 800adc8:	1cc8      	adds	r0, r1, #3
 800adca:	db02      	blt.n	800add2 <_printf_float+0x13a>
 800adcc:	6863      	ldr	r3, [r4, #4]
 800adce:	4299      	cmp	r1, r3
 800add0:	dd41      	ble.n	800ae56 <_printf_float+0x1be>
 800add2:	f1ab 0b02 	sub.w	fp, fp, #2
 800add6:	fa5f fb8b 	uxtb.w	fp, fp
 800adda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800adde:	d820      	bhi.n	800ae22 <_printf_float+0x18a>
 800ade0:	3901      	subs	r1, #1
 800ade2:	465a      	mov	r2, fp
 800ade4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ade8:	9109      	str	r1, [sp, #36]	; 0x24
 800adea:	f7ff ff17 	bl	800ac1c <__exponent>
 800adee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adf0:	1813      	adds	r3, r2, r0
 800adf2:	2a01      	cmp	r2, #1
 800adf4:	4681      	mov	r9, r0
 800adf6:	6123      	str	r3, [r4, #16]
 800adf8:	dc02      	bgt.n	800ae00 <_printf_float+0x168>
 800adfa:	6822      	ldr	r2, [r4, #0]
 800adfc:	07d2      	lsls	r2, r2, #31
 800adfe:	d501      	bpl.n	800ae04 <_printf_float+0x16c>
 800ae00:	3301      	adds	r3, #1
 800ae02:	6123      	str	r3, [r4, #16]
 800ae04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d09c      	beq.n	800ad46 <_printf_float+0xae>
 800ae0c:	232d      	movs	r3, #45	; 0x2d
 800ae0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae12:	e798      	b.n	800ad46 <_printf_float+0xae>
 800ae14:	9a06      	ldr	r2, [sp, #24]
 800ae16:	2a47      	cmp	r2, #71	; 0x47
 800ae18:	d1be      	bne.n	800ad98 <_printf_float+0x100>
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1bc      	bne.n	800ad98 <_printf_float+0x100>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e7b9      	b.n	800ad96 <_printf_float+0xfe>
 800ae22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ae26:	d118      	bne.n	800ae5a <_printf_float+0x1c2>
 800ae28:	2900      	cmp	r1, #0
 800ae2a:	6863      	ldr	r3, [r4, #4]
 800ae2c:	dd0b      	ble.n	800ae46 <_printf_float+0x1ae>
 800ae2e:	6121      	str	r1, [r4, #16]
 800ae30:	b913      	cbnz	r3, 800ae38 <_printf_float+0x1a0>
 800ae32:	6822      	ldr	r2, [r4, #0]
 800ae34:	07d0      	lsls	r0, r2, #31
 800ae36:	d502      	bpl.n	800ae3e <_printf_float+0x1a6>
 800ae38:	3301      	adds	r3, #1
 800ae3a:	440b      	add	r3, r1
 800ae3c:	6123      	str	r3, [r4, #16]
 800ae3e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ae40:	f04f 0900 	mov.w	r9, #0
 800ae44:	e7de      	b.n	800ae04 <_printf_float+0x16c>
 800ae46:	b913      	cbnz	r3, 800ae4e <_printf_float+0x1b6>
 800ae48:	6822      	ldr	r2, [r4, #0]
 800ae4a:	07d2      	lsls	r2, r2, #31
 800ae4c:	d501      	bpl.n	800ae52 <_printf_float+0x1ba>
 800ae4e:	3302      	adds	r3, #2
 800ae50:	e7f4      	b.n	800ae3c <_printf_float+0x1a4>
 800ae52:	2301      	movs	r3, #1
 800ae54:	e7f2      	b.n	800ae3c <_printf_float+0x1a4>
 800ae56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ae5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae5c:	4299      	cmp	r1, r3
 800ae5e:	db05      	blt.n	800ae6c <_printf_float+0x1d4>
 800ae60:	6823      	ldr	r3, [r4, #0]
 800ae62:	6121      	str	r1, [r4, #16]
 800ae64:	07d8      	lsls	r0, r3, #31
 800ae66:	d5ea      	bpl.n	800ae3e <_printf_float+0x1a6>
 800ae68:	1c4b      	adds	r3, r1, #1
 800ae6a:	e7e7      	b.n	800ae3c <_printf_float+0x1a4>
 800ae6c:	2900      	cmp	r1, #0
 800ae6e:	bfd4      	ite	le
 800ae70:	f1c1 0202 	rsble	r2, r1, #2
 800ae74:	2201      	movgt	r2, #1
 800ae76:	4413      	add	r3, r2
 800ae78:	e7e0      	b.n	800ae3c <_printf_float+0x1a4>
 800ae7a:	6823      	ldr	r3, [r4, #0]
 800ae7c:	055a      	lsls	r2, r3, #21
 800ae7e:	d407      	bmi.n	800ae90 <_printf_float+0x1f8>
 800ae80:	6923      	ldr	r3, [r4, #16]
 800ae82:	4642      	mov	r2, r8
 800ae84:	4631      	mov	r1, r6
 800ae86:	4628      	mov	r0, r5
 800ae88:	47b8      	blx	r7
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	d12c      	bne.n	800aee8 <_printf_float+0x250>
 800ae8e:	e764      	b.n	800ad5a <_printf_float+0xc2>
 800ae90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ae94:	f240 80e0 	bls.w	800b058 <_printf_float+0x3c0>
 800ae98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	2300      	movs	r3, #0
 800aea0:	f7f5 fe22 	bl	8000ae8 <__aeabi_dcmpeq>
 800aea4:	2800      	cmp	r0, #0
 800aea6:	d034      	beq.n	800af12 <_printf_float+0x27a>
 800aea8:	4a37      	ldr	r2, [pc, #220]	; (800af88 <_printf_float+0x2f0>)
 800aeaa:	2301      	movs	r3, #1
 800aeac:	4631      	mov	r1, r6
 800aeae:	4628      	mov	r0, r5
 800aeb0:	47b8      	blx	r7
 800aeb2:	3001      	adds	r0, #1
 800aeb4:	f43f af51 	beq.w	800ad5a <_printf_float+0xc2>
 800aeb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aebc:	429a      	cmp	r2, r3
 800aebe:	db02      	blt.n	800aec6 <_printf_float+0x22e>
 800aec0:	6823      	ldr	r3, [r4, #0]
 800aec2:	07d8      	lsls	r0, r3, #31
 800aec4:	d510      	bpl.n	800aee8 <_printf_float+0x250>
 800aec6:	ee18 3a10 	vmov	r3, s16
 800aeca:	4652      	mov	r2, sl
 800aecc:	4631      	mov	r1, r6
 800aece:	4628      	mov	r0, r5
 800aed0:	47b8      	blx	r7
 800aed2:	3001      	adds	r0, #1
 800aed4:	f43f af41 	beq.w	800ad5a <_printf_float+0xc2>
 800aed8:	f04f 0800 	mov.w	r8, #0
 800aedc:	f104 091a 	add.w	r9, r4, #26
 800aee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aee2:	3b01      	subs	r3, #1
 800aee4:	4543      	cmp	r3, r8
 800aee6:	dc09      	bgt.n	800aefc <_printf_float+0x264>
 800aee8:	6823      	ldr	r3, [r4, #0]
 800aeea:	079b      	lsls	r3, r3, #30
 800aeec:	f100 8105 	bmi.w	800b0fa <_printf_float+0x462>
 800aef0:	68e0      	ldr	r0, [r4, #12]
 800aef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aef4:	4298      	cmp	r0, r3
 800aef6:	bfb8      	it	lt
 800aef8:	4618      	movlt	r0, r3
 800aefa:	e730      	b.n	800ad5e <_printf_float+0xc6>
 800aefc:	2301      	movs	r3, #1
 800aefe:	464a      	mov	r2, r9
 800af00:	4631      	mov	r1, r6
 800af02:	4628      	mov	r0, r5
 800af04:	47b8      	blx	r7
 800af06:	3001      	adds	r0, #1
 800af08:	f43f af27 	beq.w	800ad5a <_printf_float+0xc2>
 800af0c:	f108 0801 	add.w	r8, r8, #1
 800af10:	e7e6      	b.n	800aee0 <_printf_float+0x248>
 800af12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af14:	2b00      	cmp	r3, #0
 800af16:	dc39      	bgt.n	800af8c <_printf_float+0x2f4>
 800af18:	4a1b      	ldr	r2, [pc, #108]	; (800af88 <_printf_float+0x2f0>)
 800af1a:	2301      	movs	r3, #1
 800af1c:	4631      	mov	r1, r6
 800af1e:	4628      	mov	r0, r5
 800af20:	47b8      	blx	r7
 800af22:	3001      	adds	r0, #1
 800af24:	f43f af19 	beq.w	800ad5a <_printf_float+0xc2>
 800af28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af2c:	4313      	orrs	r3, r2
 800af2e:	d102      	bne.n	800af36 <_printf_float+0x29e>
 800af30:	6823      	ldr	r3, [r4, #0]
 800af32:	07d9      	lsls	r1, r3, #31
 800af34:	d5d8      	bpl.n	800aee8 <_printf_float+0x250>
 800af36:	ee18 3a10 	vmov	r3, s16
 800af3a:	4652      	mov	r2, sl
 800af3c:	4631      	mov	r1, r6
 800af3e:	4628      	mov	r0, r5
 800af40:	47b8      	blx	r7
 800af42:	3001      	adds	r0, #1
 800af44:	f43f af09 	beq.w	800ad5a <_printf_float+0xc2>
 800af48:	f04f 0900 	mov.w	r9, #0
 800af4c:	f104 0a1a 	add.w	sl, r4, #26
 800af50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af52:	425b      	negs	r3, r3
 800af54:	454b      	cmp	r3, r9
 800af56:	dc01      	bgt.n	800af5c <_printf_float+0x2c4>
 800af58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af5a:	e792      	b.n	800ae82 <_printf_float+0x1ea>
 800af5c:	2301      	movs	r3, #1
 800af5e:	4652      	mov	r2, sl
 800af60:	4631      	mov	r1, r6
 800af62:	4628      	mov	r0, r5
 800af64:	47b8      	blx	r7
 800af66:	3001      	adds	r0, #1
 800af68:	f43f aef7 	beq.w	800ad5a <_printf_float+0xc2>
 800af6c:	f109 0901 	add.w	r9, r9, #1
 800af70:	e7ee      	b.n	800af50 <_printf_float+0x2b8>
 800af72:	bf00      	nop
 800af74:	7fefffff 	.word	0x7fefffff
 800af78:	0800fc78 	.word	0x0800fc78
 800af7c:	0800fc7c 	.word	0x0800fc7c
 800af80:	0800fc84 	.word	0x0800fc84
 800af84:	0800fc80 	.word	0x0800fc80
 800af88:	0800fc88 	.word	0x0800fc88
 800af8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af90:	429a      	cmp	r2, r3
 800af92:	bfa8      	it	ge
 800af94:	461a      	movge	r2, r3
 800af96:	2a00      	cmp	r2, #0
 800af98:	4691      	mov	r9, r2
 800af9a:	dc37      	bgt.n	800b00c <_printf_float+0x374>
 800af9c:	f04f 0b00 	mov.w	fp, #0
 800afa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afa4:	f104 021a 	add.w	r2, r4, #26
 800afa8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800afaa:	9305      	str	r3, [sp, #20]
 800afac:	eba3 0309 	sub.w	r3, r3, r9
 800afb0:	455b      	cmp	r3, fp
 800afb2:	dc33      	bgt.n	800b01c <_printf_float+0x384>
 800afb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800afb8:	429a      	cmp	r2, r3
 800afba:	db3b      	blt.n	800b034 <_printf_float+0x39c>
 800afbc:	6823      	ldr	r3, [r4, #0]
 800afbe:	07da      	lsls	r2, r3, #31
 800afc0:	d438      	bmi.n	800b034 <_printf_float+0x39c>
 800afc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afc4:	9a05      	ldr	r2, [sp, #20]
 800afc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800afc8:	1a9a      	subs	r2, r3, r2
 800afca:	eba3 0901 	sub.w	r9, r3, r1
 800afce:	4591      	cmp	r9, r2
 800afd0:	bfa8      	it	ge
 800afd2:	4691      	movge	r9, r2
 800afd4:	f1b9 0f00 	cmp.w	r9, #0
 800afd8:	dc35      	bgt.n	800b046 <_printf_float+0x3ae>
 800afda:	f04f 0800 	mov.w	r8, #0
 800afde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afe2:	f104 0a1a 	add.w	sl, r4, #26
 800afe6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800afea:	1a9b      	subs	r3, r3, r2
 800afec:	eba3 0309 	sub.w	r3, r3, r9
 800aff0:	4543      	cmp	r3, r8
 800aff2:	f77f af79 	ble.w	800aee8 <_printf_float+0x250>
 800aff6:	2301      	movs	r3, #1
 800aff8:	4652      	mov	r2, sl
 800affa:	4631      	mov	r1, r6
 800affc:	4628      	mov	r0, r5
 800affe:	47b8      	blx	r7
 800b000:	3001      	adds	r0, #1
 800b002:	f43f aeaa 	beq.w	800ad5a <_printf_float+0xc2>
 800b006:	f108 0801 	add.w	r8, r8, #1
 800b00a:	e7ec      	b.n	800afe6 <_printf_float+0x34e>
 800b00c:	4613      	mov	r3, r2
 800b00e:	4631      	mov	r1, r6
 800b010:	4642      	mov	r2, r8
 800b012:	4628      	mov	r0, r5
 800b014:	47b8      	blx	r7
 800b016:	3001      	adds	r0, #1
 800b018:	d1c0      	bne.n	800af9c <_printf_float+0x304>
 800b01a:	e69e      	b.n	800ad5a <_printf_float+0xc2>
 800b01c:	2301      	movs	r3, #1
 800b01e:	4631      	mov	r1, r6
 800b020:	4628      	mov	r0, r5
 800b022:	9205      	str	r2, [sp, #20]
 800b024:	47b8      	blx	r7
 800b026:	3001      	adds	r0, #1
 800b028:	f43f ae97 	beq.w	800ad5a <_printf_float+0xc2>
 800b02c:	9a05      	ldr	r2, [sp, #20]
 800b02e:	f10b 0b01 	add.w	fp, fp, #1
 800b032:	e7b9      	b.n	800afa8 <_printf_float+0x310>
 800b034:	ee18 3a10 	vmov	r3, s16
 800b038:	4652      	mov	r2, sl
 800b03a:	4631      	mov	r1, r6
 800b03c:	4628      	mov	r0, r5
 800b03e:	47b8      	blx	r7
 800b040:	3001      	adds	r0, #1
 800b042:	d1be      	bne.n	800afc2 <_printf_float+0x32a>
 800b044:	e689      	b.n	800ad5a <_printf_float+0xc2>
 800b046:	9a05      	ldr	r2, [sp, #20]
 800b048:	464b      	mov	r3, r9
 800b04a:	4442      	add	r2, r8
 800b04c:	4631      	mov	r1, r6
 800b04e:	4628      	mov	r0, r5
 800b050:	47b8      	blx	r7
 800b052:	3001      	adds	r0, #1
 800b054:	d1c1      	bne.n	800afda <_printf_float+0x342>
 800b056:	e680      	b.n	800ad5a <_printf_float+0xc2>
 800b058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b05a:	2a01      	cmp	r2, #1
 800b05c:	dc01      	bgt.n	800b062 <_printf_float+0x3ca>
 800b05e:	07db      	lsls	r3, r3, #31
 800b060:	d538      	bpl.n	800b0d4 <_printf_float+0x43c>
 800b062:	2301      	movs	r3, #1
 800b064:	4642      	mov	r2, r8
 800b066:	4631      	mov	r1, r6
 800b068:	4628      	mov	r0, r5
 800b06a:	47b8      	blx	r7
 800b06c:	3001      	adds	r0, #1
 800b06e:	f43f ae74 	beq.w	800ad5a <_printf_float+0xc2>
 800b072:	ee18 3a10 	vmov	r3, s16
 800b076:	4652      	mov	r2, sl
 800b078:	4631      	mov	r1, r6
 800b07a:	4628      	mov	r0, r5
 800b07c:	47b8      	blx	r7
 800b07e:	3001      	adds	r0, #1
 800b080:	f43f ae6b 	beq.w	800ad5a <_printf_float+0xc2>
 800b084:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b088:	2200      	movs	r2, #0
 800b08a:	2300      	movs	r3, #0
 800b08c:	f7f5 fd2c 	bl	8000ae8 <__aeabi_dcmpeq>
 800b090:	b9d8      	cbnz	r0, 800b0ca <_printf_float+0x432>
 800b092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b094:	f108 0201 	add.w	r2, r8, #1
 800b098:	3b01      	subs	r3, #1
 800b09a:	4631      	mov	r1, r6
 800b09c:	4628      	mov	r0, r5
 800b09e:	47b8      	blx	r7
 800b0a0:	3001      	adds	r0, #1
 800b0a2:	d10e      	bne.n	800b0c2 <_printf_float+0x42a>
 800b0a4:	e659      	b.n	800ad5a <_printf_float+0xc2>
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	4652      	mov	r2, sl
 800b0aa:	4631      	mov	r1, r6
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	47b8      	blx	r7
 800b0b0:	3001      	adds	r0, #1
 800b0b2:	f43f ae52 	beq.w	800ad5a <_printf_float+0xc2>
 800b0b6:	f108 0801 	add.w	r8, r8, #1
 800b0ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0bc:	3b01      	subs	r3, #1
 800b0be:	4543      	cmp	r3, r8
 800b0c0:	dcf1      	bgt.n	800b0a6 <_printf_float+0x40e>
 800b0c2:	464b      	mov	r3, r9
 800b0c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b0c8:	e6dc      	b.n	800ae84 <_printf_float+0x1ec>
 800b0ca:	f04f 0800 	mov.w	r8, #0
 800b0ce:	f104 0a1a 	add.w	sl, r4, #26
 800b0d2:	e7f2      	b.n	800b0ba <_printf_float+0x422>
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	4642      	mov	r2, r8
 800b0d8:	e7df      	b.n	800b09a <_printf_float+0x402>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	464a      	mov	r2, r9
 800b0de:	4631      	mov	r1, r6
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	47b8      	blx	r7
 800b0e4:	3001      	adds	r0, #1
 800b0e6:	f43f ae38 	beq.w	800ad5a <_printf_float+0xc2>
 800b0ea:	f108 0801 	add.w	r8, r8, #1
 800b0ee:	68e3      	ldr	r3, [r4, #12]
 800b0f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0f2:	1a5b      	subs	r3, r3, r1
 800b0f4:	4543      	cmp	r3, r8
 800b0f6:	dcf0      	bgt.n	800b0da <_printf_float+0x442>
 800b0f8:	e6fa      	b.n	800aef0 <_printf_float+0x258>
 800b0fa:	f04f 0800 	mov.w	r8, #0
 800b0fe:	f104 0919 	add.w	r9, r4, #25
 800b102:	e7f4      	b.n	800b0ee <_printf_float+0x456>

0800b104 <_printf_common>:
 800b104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b108:	4616      	mov	r6, r2
 800b10a:	4699      	mov	r9, r3
 800b10c:	688a      	ldr	r2, [r1, #8]
 800b10e:	690b      	ldr	r3, [r1, #16]
 800b110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b114:	4293      	cmp	r3, r2
 800b116:	bfb8      	it	lt
 800b118:	4613      	movlt	r3, r2
 800b11a:	6033      	str	r3, [r6, #0]
 800b11c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b120:	4607      	mov	r7, r0
 800b122:	460c      	mov	r4, r1
 800b124:	b10a      	cbz	r2, 800b12a <_printf_common+0x26>
 800b126:	3301      	adds	r3, #1
 800b128:	6033      	str	r3, [r6, #0]
 800b12a:	6823      	ldr	r3, [r4, #0]
 800b12c:	0699      	lsls	r1, r3, #26
 800b12e:	bf42      	ittt	mi
 800b130:	6833      	ldrmi	r3, [r6, #0]
 800b132:	3302      	addmi	r3, #2
 800b134:	6033      	strmi	r3, [r6, #0]
 800b136:	6825      	ldr	r5, [r4, #0]
 800b138:	f015 0506 	ands.w	r5, r5, #6
 800b13c:	d106      	bne.n	800b14c <_printf_common+0x48>
 800b13e:	f104 0a19 	add.w	sl, r4, #25
 800b142:	68e3      	ldr	r3, [r4, #12]
 800b144:	6832      	ldr	r2, [r6, #0]
 800b146:	1a9b      	subs	r3, r3, r2
 800b148:	42ab      	cmp	r3, r5
 800b14a:	dc26      	bgt.n	800b19a <_printf_common+0x96>
 800b14c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b150:	1e13      	subs	r3, r2, #0
 800b152:	6822      	ldr	r2, [r4, #0]
 800b154:	bf18      	it	ne
 800b156:	2301      	movne	r3, #1
 800b158:	0692      	lsls	r2, r2, #26
 800b15a:	d42b      	bmi.n	800b1b4 <_printf_common+0xb0>
 800b15c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b160:	4649      	mov	r1, r9
 800b162:	4638      	mov	r0, r7
 800b164:	47c0      	blx	r8
 800b166:	3001      	adds	r0, #1
 800b168:	d01e      	beq.n	800b1a8 <_printf_common+0xa4>
 800b16a:	6823      	ldr	r3, [r4, #0]
 800b16c:	68e5      	ldr	r5, [r4, #12]
 800b16e:	6832      	ldr	r2, [r6, #0]
 800b170:	f003 0306 	and.w	r3, r3, #6
 800b174:	2b04      	cmp	r3, #4
 800b176:	bf08      	it	eq
 800b178:	1aad      	subeq	r5, r5, r2
 800b17a:	68a3      	ldr	r3, [r4, #8]
 800b17c:	6922      	ldr	r2, [r4, #16]
 800b17e:	bf0c      	ite	eq
 800b180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b184:	2500      	movne	r5, #0
 800b186:	4293      	cmp	r3, r2
 800b188:	bfc4      	itt	gt
 800b18a:	1a9b      	subgt	r3, r3, r2
 800b18c:	18ed      	addgt	r5, r5, r3
 800b18e:	2600      	movs	r6, #0
 800b190:	341a      	adds	r4, #26
 800b192:	42b5      	cmp	r5, r6
 800b194:	d11a      	bne.n	800b1cc <_printf_common+0xc8>
 800b196:	2000      	movs	r0, #0
 800b198:	e008      	b.n	800b1ac <_printf_common+0xa8>
 800b19a:	2301      	movs	r3, #1
 800b19c:	4652      	mov	r2, sl
 800b19e:	4649      	mov	r1, r9
 800b1a0:	4638      	mov	r0, r7
 800b1a2:	47c0      	blx	r8
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	d103      	bne.n	800b1b0 <_printf_common+0xac>
 800b1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1b0:	3501      	adds	r5, #1
 800b1b2:	e7c6      	b.n	800b142 <_printf_common+0x3e>
 800b1b4:	18e1      	adds	r1, r4, r3
 800b1b6:	1c5a      	adds	r2, r3, #1
 800b1b8:	2030      	movs	r0, #48	; 0x30
 800b1ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1be:	4422      	add	r2, r4
 800b1c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b1c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b1c8:	3302      	adds	r3, #2
 800b1ca:	e7c7      	b.n	800b15c <_printf_common+0x58>
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	4622      	mov	r2, r4
 800b1d0:	4649      	mov	r1, r9
 800b1d2:	4638      	mov	r0, r7
 800b1d4:	47c0      	blx	r8
 800b1d6:	3001      	adds	r0, #1
 800b1d8:	d0e6      	beq.n	800b1a8 <_printf_common+0xa4>
 800b1da:	3601      	adds	r6, #1
 800b1dc:	e7d9      	b.n	800b192 <_printf_common+0x8e>
	...

0800b1e0 <_printf_i>:
 800b1e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e4:	7e0f      	ldrb	r7, [r1, #24]
 800b1e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b1e8:	2f78      	cmp	r7, #120	; 0x78
 800b1ea:	4691      	mov	r9, r2
 800b1ec:	4680      	mov	r8, r0
 800b1ee:	460c      	mov	r4, r1
 800b1f0:	469a      	mov	sl, r3
 800b1f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b1f6:	d807      	bhi.n	800b208 <_printf_i+0x28>
 800b1f8:	2f62      	cmp	r7, #98	; 0x62
 800b1fa:	d80a      	bhi.n	800b212 <_printf_i+0x32>
 800b1fc:	2f00      	cmp	r7, #0
 800b1fe:	f000 80d8 	beq.w	800b3b2 <_printf_i+0x1d2>
 800b202:	2f58      	cmp	r7, #88	; 0x58
 800b204:	f000 80a3 	beq.w	800b34e <_printf_i+0x16e>
 800b208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b20c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b210:	e03a      	b.n	800b288 <_printf_i+0xa8>
 800b212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b216:	2b15      	cmp	r3, #21
 800b218:	d8f6      	bhi.n	800b208 <_printf_i+0x28>
 800b21a:	a101      	add	r1, pc, #4	; (adr r1, 800b220 <_printf_i+0x40>)
 800b21c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b220:	0800b279 	.word	0x0800b279
 800b224:	0800b28d 	.word	0x0800b28d
 800b228:	0800b209 	.word	0x0800b209
 800b22c:	0800b209 	.word	0x0800b209
 800b230:	0800b209 	.word	0x0800b209
 800b234:	0800b209 	.word	0x0800b209
 800b238:	0800b28d 	.word	0x0800b28d
 800b23c:	0800b209 	.word	0x0800b209
 800b240:	0800b209 	.word	0x0800b209
 800b244:	0800b209 	.word	0x0800b209
 800b248:	0800b209 	.word	0x0800b209
 800b24c:	0800b399 	.word	0x0800b399
 800b250:	0800b2bd 	.word	0x0800b2bd
 800b254:	0800b37b 	.word	0x0800b37b
 800b258:	0800b209 	.word	0x0800b209
 800b25c:	0800b209 	.word	0x0800b209
 800b260:	0800b3bb 	.word	0x0800b3bb
 800b264:	0800b209 	.word	0x0800b209
 800b268:	0800b2bd 	.word	0x0800b2bd
 800b26c:	0800b209 	.word	0x0800b209
 800b270:	0800b209 	.word	0x0800b209
 800b274:	0800b383 	.word	0x0800b383
 800b278:	682b      	ldr	r3, [r5, #0]
 800b27a:	1d1a      	adds	r2, r3, #4
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	602a      	str	r2, [r5, #0]
 800b280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b288:	2301      	movs	r3, #1
 800b28a:	e0a3      	b.n	800b3d4 <_printf_i+0x1f4>
 800b28c:	6820      	ldr	r0, [r4, #0]
 800b28e:	6829      	ldr	r1, [r5, #0]
 800b290:	0606      	lsls	r6, r0, #24
 800b292:	f101 0304 	add.w	r3, r1, #4
 800b296:	d50a      	bpl.n	800b2ae <_printf_i+0xce>
 800b298:	680e      	ldr	r6, [r1, #0]
 800b29a:	602b      	str	r3, [r5, #0]
 800b29c:	2e00      	cmp	r6, #0
 800b29e:	da03      	bge.n	800b2a8 <_printf_i+0xc8>
 800b2a0:	232d      	movs	r3, #45	; 0x2d
 800b2a2:	4276      	negs	r6, r6
 800b2a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2a8:	485e      	ldr	r0, [pc, #376]	; (800b424 <_printf_i+0x244>)
 800b2aa:	230a      	movs	r3, #10
 800b2ac:	e019      	b.n	800b2e2 <_printf_i+0x102>
 800b2ae:	680e      	ldr	r6, [r1, #0]
 800b2b0:	602b      	str	r3, [r5, #0]
 800b2b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b2b6:	bf18      	it	ne
 800b2b8:	b236      	sxthne	r6, r6
 800b2ba:	e7ef      	b.n	800b29c <_printf_i+0xbc>
 800b2bc:	682b      	ldr	r3, [r5, #0]
 800b2be:	6820      	ldr	r0, [r4, #0]
 800b2c0:	1d19      	adds	r1, r3, #4
 800b2c2:	6029      	str	r1, [r5, #0]
 800b2c4:	0601      	lsls	r1, r0, #24
 800b2c6:	d501      	bpl.n	800b2cc <_printf_i+0xec>
 800b2c8:	681e      	ldr	r6, [r3, #0]
 800b2ca:	e002      	b.n	800b2d2 <_printf_i+0xf2>
 800b2cc:	0646      	lsls	r6, r0, #25
 800b2ce:	d5fb      	bpl.n	800b2c8 <_printf_i+0xe8>
 800b2d0:	881e      	ldrh	r6, [r3, #0]
 800b2d2:	4854      	ldr	r0, [pc, #336]	; (800b424 <_printf_i+0x244>)
 800b2d4:	2f6f      	cmp	r7, #111	; 0x6f
 800b2d6:	bf0c      	ite	eq
 800b2d8:	2308      	moveq	r3, #8
 800b2da:	230a      	movne	r3, #10
 800b2dc:	2100      	movs	r1, #0
 800b2de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b2e2:	6865      	ldr	r5, [r4, #4]
 800b2e4:	60a5      	str	r5, [r4, #8]
 800b2e6:	2d00      	cmp	r5, #0
 800b2e8:	bfa2      	ittt	ge
 800b2ea:	6821      	ldrge	r1, [r4, #0]
 800b2ec:	f021 0104 	bicge.w	r1, r1, #4
 800b2f0:	6021      	strge	r1, [r4, #0]
 800b2f2:	b90e      	cbnz	r6, 800b2f8 <_printf_i+0x118>
 800b2f4:	2d00      	cmp	r5, #0
 800b2f6:	d04d      	beq.n	800b394 <_printf_i+0x1b4>
 800b2f8:	4615      	mov	r5, r2
 800b2fa:	fbb6 f1f3 	udiv	r1, r6, r3
 800b2fe:	fb03 6711 	mls	r7, r3, r1, r6
 800b302:	5dc7      	ldrb	r7, [r0, r7]
 800b304:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b308:	4637      	mov	r7, r6
 800b30a:	42bb      	cmp	r3, r7
 800b30c:	460e      	mov	r6, r1
 800b30e:	d9f4      	bls.n	800b2fa <_printf_i+0x11a>
 800b310:	2b08      	cmp	r3, #8
 800b312:	d10b      	bne.n	800b32c <_printf_i+0x14c>
 800b314:	6823      	ldr	r3, [r4, #0]
 800b316:	07de      	lsls	r6, r3, #31
 800b318:	d508      	bpl.n	800b32c <_printf_i+0x14c>
 800b31a:	6923      	ldr	r3, [r4, #16]
 800b31c:	6861      	ldr	r1, [r4, #4]
 800b31e:	4299      	cmp	r1, r3
 800b320:	bfde      	ittt	le
 800b322:	2330      	movle	r3, #48	; 0x30
 800b324:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b328:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b32c:	1b52      	subs	r2, r2, r5
 800b32e:	6122      	str	r2, [r4, #16]
 800b330:	f8cd a000 	str.w	sl, [sp]
 800b334:	464b      	mov	r3, r9
 800b336:	aa03      	add	r2, sp, #12
 800b338:	4621      	mov	r1, r4
 800b33a:	4640      	mov	r0, r8
 800b33c:	f7ff fee2 	bl	800b104 <_printf_common>
 800b340:	3001      	adds	r0, #1
 800b342:	d14c      	bne.n	800b3de <_printf_i+0x1fe>
 800b344:	f04f 30ff 	mov.w	r0, #4294967295
 800b348:	b004      	add	sp, #16
 800b34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b34e:	4835      	ldr	r0, [pc, #212]	; (800b424 <_printf_i+0x244>)
 800b350:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b354:	6829      	ldr	r1, [r5, #0]
 800b356:	6823      	ldr	r3, [r4, #0]
 800b358:	f851 6b04 	ldr.w	r6, [r1], #4
 800b35c:	6029      	str	r1, [r5, #0]
 800b35e:	061d      	lsls	r5, r3, #24
 800b360:	d514      	bpl.n	800b38c <_printf_i+0x1ac>
 800b362:	07df      	lsls	r7, r3, #31
 800b364:	bf44      	itt	mi
 800b366:	f043 0320 	orrmi.w	r3, r3, #32
 800b36a:	6023      	strmi	r3, [r4, #0]
 800b36c:	b91e      	cbnz	r6, 800b376 <_printf_i+0x196>
 800b36e:	6823      	ldr	r3, [r4, #0]
 800b370:	f023 0320 	bic.w	r3, r3, #32
 800b374:	6023      	str	r3, [r4, #0]
 800b376:	2310      	movs	r3, #16
 800b378:	e7b0      	b.n	800b2dc <_printf_i+0xfc>
 800b37a:	6823      	ldr	r3, [r4, #0]
 800b37c:	f043 0320 	orr.w	r3, r3, #32
 800b380:	6023      	str	r3, [r4, #0]
 800b382:	2378      	movs	r3, #120	; 0x78
 800b384:	4828      	ldr	r0, [pc, #160]	; (800b428 <_printf_i+0x248>)
 800b386:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b38a:	e7e3      	b.n	800b354 <_printf_i+0x174>
 800b38c:	0659      	lsls	r1, r3, #25
 800b38e:	bf48      	it	mi
 800b390:	b2b6      	uxthmi	r6, r6
 800b392:	e7e6      	b.n	800b362 <_printf_i+0x182>
 800b394:	4615      	mov	r5, r2
 800b396:	e7bb      	b.n	800b310 <_printf_i+0x130>
 800b398:	682b      	ldr	r3, [r5, #0]
 800b39a:	6826      	ldr	r6, [r4, #0]
 800b39c:	6961      	ldr	r1, [r4, #20]
 800b39e:	1d18      	adds	r0, r3, #4
 800b3a0:	6028      	str	r0, [r5, #0]
 800b3a2:	0635      	lsls	r5, r6, #24
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	d501      	bpl.n	800b3ac <_printf_i+0x1cc>
 800b3a8:	6019      	str	r1, [r3, #0]
 800b3aa:	e002      	b.n	800b3b2 <_printf_i+0x1d2>
 800b3ac:	0670      	lsls	r0, r6, #25
 800b3ae:	d5fb      	bpl.n	800b3a8 <_printf_i+0x1c8>
 800b3b0:	8019      	strh	r1, [r3, #0]
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	6123      	str	r3, [r4, #16]
 800b3b6:	4615      	mov	r5, r2
 800b3b8:	e7ba      	b.n	800b330 <_printf_i+0x150>
 800b3ba:	682b      	ldr	r3, [r5, #0]
 800b3bc:	1d1a      	adds	r2, r3, #4
 800b3be:	602a      	str	r2, [r5, #0]
 800b3c0:	681d      	ldr	r5, [r3, #0]
 800b3c2:	6862      	ldr	r2, [r4, #4]
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	4628      	mov	r0, r5
 800b3c8:	f7f4 ff1a 	bl	8000200 <memchr>
 800b3cc:	b108      	cbz	r0, 800b3d2 <_printf_i+0x1f2>
 800b3ce:	1b40      	subs	r0, r0, r5
 800b3d0:	6060      	str	r0, [r4, #4]
 800b3d2:	6863      	ldr	r3, [r4, #4]
 800b3d4:	6123      	str	r3, [r4, #16]
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3dc:	e7a8      	b.n	800b330 <_printf_i+0x150>
 800b3de:	6923      	ldr	r3, [r4, #16]
 800b3e0:	462a      	mov	r2, r5
 800b3e2:	4649      	mov	r1, r9
 800b3e4:	4640      	mov	r0, r8
 800b3e6:	47d0      	blx	sl
 800b3e8:	3001      	adds	r0, #1
 800b3ea:	d0ab      	beq.n	800b344 <_printf_i+0x164>
 800b3ec:	6823      	ldr	r3, [r4, #0]
 800b3ee:	079b      	lsls	r3, r3, #30
 800b3f0:	d413      	bmi.n	800b41a <_printf_i+0x23a>
 800b3f2:	68e0      	ldr	r0, [r4, #12]
 800b3f4:	9b03      	ldr	r3, [sp, #12]
 800b3f6:	4298      	cmp	r0, r3
 800b3f8:	bfb8      	it	lt
 800b3fa:	4618      	movlt	r0, r3
 800b3fc:	e7a4      	b.n	800b348 <_printf_i+0x168>
 800b3fe:	2301      	movs	r3, #1
 800b400:	4632      	mov	r2, r6
 800b402:	4649      	mov	r1, r9
 800b404:	4640      	mov	r0, r8
 800b406:	47d0      	blx	sl
 800b408:	3001      	adds	r0, #1
 800b40a:	d09b      	beq.n	800b344 <_printf_i+0x164>
 800b40c:	3501      	adds	r5, #1
 800b40e:	68e3      	ldr	r3, [r4, #12]
 800b410:	9903      	ldr	r1, [sp, #12]
 800b412:	1a5b      	subs	r3, r3, r1
 800b414:	42ab      	cmp	r3, r5
 800b416:	dcf2      	bgt.n	800b3fe <_printf_i+0x21e>
 800b418:	e7eb      	b.n	800b3f2 <_printf_i+0x212>
 800b41a:	2500      	movs	r5, #0
 800b41c:	f104 0619 	add.w	r6, r4, #25
 800b420:	e7f5      	b.n	800b40e <_printf_i+0x22e>
 800b422:	bf00      	nop
 800b424:	0800fc8a 	.word	0x0800fc8a
 800b428:	0800fc9b 	.word	0x0800fc9b

0800b42c <_scanf_float>:
 800b42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b430:	b087      	sub	sp, #28
 800b432:	4617      	mov	r7, r2
 800b434:	9303      	str	r3, [sp, #12]
 800b436:	688b      	ldr	r3, [r1, #8]
 800b438:	1e5a      	subs	r2, r3, #1
 800b43a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b43e:	bf83      	ittte	hi
 800b440:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b444:	195b      	addhi	r3, r3, r5
 800b446:	9302      	strhi	r3, [sp, #8]
 800b448:	2300      	movls	r3, #0
 800b44a:	bf86      	itte	hi
 800b44c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b450:	608b      	strhi	r3, [r1, #8]
 800b452:	9302      	strls	r3, [sp, #8]
 800b454:	680b      	ldr	r3, [r1, #0]
 800b456:	468b      	mov	fp, r1
 800b458:	2500      	movs	r5, #0
 800b45a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b45e:	f84b 3b1c 	str.w	r3, [fp], #28
 800b462:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b466:	4680      	mov	r8, r0
 800b468:	460c      	mov	r4, r1
 800b46a:	465e      	mov	r6, fp
 800b46c:	46aa      	mov	sl, r5
 800b46e:	46a9      	mov	r9, r5
 800b470:	9501      	str	r5, [sp, #4]
 800b472:	68a2      	ldr	r2, [r4, #8]
 800b474:	b152      	cbz	r2, 800b48c <_scanf_float+0x60>
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	2b4e      	cmp	r3, #78	; 0x4e
 800b47c:	d864      	bhi.n	800b548 <_scanf_float+0x11c>
 800b47e:	2b40      	cmp	r3, #64	; 0x40
 800b480:	d83c      	bhi.n	800b4fc <_scanf_float+0xd0>
 800b482:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b486:	b2c8      	uxtb	r0, r1
 800b488:	280e      	cmp	r0, #14
 800b48a:	d93a      	bls.n	800b502 <_scanf_float+0xd6>
 800b48c:	f1b9 0f00 	cmp.w	r9, #0
 800b490:	d003      	beq.n	800b49a <_scanf_float+0x6e>
 800b492:	6823      	ldr	r3, [r4, #0]
 800b494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b498:	6023      	str	r3, [r4, #0]
 800b49a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b49e:	f1ba 0f01 	cmp.w	sl, #1
 800b4a2:	f200 8113 	bhi.w	800b6cc <_scanf_float+0x2a0>
 800b4a6:	455e      	cmp	r6, fp
 800b4a8:	f200 8105 	bhi.w	800b6b6 <_scanf_float+0x28a>
 800b4ac:	2501      	movs	r5, #1
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	b007      	add	sp, #28
 800b4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b4ba:	2a0d      	cmp	r2, #13
 800b4bc:	d8e6      	bhi.n	800b48c <_scanf_float+0x60>
 800b4be:	a101      	add	r1, pc, #4	; (adr r1, 800b4c4 <_scanf_float+0x98>)
 800b4c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b4c4:	0800b603 	.word	0x0800b603
 800b4c8:	0800b48d 	.word	0x0800b48d
 800b4cc:	0800b48d 	.word	0x0800b48d
 800b4d0:	0800b48d 	.word	0x0800b48d
 800b4d4:	0800b663 	.word	0x0800b663
 800b4d8:	0800b63b 	.word	0x0800b63b
 800b4dc:	0800b48d 	.word	0x0800b48d
 800b4e0:	0800b48d 	.word	0x0800b48d
 800b4e4:	0800b611 	.word	0x0800b611
 800b4e8:	0800b48d 	.word	0x0800b48d
 800b4ec:	0800b48d 	.word	0x0800b48d
 800b4f0:	0800b48d 	.word	0x0800b48d
 800b4f4:	0800b48d 	.word	0x0800b48d
 800b4f8:	0800b5c9 	.word	0x0800b5c9
 800b4fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b500:	e7db      	b.n	800b4ba <_scanf_float+0x8e>
 800b502:	290e      	cmp	r1, #14
 800b504:	d8c2      	bhi.n	800b48c <_scanf_float+0x60>
 800b506:	a001      	add	r0, pc, #4	; (adr r0, 800b50c <_scanf_float+0xe0>)
 800b508:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b50c:	0800b5bb 	.word	0x0800b5bb
 800b510:	0800b48d 	.word	0x0800b48d
 800b514:	0800b5bb 	.word	0x0800b5bb
 800b518:	0800b64f 	.word	0x0800b64f
 800b51c:	0800b48d 	.word	0x0800b48d
 800b520:	0800b569 	.word	0x0800b569
 800b524:	0800b5a5 	.word	0x0800b5a5
 800b528:	0800b5a5 	.word	0x0800b5a5
 800b52c:	0800b5a5 	.word	0x0800b5a5
 800b530:	0800b5a5 	.word	0x0800b5a5
 800b534:	0800b5a5 	.word	0x0800b5a5
 800b538:	0800b5a5 	.word	0x0800b5a5
 800b53c:	0800b5a5 	.word	0x0800b5a5
 800b540:	0800b5a5 	.word	0x0800b5a5
 800b544:	0800b5a5 	.word	0x0800b5a5
 800b548:	2b6e      	cmp	r3, #110	; 0x6e
 800b54a:	d809      	bhi.n	800b560 <_scanf_float+0x134>
 800b54c:	2b60      	cmp	r3, #96	; 0x60
 800b54e:	d8b2      	bhi.n	800b4b6 <_scanf_float+0x8a>
 800b550:	2b54      	cmp	r3, #84	; 0x54
 800b552:	d077      	beq.n	800b644 <_scanf_float+0x218>
 800b554:	2b59      	cmp	r3, #89	; 0x59
 800b556:	d199      	bne.n	800b48c <_scanf_float+0x60>
 800b558:	2d07      	cmp	r5, #7
 800b55a:	d197      	bne.n	800b48c <_scanf_float+0x60>
 800b55c:	2508      	movs	r5, #8
 800b55e:	e029      	b.n	800b5b4 <_scanf_float+0x188>
 800b560:	2b74      	cmp	r3, #116	; 0x74
 800b562:	d06f      	beq.n	800b644 <_scanf_float+0x218>
 800b564:	2b79      	cmp	r3, #121	; 0x79
 800b566:	e7f6      	b.n	800b556 <_scanf_float+0x12a>
 800b568:	6821      	ldr	r1, [r4, #0]
 800b56a:	05c8      	lsls	r0, r1, #23
 800b56c:	d51a      	bpl.n	800b5a4 <_scanf_float+0x178>
 800b56e:	9b02      	ldr	r3, [sp, #8]
 800b570:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b574:	6021      	str	r1, [r4, #0]
 800b576:	f109 0901 	add.w	r9, r9, #1
 800b57a:	b11b      	cbz	r3, 800b584 <_scanf_float+0x158>
 800b57c:	3b01      	subs	r3, #1
 800b57e:	3201      	adds	r2, #1
 800b580:	9302      	str	r3, [sp, #8]
 800b582:	60a2      	str	r2, [r4, #8]
 800b584:	68a3      	ldr	r3, [r4, #8]
 800b586:	3b01      	subs	r3, #1
 800b588:	60a3      	str	r3, [r4, #8]
 800b58a:	6923      	ldr	r3, [r4, #16]
 800b58c:	3301      	adds	r3, #1
 800b58e:	6123      	str	r3, [r4, #16]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	3b01      	subs	r3, #1
 800b594:	2b00      	cmp	r3, #0
 800b596:	607b      	str	r3, [r7, #4]
 800b598:	f340 8084 	ble.w	800b6a4 <_scanf_float+0x278>
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	3301      	adds	r3, #1
 800b5a0:	603b      	str	r3, [r7, #0]
 800b5a2:	e766      	b.n	800b472 <_scanf_float+0x46>
 800b5a4:	eb1a 0f05 	cmn.w	sl, r5
 800b5a8:	f47f af70 	bne.w	800b48c <_scanf_float+0x60>
 800b5ac:	6822      	ldr	r2, [r4, #0]
 800b5ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b5b2:	6022      	str	r2, [r4, #0]
 800b5b4:	f806 3b01 	strb.w	r3, [r6], #1
 800b5b8:	e7e4      	b.n	800b584 <_scanf_float+0x158>
 800b5ba:	6822      	ldr	r2, [r4, #0]
 800b5bc:	0610      	lsls	r0, r2, #24
 800b5be:	f57f af65 	bpl.w	800b48c <_scanf_float+0x60>
 800b5c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b5c6:	e7f4      	b.n	800b5b2 <_scanf_float+0x186>
 800b5c8:	f1ba 0f00 	cmp.w	sl, #0
 800b5cc:	d10e      	bne.n	800b5ec <_scanf_float+0x1c0>
 800b5ce:	f1b9 0f00 	cmp.w	r9, #0
 800b5d2:	d10e      	bne.n	800b5f2 <_scanf_float+0x1c6>
 800b5d4:	6822      	ldr	r2, [r4, #0]
 800b5d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b5da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b5de:	d108      	bne.n	800b5f2 <_scanf_float+0x1c6>
 800b5e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b5e4:	6022      	str	r2, [r4, #0]
 800b5e6:	f04f 0a01 	mov.w	sl, #1
 800b5ea:	e7e3      	b.n	800b5b4 <_scanf_float+0x188>
 800b5ec:	f1ba 0f02 	cmp.w	sl, #2
 800b5f0:	d055      	beq.n	800b69e <_scanf_float+0x272>
 800b5f2:	2d01      	cmp	r5, #1
 800b5f4:	d002      	beq.n	800b5fc <_scanf_float+0x1d0>
 800b5f6:	2d04      	cmp	r5, #4
 800b5f8:	f47f af48 	bne.w	800b48c <_scanf_float+0x60>
 800b5fc:	3501      	adds	r5, #1
 800b5fe:	b2ed      	uxtb	r5, r5
 800b600:	e7d8      	b.n	800b5b4 <_scanf_float+0x188>
 800b602:	f1ba 0f01 	cmp.w	sl, #1
 800b606:	f47f af41 	bne.w	800b48c <_scanf_float+0x60>
 800b60a:	f04f 0a02 	mov.w	sl, #2
 800b60e:	e7d1      	b.n	800b5b4 <_scanf_float+0x188>
 800b610:	b97d      	cbnz	r5, 800b632 <_scanf_float+0x206>
 800b612:	f1b9 0f00 	cmp.w	r9, #0
 800b616:	f47f af3c 	bne.w	800b492 <_scanf_float+0x66>
 800b61a:	6822      	ldr	r2, [r4, #0]
 800b61c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b620:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b624:	f47f af39 	bne.w	800b49a <_scanf_float+0x6e>
 800b628:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b62c:	6022      	str	r2, [r4, #0]
 800b62e:	2501      	movs	r5, #1
 800b630:	e7c0      	b.n	800b5b4 <_scanf_float+0x188>
 800b632:	2d03      	cmp	r5, #3
 800b634:	d0e2      	beq.n	800b5fc <_scanf_float+0x1d0>
 800b636:	2d05      	cmp	r5, #5
 800b638:	e7de      	b.n	800b5f8 <_scanf_float+0x1cc>
 800b63a:	2d02      	cmp	r5, #2
 800b63c:	f47f af26 	bne.w	800b48c <_scanf_float+0x60>
 800b640:	2503      	movs	r5, #3
 800b642:	e7b7      	b.n	800b5b4 <_scanf_float+0x188>
 800b644:	2d06      	cmp	r5, #6
 800b646:	f47f af21 	bne.w	800b48c <_scanf_float+0x60>
 800b64a:	2507      	movs	r5, #7
 800b64c:	e7b2      	b.n	800b5b4 <_scanf_float+0x188>
 800b64e:	6822      	ldr	r2, [r4, #0]
 800b650:	0591      	lsls	r1, r2, #22
 800b652:	f57f af1b 	bpl.w	800b48c <_scanf_float+0x60>
 800b656:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b65a:	6022      	str	r2, [r4, #0]
 800b65c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b660:	e7a8      	b.n	800b5b4 <_scanf_float+0x188>
 800b662:	6822      	ldr	r2, [r4, #0]
 800b664:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b668:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b66c:	d006      	beq.n	800b67c <_scanf_float+0x250>
 800b66e:	0550      	lsls	r0, r2, #21
 800b670:	f57f af0c 	bpl.w	800b48c <_scanf_float+0x60>
 800b674:	f1b9 0f00 	cmp.w	r9, #0
 800b678:	f43f af0f 	beq.w	800b49a <_scanf_float+0x6e>
 800b67c:	0591      	lsls	r1, r2, #22
 800b67e:	bf58      	it	pl
 800b680:	9901      	ldrpl	r1, [sp, #4]
 800b682:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b686:	bf58      	it	pl
 800b688:	eba9 0101 	subpl.w	r1, r9, r1
 800b68c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b690:	bf58      	it	pl
 800b692:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b696:	6022      	str	r2, [r4, #0]
 800b698:	f04f 0900 	mov.w	r9, #0
 800b69c:	e78a      	b.n	800b5b4 <_scanf_float+0x188>
 800b69e:	f04f 0a03 	mov.w	sl, #3
 800b6a2:	e787      	b.n	800b5b4 <_scanf_float+0x188>
 800b6a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b6a8:	4639      	mov	r1, r7
 800b6aa:	4640      	mov	r0, r8
 800b6ac:	4798      	blx	r3
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	f43f aedf 	beq.w	800b472 <_scanf_float+0x46>
 800b6b4:	e6ea      	b.n	800b48c <_scanf_float+0x60>
 800b6b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b6ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b6be:	463a      	mov	r2, r7
 800b6c0:	4640      	mov	r0, r8
 800b6c2:	4798      	blx	r3
 800b6c4:	6923      	ldr	r3, [r4, #16]
 800b6c6:	3b01      	subs	r3, #1
 800b6c8:	6123      	str	r3, [r4, #16]
 800b6ca:	e6ec      	b.n	800b4a6 <_scanf_float+0x7a>
 800b6cc:	1e6b      	subs	r3, r5, #1
 800b6ce:	2b06      	cmp	r3, #6
 800b6d0:	d825      	bhi.n	800b71e <_scanf_float+0x2f2>
 800b6d2:	2d02      	cmp	r5, #2
 800b6d4:	d836      	bhi.n	800b744 <_scanf_float+0x318>
 800b6d6:	455e      	cmp	r6, fp
 800b6d8:	f67f aee8 	bls.w	800b4ac <_scanf_float+0x80>
 800b6dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b6e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b6e4:	463a      	mov	r2, r7
 800b6e6:	4640      	mov	r0, r8
 800b6e8:	4798      	blx	r3
 800b6ea:	6923      	ldr	r3, [r4, #16]
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	6123      	str	r3, [r4, #16]
 800b6f0:	e7f1      	b.n	800b6d6 <_scanf_float+0x2aa>
 800b6f2:	9802      	ldr	r0, [sp, #8]
 800b6f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b6f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b6fc:	9002      	str	r0, [sp, #8]
 800b6fe:	463a      	mov	r2, r7
 800b700:	4640      	mov	r0, r8
 800b702:	4798      	blx	r3
 800b704:	6923      	ldr	r3, [r4, #16]
 800b706:	3b01      	subs	r3, #1
 800b708:	6123      	str	r3, [r4, #16]
 800b70a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b70e:	fa5f fa8a 	uxtb.w	sl, sl
 800b712:	f1ba 0f02 	cmp.w	sl, #2
 800b716:	d1ec      	bne.n	800b6f2 <_scanf_float+0x2c6>
 800b718:	3d03      	subs	r5, #3
 800b71a:	b2ed      	uxtb	r5, r5
 800b71c:	1b76      	subs	r6, r6, r5
 800b71e:	6823      	ldr	r3, [r4, #0]
 800b720:	05da      	lsls	r2, r3, #23
 800b722:	d52f      	bpl.n	800b784 <_scanf_float+0x358>
 800b724:	055b      	lsls	r3, r3, #21
 800b726:	d510      	bpl.n	800b74a <_scanf_float+0x31e>
 800b728:	455e      	cmp	r6, fp
 800b72a:	f67f aebf 	bls.w	800b4ac <_scanf_float+0x80>
 800b72e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b732:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b736:	463a      	mov	r2, r7
 800b738:	4640      	mov	r0, r8
 800b73a:	4798      	blx	r3
 800b73c:	6923      	ldr	r3, [r4, #16]
 800b73e:	3b01      	subs	r3, #1
 800b740:	6123      	str	r3, [r4, #16]
 800b742:	e7f1      	b.n	800b728 <_scanf_float+0x2fc>
 800b744:	46aa      	mov	sl, r5
 800b746:	9602      	str	r6, [sp, #8]
 800b748:	e7df      	b.n	800b70a <_scanf_float+0x2de>
 800b74a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b74e:	6923      	ldr	r3, [r4, #16]
 800b750:	2965      	cmp	r1, #101	; 0x65
 800b752:	f103 33ff 	add.w	r3, r3, #4294967295
 800b756:	f106 35ff 	add.w	r5, r6, #4294967295
 800b75a:	6123      	str	r3, [r4, #16]
 800b75c:	d00c      	beq.n	800b778 <_scanf_float+0x34c>
 800b75e:	2945      	cmp	r1, #69	; 0x45
 800b760:	d00a      	beq.n	800b778 <_scanf_float+0x34c>
 800b762:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b766:	463a      	mov	r2, r7
 800b768:	4640      	mov	r0, r8
 800b76a:	4798      	blx	r3
 800b76c:	6923      	ldr	r3, [r4, #16]
 800b76e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b772:	3b01      	subs	r3, #1
 800b774:	1eb5      	subs	r5, r6, #2
 800b776:	6123      	str	r3, [r4, #16]
 800b778:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b77c:	463a      	mov	r2, r7
 800b77e:	4640      	mov	r0, r8
 800b780:	4798      	blx	r3
 800b782:	462e      	mov	r6, r5
 800b784:	6825      	ldr	r5, [r4, #0]
 800b786:	f015 0510 	ands.w	r5, r5, #16
 800b78a:	d159      	bne.n	800b840 <_scanf_float+0x414>
 800b78c:	7035      	strb	r5, [r6, #0]
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b798:	d11b      	bne.n	800b7d2 <_scanf_float+0x3a6>
 800b79a:	9b01      	ldr	r3, [sp, #4]
 800b79c:	454b      	cmp	r3, r9
 800b79e:	eba3 0209 	sub.w	r2, r3, r9
 800b7a2:	d123      	bne.n	800b7ec <_scanf_float+0x3c0>
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	4659      	mov	r1, fp
 800b7a8:	4640      	mov	r0, r8
 800b7aa:	f000 febf 	bl	800c52c <_strtod_r>
 800b7ae:	6822      	ldr	r2, [r4, #0]
 800b7b0:	9b03      	ldr	r3, [sp, #12]
 800b7b2:	f012 0f02 	tst.w	r2, #2
 800b7b6:	ec57 6b10 	vmov	r6, r7, d0
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	d021      	beq.n	800b802 <_scanf_float+0x3d6>
 800b7be:	9903      	ldr	r1, [sp, #12]
 800b7c0:	1d1a      	adds	r2, r3, #4
 800b7c2:	600a      	str	r2, [r1, #0]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	e9c3 6700 	strd	r6, r7, [r3]
 800b7ca:	68e3      	ldr	r3, [r4, #12]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	60e3      	str	r3, [r4, #12]
 800b7d0:	e66d      	b.n	800b4ae <_scanf_float+0x82>
 800b7d2:	9b04      	ldr	r3, [sp, #16]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d0e5      	beq.n	800b7a4 <_scanf_float+0x378>
 800b7d8:	9905      	ldr	r1, [sp, #20]
 800b7da:	230a      	movs	r3, #10
 800b7dc:	462a      	mov	r2, r5
 800b7de:	3101      	adds	r1, #1
 800b7e0:	4640      	mov	r0, r8
 800b7e2:	f000 ff2b 	bl	800c63c <_strtol_r>
 800b7e6:	9b04      	ldr	r3, [sp, #16]
 800b7e8:	9e05      	ldr	r6, [sp, #20]
 800b7ea:	1ac2      	subs	r2, r0, r3
 800b7ec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b7f0:	429e      	cmp	r6, r3
 800b7f2:	bf28      	it	cs
 800b7f4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b7f8:	4912      	ldr	r1, [pc, #72]	; (800b844 <_scanf_float+0x418>)
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	f000 f854 	bl	800b8a8 <siprintf>
 800b800:	e7d0      	b.n	800b7a4 <_scanf_float+0x378>
 800b802:	9903      	ldr	r1, [sp, #12]
 800b804:	f012 0f04 	tst.w	r2, #4
 800b808:	f103 0204 	add.w	r2, r3, #4
 800b80c:	600a      	str	r2, [r1, #0]
 800b80e:	d1d9      	bne.n	800b7c4 <_scanf_float+0x398>
 800b810:	f8d3 8000 	ldr.w	r8, [r3]
 800b814:	ee10 2a10 	vmov	r2, s0
 800b818:	ee10 0a10 	vmov	r0, s0
 800b81c:	463b      	mov	r3, r7
 800b81e:	4639      	mov	r1, r7
 800b820:	f7f5 f994 	bl	8000b4c <__aeabi_dcmpun>
 800b824:	b128      	cbz	r0, 800b832 <_scanf_float+0x406>
 800b826:	4808      	ldr	r0, [pc, #32]	; (800b848 <_scanf_float+0x41c>)
 800b828:	f000 f838 	bl	800b89c <nanf>
 800b82c:	ed88 0a00 	vstr	s0, [r8]
 800b830:	e7cb      	b.n	800b7ca <_scanf_float+0x39e>
 800b832:	4630      	mov	r0, r6
 800b834:	4639      	mov	r1, r7
 800b836:	f7f5 f9e7 	bl	8000c08 <__aeabi_d2f>
 800b83a:	f8c8 0000 	str.w	r0, [r8]
 800b83e:	e7c4      	b.n	800b7ca <_scanf_float+0x39e>
 800b840:	2500      	movs	r5, #0
 800b842:	e634      	b.n	800b4ae <_scanf_float+0x82>
 800b844:	0800fcac 	.word	0x0800fcac
 800b848:	08010120 	.word	0x08010120

0800b84c <iprintf>:
 800b84c:	b40f      	push	{r0, r1, r2, r3}
 800b84e:	4b0a      	ldr	r3, [pc, #40]	; (800b878 <iprintf+0x2c>)
 800b850:	b513      	push	{r0, r1, r4, lr}
 800b852:	681c      	ldr	r4, [r3, #0]
 800b854:	b124      	cbz	r4, 800b860 <iprintf+0x14>
 800b856:	69a3      	ldr	r3, [r4, #24]
 800b858:	b913      	cbnz	r3, 800b860 <iprintf+0x14>
 800b85a:	4620      	mov	r0, r4
 800b85c:	f001 fdc2 	bl	800d3e4 <__sinit>
 800b860:	ab05      	add	r3, sp, #20
 800b862:	9a04      	ldr	r2, [sp, #16]
 800b864:	68a1      	ldr	r1, [r4, #8]
 800b866:	9301      	str	r3, [sp, #4]
 800b868:	4620      	mov	r0, r4
 800b86a:	f003 f857 	bl	800e91c <_vfiprintf_r>
 800b86e:	b002      	add	sp, #8
 800b870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b874:	b004      	add	sp, #16
 800b876:	4770      	bx	lr
 800b878:	2000052c 	.word	0x2000052c

0800b87c <_sbrk_r>:
 800b87c:	b538      	push	{r3, r4, r5, lr}
 800b87e:	4d06      	ldr	r5, [pc, #24]	; (800b898 <_sbrk_r+0x1c>)
 800b880:	2300      	movs	r3, #0
 800b882:	4604      	mov	r4, r0
 800b884:	4608      	mov	r0, r1
 800b886:	602b      	str	r3, [r5, #0]
 800b888:	f7f6 fdce 	bl	8002428 <_sbrk>
 800b88c:	1c43      	adds	r3, r0, #1
 800b88e:	d102      	bne.n	800b896 <_sbrk_r+0x1a>
 800b890:	682b      	ldr	r3, [r5, #0]
 800b892:	b103      	cbz	r3, 800b896 <_sbrk_r+0x1a>
 800b894:	6023      	str	r3, [r4, #0]
 800b896:	bd38      	pop	{r3, r4, r5, pc}
 800b898:	20001110 	.word	0x20001110

0800b89c <nanf>:
 800b89c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b8a4 <nanf+0x8>
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	7fc00000 	.word	0x7fc00000

0800b8a8 <siprintf>:
 800b8a8:	b40e      	push	{r1, r2, r3}
 800b8aa:	b500      	push	{lr}
 800b8ac:	b09c      	sub	sp, #112	; 0x70
 800b8ae:	ab1d      	add	r3, sp, #116	; 0x74
 800b8b0:	9002      	str	r0, [sp, #8]
 800b8b2:	9006      	str	r0, [sp, #24]
 800b8b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b8b8:	4809      	ldr	r0, [pc, #36]	; (800b8e0 <siprintf+0x38>)
 800b8ba:	9107      	str	r1, [sp, #28]
 800b8bc:	9104      	str	r1, [sp, #16]
 800b8be:	4909      	ldr	r1, [pc, #36]	; (800b8e4 <siprintf+0x3c>)
 800b8c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8c4:	9105      	str	r1, [sp, #20]
 800b8c6:	6800      	ldr	r0, [r0, #0]
 800b8c8:	9301      	str	r3, [sp, #4]
 800b8ca:	a902      	add	r1, sp, #8
 800b8cc:	f002 fefc 	bl	800e6c8 <_svfiprintf_r>
 800b8d0:	9b02      	ldr	r3, [sp, #8]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	701a      	strb	r2, [r3, #0]
 800b8d6:	b01c      	add	sp, #112	; 0x70
 800b8d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8dc:	b003      	add	sp, #12
 800b8de:	4770      	bx	lr
 800b8e0:	2000052c 	.word	0x2000052c
 800b8e4:	ffff0208 	.word	0xffff0208

0800b8e8 <sulp>:
 800b8e8:	b570      	push	{r4, r5, r6, lr}
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	460d      	mov	r5, r1
 800b8ee:	ec45 4b10 	vmov	d0, r4, r5
 800b8f2:	4616      	mov	r6, r2
 800b8f4:	f002 fd28 	bl	800e348 <__ulp>
 800b8f8:	ec51 0b10 	vmov	r0, r1, d0
 800b8fc:	b17e      	cbz	r6, 800b91e <sulp+0x36>
 800b8fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b902:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b906:	2b00      	cmp	r3, #0
 800b908:	dd09      	ble.n	800b91e <sulp+0x36>
 800b90a:	051b      	lsls	r3, r3, #20
 800b90c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b910:	2400      	movs	r4, #0
 800b912:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b916:	4622      	mov	r2, r4
 800b918:	462b      	mov	r3, r5
 800b91a:	f7f4 fe7d 	bl	8000618 <__aeabi_dmul>
 800b91e:	bd70      	pop	{r4, r5, r6, pc}

0800b920 <_strtod_l>:
 800b920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	ed2d 8b02 	vpush	{d8}
 800b928:	b09d      	sub	sp, #116	; 0x74
 800b92a:	461f      	mov	r7, r3
 800b92c:	2300      	movs	r3, #0
 800b92e:	9318      	str	r3, [sp, #96]	; 0x60
 800b930:	4ba2      	ldr	r3, [pc, #648]	; (800bbbc <_strtod_l+0x29c>)
 800b932:	9213      	str	r2, [sp, #76]	; 0x4c
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	9305      	str	r3, [sp, #20]
 800b938:	4604      	mov	r4, r0
 800b93a:	4618      	mov	r0, r3
 800b93c:	4688      	mov	r8, r1
 800b93e:	f7f4 fc57 	bl	80001f0 <strlen>
 800b942:	f04f 0a00 	mov.w	sl, #0
 800b946:	4605      	mov	r5, r0
 800b948:	f04f 0b00 	mov.w	fp, #0
 800b94c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b950:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b952:	781a      	ldrb	r2, [r3, #0]
 800b954:	2a2b      	cmp	r2, #43	; 0x2b
 800b956:	d04e      	beq.n	800b9f6 <_strtod_l+0xd6>
 800b958:	d83b      	bhi.n	800b9d2 <_strtod_l+0xb2>
 800b95a:	2a0d      	cmp	r2, #13
 800b95c:	d834      	bhi.n	800b9c8 <_strtod_l+0xa8>
 800b95e:	2a08      	cmp	r2, #8
 800b960:	d834      	bhi.n	800b9cc <_strtod_l+0xac>
 800b962:	2a00      	cmp	r2, #0
 800b964:	d03e      	beq.n	800b9e4 <_strtod_l+0xc4>
 800b966:	2300      	movs	r3, #0
 800b968:	930a      	str	r3, [sp, #40]	; 0x28
 800b96a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b96c:	7833      	ldrb	r3, [r6, #0]
 800b96e:	2b30      	cmp	r3, #48	; 0x30
 800b970:	f040 80b0 	bne.w	800bad4 <_strtod_l+0x1b4>
 800b974:	7873      	ldrb	r3, [r6, #1]
 800b976:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b97a:	2b58      	cmp	r3, #88	; 0x58
 800b97c:	d168      	bne.n	800ba50 <_strtod_l+0x130>
 800b97e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b980:	9301      	str	r3, [sp, #4]
 800b982:	ab18      	add	r3, sp, #96	; 0x60
 800b984:	9702      	str	r7, [sp, #8]
 800b986:	9300      	str	r3, [sp, #0]
 800b988:	4a8d      	ldr	r2, [pc, #564]	; (800bbc0 <_strtod_l+0x2a0>)
 800b98a:	ab19      	add	r3, sp, #100	; 0x64
 800b98c:	a917      	add	r1, sp, #92	; 0x5c
 800b98e:	4620      	mov	r0, r4
 800b990:	f001 fe2c 	bl	800d5ec <__gethex>
 800b994:	f010 0707 	ands.w	r7, r0, #7
 800b998:	4605      	mov	r5, r0
 800b99a:	d005      	beq.n	800b9a8 <_strtod_l+0x88>
 800b99c:	2f06      	cmp	r7, #6
 800b99e:	d12c      	bne.n	800b9fa <_strtod_l+0xda>
 800b9a0:	3601      	adds	r6, #1
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	9617      	str	r6, [sp, #92]	; 0x5c
 800b9a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b9a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	f040 8590 	bne.w	800c4d0 <_strtod_l+0xbb0>
 800b9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9b2:	b1eb      	cbz	r3, 800b9f0 <_strtod_l+0xd0>
 800b9b4:	4652      	mov	r2, sl
 800b9b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b9ba:	ec43 2b10 	vmov	d0, r2, r3
 800b9be:	b01d      	add	sp, #116	; 0x74
 800b9c0:	ecbd 8b02 	vpop	{d8}
 800b9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c8:	2a20      	cmp	r2, #32
 800b9ca:	d1cc      	bne.n	800b966 <_strtod_l+0x46>
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	9317      	str	r3, [sp, #92]	; 0x5c
 800b9d0:	e7be      	b.n	800b950 <_strtod_l+0x30>
 800b9d2:	2a2d      	cmp	r2, #45	; 0x2d
 800b9d4:	d1c7      	bne.n	800b966 <_strtod_l+0x46>
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	920a      	str	r2, [sp, #40]	; 0x28
 800b9da:	1c5a      	adds	r2, r3, #1
 800b9dc:	9217      	str	r2, [sp, #92]	; 0x5c
 800b9de:	785b      	ldrb	r3, [r3, #1]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d1c2      	bne.n	800b96a <_strtod_l+0x4a>
 800b9e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b9e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	f040 856e 	bne.w	800c4cc <_strtod_l+0xbac>
 800b9f0:	4652      	mov	r2, sl
 800b9f2:	465b      	mov	r3, fp
 800b9f4:	e7e1      	b.n	800b9ba <_strtod_l+0x9a>
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	e7ee      	b.n	800b9d8 <_strtod_l+0xb8>
 800b9fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b9fc:	b13a      	cbz	r2, 800ba0e <_strtod_l+0xee>
 800b9fe:	2135      	movs	r1, #53	; 0x35
 800ba00:	a81a      	add	r0, sp, #104	; 0x68
 800ba02:	f002 fdac 	bl	800e55e <__copybits>
 800ba06:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ba08:	4620      	mov	r0, r4
 800ba0a:	f002 f96b 	bl	800dce4 <_Bfree>
 800ba0e:	3f01      	subs	r7, #1
 800ba10:	2f04      	cmp	r7, #4
 800ba12:	d806      	bhi.n	800ba22 <_strtod_l+0x102>
 800ba14:	e8df f007 	tbb	[pc, r7]
 800ba18:	1714030a 	.word	0x1714030a
 800ba1c:	0a          	.byte	0x0a
 800ba1d:	00          	.byte	0x00
 800ba1e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ba22:	0728      	lsls	r0, r5, #28
 800ba24:	d5c0      	bpl.n	800b9a8 <_strtod_l+0x88>
 800ba26:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ba2a:	e7bd      	b.n	800b9a8 <_strtod_l+0x88>
 800ba2c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ba30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ba32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ba36:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ba3a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ba3e:	e7f0      	b.n	800ba22 <_strtod_l+0x102>
 800ba40:	f8df b180 	ldr.w	fp, [pc, #384]	; 800bbc4 <_strtod_l+0x2a4>
 800ba44:	e7ed      	b.n	800ba22 <_strtod_l+0x102>
 800ba46:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ba4a:	f04f 3aff 	mov.w	sl, #4294967295
 800ba4e:	e7e8      	b.n	800ba22 <_strtod_l+0x102>
 800ba50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba52:	1c5a      	adds	r2, r3, #1
 800ba54:	9217      	str	r2, [sp, #92]	; 0x5c
 800ba56:	785b      	ldrb	r3, [r3, #1]
 800ba58:	2b30      	cmp	r3, #48	; 0x30
 800ba5a:	d0f9      	beq.n	800ba50 <_strtod_l+0x130>
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d0a3      	beq.n	800b9a8 <_strtod_l+0x88>
 800ba60:	2301      	movs	r3, #1
 800ba62:	f04f 0900 	mov.w	r9, #0
 800ba66:	9304      	str	r3, [sp, #16]
 800ba68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba6a:	9308      	str	r3, [sp, #32]
 800ba6c:	f8cd 901c 	str.w	r9, [sp, #28]
 800ba70:	464f      	mov	r7, r9
 800ba72:	220a      	movs	r2, #10
 800ba74:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ba76:	7806      	ldrb	r6, [r0, #0]
 800ba78:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ba7c:	b2d9      	uxtb	r1, r3
 800ba7e:	2909      	cmp	r1, #9
 800ba80:	d92a      	bls.n	800bad8 <_strtod_l+0x1b8>
 800ba82:	9905      	ldr	r1, [sp, #20]
 800ba84:	462a      	mov	r2, r5
 800ba86:	f003 f8c6 	bl	800ec16 <strncmp>
 800ba8a:	b398      	cbz	r0, 800baf4 <_strtod_l+0x1d4>
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	4632      	mov	r2, r6
 800ba90:	463d      	mov	r5, r7
 800ba92:	9005      	str	r0, [sp, #20]
 800ba94:	4603      	mov	r3, r0
 800ba96:	2a65      	cmp	r2, #101	; 0x65
 800ba98:	d001      	beq.n	800ba9e <_strtod_l+0x17e>
 800ba9a:	2a45      	cmp	r2, #69	; 0x45
 800ba9c:	d118      	bne.n	800bad0 <_strtod_l+0x1b0>
 800ba9e:	b91d      	cbnz	r5, 800baa8 <_strtod_l+0x188>
 800baa0:	9a04      	ldr	r2, [sp, #16]
 800baa2:	4302      	orrs	r2, r0
 800baa4:	d09e      	beq.n	800b9e4 <_strtod_l+0xc4>
 800baa6:	2500      	movs	r5, #0
 800baa8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800baac:	f108 0201 	add.w	r2, r8, #1
 800bab0:	9217      	str	r2, [sp, #92]	; 0x5c
 800bab2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800bab6:	2a2b      	cmp	r2, #43	; 0x2b
 800bab8:	d075      	beq.n	800bba6 <_strtod_l+0x286>
 800baba:	2a2d      	cmp	r2, #45	; 0x2d
 800babc:	d07b      	beq.n	800bbb6 <_strtod_l+0x296>
 800babe:	f04f 0c00 	mov.w	ip, #0
 800bac2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bac6:	2909      	cmp	r1, #9
 800bac8:	f240 8082 	bls.w	800bbd0 <_strtod_l+0x2b0>
 800bacc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bad0:	2600      	movs	r6, #0
 800bad2:	e09d      	b.n	800bc10 <_strtod_l+0x2f0>
 800bad4:	2300      	movs	r3, #0
 800bad6:	e7c4      	b.n	800ba62 <_strtod_l+0x142>
 800bad8:	2f08      	cmp	r7, #8
 800bada:	bfd8      	it	le
 800badc:	9907      	ldrle	r1, [sp, #28]
 800bade:	f100 0001 	add.w	r0, r0, #1
 800bae2:	bfda      	itte	le
 800bae4:	fb02 3301 	mlale	r3, r2, r1, r3
 800bae8:	9307      	strle	r3, [sp, #28]
 800baea:	fb02 3909 	mlagt	r9, r2, r9, r3
 800baee:	3701      	adds	r7, #1
 800baf0:	9017      	str	r0, [sp, #92]	; 0x5c
 800baf2:	e7bf      	b.n	800ba74 <_strtod_l+0x154>
 800baf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800baf6:	195a      	adds	r2, r3, r5
 800baf8:	9217      	str	r2, [sp, #92]	; 0x5c
 800bafa:	5d5a      	ldrb	r2, [r3, r5]
 800bafc:	2f00      	cmp	r7, #0
 800bafe:	d037      	beq.n	800bb70 <_strtod_l+0x250>
 800bb00:	9005      	str	r0, [sp, #20]
 800bb02:	463d      	mov	r5, r7
 800bb04:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bb08:	2b09      	cmp	r3, #9
 800bb0a:	d912      	bls.n	800bb32 <_strtod_l+0x212>
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	e7c2      	b.n	800ba96 <_strtod_l+0x176>
 800bb10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb12:	1c5a      	adds	r2, r3, #1
 800bb14:	9217      	str	r2, [sp, #92]	; 0x5c
 800bb16:	785a      	ldrb	r2, [r3, #1]
 800bb18:	3001      	adds	r0, #1
 800bb1a:	2a30      	cmp	r2, #48	; 0x30
 800bb1c:	d0f8      	beq.n	800bb10 <_strtod_l+0x1f0>
 800bb1e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bb22:	2b08      	cmp	r3, #8
 800bb24:	f200 84d9 	bhi.w	800c4da <_strtod_l+0xbba>
 800bb28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb2a:	9005      	str	r0, [sp, #20]
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	9308      	str	r3, [sp, #32]
 800bb30:	4605      	mov	r5, r0
 800bb32:	3a30      	subs	r2, #48	; 0x30
 800bb34:	f100 0301 	add.w	r3, r0, #1
 800bb38:	d014      	beq.n	800bb64 <_strtod_l+0x244>
 800bb3a:	9905      	ldr	r1, [sp, #20]
 800bb3c:	4419      	add	r1, r3
 800bb3e:	9105      	str	r1, [sp, #20]
 800bb40:	462b      	mov	r3, r5
 800bb42:	eb00 0e05 	add.w	lr, r0, r5
 800bb46:	210a      	movs	r1, #10
 800bb48:	4573      	cmp	r3, lr
 800bb4a:	d113      	bne.n	800bb74 <_strtod_l+0x254>
 800bb4c:	182b      	adds	r3, r5, r0
 800bb4e:	2b08      	cmp	r3, #8
 800bb50:	f105 0501 	add.w	r5, r5, #1
 800bb54:	4405      	add	r5, r0
 800bb56:	dc1c      	bgt.n	800bb92 <_strtod_l+0x272>
 800bb58:	9907      	ldr	r1, [sp, #28]
 800bb5a:	230a      	movs	r3, #10
 800bb5c:	fb03 2301 	mla	r3, r3, r1, r2
 800bb60:	9307      	str	r3, [sp, #28]
 800bb62:	2300      	movs	r3, #0
 800bb64:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bb66:	1c51      	adds	r1, r2, #1
 800bb68:	9117      	str	r1, [sp, #92]	; 0x5c
 800bb6a:	7852      	ldrb	r2, [r2, #1]
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	e7c9      	b.n	800bb04 <_strtod_l+0x1e4>
 800bb70:	4638      	mov	r0, r7
 800bb72:	e7d2      	b.n	800bb1a <_strtod_l+0x1fa>
 800bb74:	2b08      	cmp	r3, #8
 800bb76:	dc04      	bgt.n	800bb82 <_strtod_l+0x262>
 800bb78:	9e07      	ldr	r6, [sp, #28]
 800bb7a:	434e      	muls	r6, r1
 800bb7c:	9607      	str	r6, [sp, #28]
 800bb7e:	3301      	adds	r3, #1
 800bb80:	e7e2      	b.n	800bb48 <_strtod_l+0x228>
 800bb82:	f103 0c01 	add.w	ip, r3, #1
 800bb86:	f1bc 0f10 	cmp.w	ip, #16
 800bb8a:	bfd8      	it	le
 800bb8c:	fb01 f909 	mulle.w	r9, r1, r9
 800bb90:	e7f5      	b.n	800bb7e <_strtod_l+0x25e>
 800bb92:	2d10      	cmp	r5, #16
 800bb94:	bfdc      	itt	le
 800bb96:	230a      	movle	r3, #10
 800bb98:	fb03 2909 	mlale	r9, r3, r9, r2
 800bb9c:	e7e1      	b.n	800bb62 <_strtod_l+0x242>
 800bb9e:	2300      	movs	r3, #0
 800bba0:	9305      	str	r3, [sp, #20]
 800bba2:	2301      	movs	r3, #1
 800bba4:	e77c      	b.n	800baa0 <_strtod_l+0x180>
 800bba6:	f04f 0c00 	mov.w	ip, #0
 800bbaa:	f108 0202 	add.w	r2, r8, #2
 800bbae:	9217      	str	r2, [sp, #92]	; 0x5c
 800bbb0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800bbb4:	e785      	b.n	800bac2 <_strtod_l+0x1a2>
 800bbb6:	f04f 0c01 	mov.w	ip, #1
 800bbba:	e7f6      	b.n	800bbaa <_strtod_l+0x28a>
 800bbbc:	0800ff64 	.word	0x0800ff64
 800bbc0:	0800fcb4 	.word	0x0800fcb4
 800bbc4:	7ff00000 	.word	0x7ff00000
 800bbc8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bbca:	1c51      	adds	r1, r2, #1
 800bbcc:	9117      	str	r1, [sp, #92]	; 0x5c
 800bbce:	7852      	ldrb	r2, [r2, #1]
 800bbd0:	2a30      	cmp	r2, #48	; 0x30
 800bbd2:	d0f9      	beq.n	800bbc8 <_strtod_l+0x2a8>
 800bbd4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bbd8:	2908      	cmp	r1, #8
 800bbda:	f63f af79 	bhi.w	800bad0 <_strtod_l+0x1b0>
 800bbde:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bbe2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bbe4:	9206      	str	r2, [sp, #24]
 800bbe6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bbe8:	1c51      	adds	r1, r2, #1
 800bbea:	9117      	str	r1, [sp, #92]	; 0x5c
 800bbec:	7852      	ldrb	r2, [r2, #1]
 800bbee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800bbf2:	2e09      	cmp	r6, #9
 800bbf4:	d937      	bls.n	800bc66 <_strtod_l+0x346>
 800bbf6:	9e06      	ldr	r6, [sp, #24]
 800bbf8:	1b89      	subs	r1, r1, r6
 800bbfa:	2908      	cmp	r1, #8
 800bbfc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800bc00:	dc02      	bgt.n	800bc08 <_strtod_l+0x2e8>
 800bc02:	4576      	cmp	r6, lr
 800bc04:	bfa8      	it	ge
 800bc06:	4676      	movge	r6, lr
 800bc08:	f1bc 0f00 	cmp.w	ip, #0
 800bc0c:	d000      	beq.n	800bc10 <_strtod_l+0x2f0>
 800bc0e:	4276      	negs	r6, r6
 800bc10:	2d00      	cmp	r5, #0
 800bc12:	d14d      	bne.n	800bcb0 <_strtod_l+0x390>
 800bc14:	9904      	ldr	r1, [sp, #16]
 800bc16:	4301      	orrs	r1, r0
 800bc18:	f47f aec6 	bne.w	800b9a8 <_strtod_l+0x88>
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f47f aee1 	bne.w	800b9e4 <_strtod_l+0xc4>
 800bc22:	2a69      	cmp	r2, #105	; 0x69
 800bc24:	d027      	beq.n	800bc76 <_strtod_l+0x356>
 800bc26:	dc24      	bgt.n	800bc72 <_strtod_l+0x352>
 800bc28:	2a49      	cmp	r2, #73	; 0x49
 800bc2a:	d024      	beq.n	800bc76 <_strtod_l+0x356>
 800bc2c:	2a4e      	cmp	r2, #78	; 0x4e
 800bc2e:	f47f aed9 	bne.w	800b9e4 <_strtod_l+0xc4>
 800bc32:	499f      	ldr	r1, [pc, #636]	; (800beb0 <_strtod_l+0x590>)
 800bc34:	a817      	add	r0, sp, #92	; 0x5c
 800bc36:	f001 ff31 	bl	800da9c <__match>
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	f43f aed2 	beq.w	800b9e4 <_strtod_l+0xc4>
 800bc40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	2b28      	cmp	r3, #40	; 0x28
 800bc46:	d12d      	bne.n	800bca4 <_strtod_l+0x384>
 800bc48:	499a      	ldr	r1, [pc, #616]	; (800beb4 <_strtod_l+0x594>)
 800bc4a:	aa1a      	add	r2, sp, #104	; 0x68
 800bc4c:	a817      	add	r0, sp, #92	; 0x5c
 800bc4e:	f001 ff39 	bl	800dac4 <__hexnan>
 800bc52:	2805      	cmp	r0, #5
 800bc54:	d126      	bne.n	800bca4 <_strtod_l+0x384>
 800bc56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc58:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800bc5c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bc60:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bc64:	e6a0      	b.n	800b9a8 <_strtod_l+0x88>
 800bc66:	210a      	movs	r1, #10
 800bc68:	fb01 2e0e 	mla	lr, r1, lr, r2
 800bc6c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bc70:	e7b9      	b.n	800bbe6 <_strtod_l+0x2c6>
 800bc72:	2a6e      	cmp	r2, #110	; 0x6e
 800bc74:	e7db      	b.n	800bc2e <_strtod_l+0x30e>
 800bc76:	4990      	ldr	r1, [pc, #576]	; (800beb8 <_strtod_l+0x598>)
 800bc78:	a817      	add	r0, sp, #92	; 0x5c
 800bc7a:	f001 ff0f 	bl	800da9c <__match>
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	f43f aeb0 	beq.w	800b9e4 <_strtod_l+0xc4>
 800bc84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc86:	498d      	ldr	r1, [pc, #564]	; (800bebc <_strtod_l+0x59c>)
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	a817      	add	r0, sp, #92	; 0x5c
 800bc8c:	9317      	str	r3, [sp, #92]	; 0x5c
 800bc8e:	f001 ff05 	bl	800da9c <__match>
 800bc92:	b910      	cbnz	r0, 800bc9a <_strtod_l+0x37a>
 800bc94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc96:	3301      	adds	r3, #1
 800bc98:	9317      	str	r3, [sp, #92]	; 0x5c
 800bc9a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800becc <_strtod_l+0x5ac>
 800bc9e:	f04f 0a00 	mov.w	sl, #0
 800bca2:	e681      	b.n	800b9a8 <_strtod_l+0x88>
 800bca4:	4886      	ldr	r0, [pc, #536]	; (800bec0 <_strtod_l+0x5a0>)
 800bca6:	f002 ff6b 	bl	800eb80 <nan>
 800bcaa:	ec5b ab10 	vmov	sl, fp, d0
 800bcae:	e67b      	b.n	800b9a8 <_strtod_l+0x88>
 800bcb0:	9b05      	ldr	r3, [sp, #20]
 800bcb2:	9807      	ldr	r0, [sp, #28]
 800bcb4:	1af3      	subs	r3, r6, r3
 800bcb6:	2f00      	cmp	r7, #0
 800bcb8:	bf08      	it	eq
 800bcba:	462f      	moveq	r7, r5
 800bcbc:	2d10      	cmp	r5, #16
 800bcbe:	9306      	str	r3, [sp, #24]
 800bcc0:	46a8      	mov	r8, r5
 800bcc2:	bfa8      	it	ge
 800bcc4:	f04f 0810 	movge.w	r8, #16
 800bcc8:	f7f4 fc2c 	bl	8000524 <__aeabi_ui2d>
 800bccc:	2d09      	cmp	r5, #9
 800bcce:	4682      	mov	sl, r0
 800bcd0:	468b      	mov	fp, r1
 800bcd2:	dd13      	ble.n	800bcfc <_strtod_l+0x3dc>
 800bcd4:	4b7b      	ldr	r3, [pc, #492]	; (800bec4 <_strtod_l+0x5a4>)
 800bcd6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bcda:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bcde:	f7f4 fc9b 	bl	8000618 <__aeabi_dmul>
 800bce2:	4682      	mov	sl, r0
 800bce4:	4648      	mov	r0, r9
 800bce6:	468b      	mov	fp, r1
 800bce8:	f7f4 fc1c 	bl	8000524 <__aeabi_ui2d>
 800bcec:	4602      	mov	r2, r0
 800bcee:	460b      	mov	r3, r1
 800bcf0:	4650      	mov	r0, sl
 800bcf2:	4659      	mov	r1, fp
 800bcf4:	f7f4 fada 	bl	80002ac <__adddf3>
 800bcf8:	4682      	mov	sl, r0
 800bcfa:	468b      	mov	fp, r1
 800bcfc:	2d0f      	cmp	r5, #15
 800bcfe:	dc38      	bgt.n	800bd72 <_strtod_l+0x452>
 800bd00:	9b06      	ldr	r3, [sp, #24]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	f43f ae50 	beq.w	800b9a8 <_strtod_l+0x88>
 800bd08:	dd24      	ble.n	800bd54 <_strtod_l+0x434>
 800bd0a:	2b16      	cmp	r3, #22
 800bd0c:	dc0b      	bgt.n	800bd26 <_strtod_l+0x406>
 800bd0e:	496d      	ldr	r1, [pc, #436]	; (800bec4 <_strtod_l+0x5a4>)
 800bd10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bd14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd18:	4652      	mov	r2, sl
 800bd1a:	465b      	mov	r3, fp
 800bd1c:	f7f4 fc7c 	bl	8000618 <__aeabi_dmul>
 800bd20:	4682      	mov	sl, r0
 800bd22:	468b      	mov	fp, r1
 800bd24:	e640      	b.n	800b9a8 <_strtod_l+0x88>
 800bd26:	9a06      	ldr	r2, [sp, #24]
 800bd28:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	db20      	blt.n	800bd72 <_strtod_l+0x452>
 800bd30:	4c64      	ldr	r4, [pc, #400]	; (800bec4 <_strtod_l+0x5a4>)
 800bd32:	f1c5 050f 	rsb	r5, r5, #15
 800bd36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bd3a:	4652      	mov	r2, sl
 800bd3c:	465b      	mov	r3, fp
 800bd3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd42:	f7f4 fc69 	bl	8000618 <__aeabi_dmul>
 800bd46:	9b06      	ldr	r3, [sp, #24]
 800bd48:	1b5d      	subs	r5, r3, r5
 800bd4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bd4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bd52:	e7e3      	b.n	800bd1c <_strtod_l+0x3fc>
 800bd54:	9b06      	ldr	r3, [sp, #24]
 800bd56:	3316      	adds	r3, #22
 800bd58:	db0b      	blt.n	800bd72 <_strtod_l+0x452>
 800bd5a:	9b05      	ldr	r3, [sp, #20]
 800bd5c:	1b9e      	subs	r6, r3, r6
 800bd5e:	4b59      	ldr	r3, [pc, #356]	; (800bec4 <_strtod_l+0x5a4>)
 800bd60:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800bd64:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bd68:	4650      	mov	r0, sl
 800bd6a:	4659      	mov	r1, fp
 800bd6c:	f7f4 fd7e 	bl	800086c <__aeabi_ddiv>
 800bd70:	e7d6      	b.n	800bd20 <_strtod_l+0x400>
 800bd72:	9b06      	ldr	r3, [sp, #24]
 800bd74:	eba5 0808 	sub.w	r8, r5, r8
 800bd78:	4498      	add	r8, r3
 800bd7a:	f1b8 0f00 	cmp.w	r8, #0
 800bd7e:	dd74      	ble.n	800be6a <_strtod_l+0x54a>
 800bd80:	f018 030f 	ands.w	r3, r8, #15
 800bd84:	d00a      	beq.n	800bd9c <_strtod_l+0x47c>
 800bd86:	494f      	ldr	r1, [pc, #316]	; (800bec4 <_strtod_l+0x5a4>)
 800bd88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bd8c:	4652      	mov	r2, sl
 800bd8e:	465b      	mov	r3, fp
 800bd90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd94:	f7f4 fc40 	bl	8000618 <__aeabi_dmul>
 800bd98:	4682      	mov	sl, r0
 800bd9a:	468b      	mov	fp, r1
 800bd9c:	f038 080f 	bics.w	r8, r8, #15
 800bda0:	d04f      	beq.n	800be42 <_strtod_l+0x522>
 800bda2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bda6:	dd22      	ble.n	800bdee <_strtod_l+0x4ce>
 800bda8:	2500      	movs	r5, #0
 800bdaa:	462e      	mov	r6, r5
 800bdac:	9507      	str	r5, [sp, #28]
 800bdae:	9505      	str	r5, [sp, #20]
 800bdb0:	2322      	movs	r3, #34	; 0x22
 800bdb2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800becc <_strtod_l+0x5ac>
 800bdb6:	6023      	str	r3, [r4, #0]
 800bdb8:	f04f 0a00 	mov.w	sl, #0
 800bdbc:	9b07      	ldr	r3, [sp, #28]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	f43f adf2 	beq.w	800b9a8 <_strtod_l+0x88>
 800bdc4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f001 ff8c 	bl	800dce4 <_Bfree>
 800bdcc:	9905      	ldr	r1, [sp, #20]
 800bdce:	4620      	mov	r0, r4
 800bdd0:	f001 ff88 	bl	800dce4 <_Bfree>
 800bdd4:	4631      	mov	r1, r6
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f001 ff84 	bl	800dce4 <_Bfree>
 800bddc:	9907      	ldr	r1, [sp, #28]
 800bdde:	4620      	mov	r0, r4
 800bde0:	f001 ff80 	bl	800dce4 <_Bfree>
 800bde4:	4629      	mov	r1, r5
 800bde6:	4620      	mov	r0, r4
 800bde8:	f001 ff7c 	bl	800dce4 <_Bfree>
 800bdec:	e5dc      	b.n	800b9a8 <_strtod_l+0x88>
 800bdee:	4b36      	ldr	r3, [pc, #216]	; (800bec8 <_strtod_l+0x5a8>)
 800bdf0:	9304      	str	r3, [sp, #16]
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bdf8:	4650      	mov	r0, sl
 800bdfa:	4659      	mov	r1, fp
 800bdfc:	4699      	mov	r9, r3
 800bdfe:	f1b8 0f01 	cmp.w	r8, #1
 800be02:	dc21      	bgt.n	800be48 <_strtod_l+0x528>
 800be04:	b10b      	cbz	r3, 800be0a <_strtod_l+0x4ea>
 800be06:	4682      	mov	sl, r0
 800be08:	468b      	mov	fp, r1
 800be0a:	4b2f      	ldr	r3, [pc, #188]	; (800bec8 <_strtod_l+0x5a8>)
 800be0c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800be10:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800be14:	4652      	mov	r2, sl
 800be16:	465b      	mov	r3, fp
 800be18:	e9d9 0100 	ldrd	r0, r1, [r9]
 800be1c:	f7f4 fbfc 	bl	8000618 <__aeabi_dmul>
 800be20:	4b2a      	ldr	r3, [pc, #168]	; (800becc <_strtod_l+0x5ac>)
 800be22:	460a      	mov	r2, r1
 800be24:	400b      	ands	r3, r1
 800be26:	492a      	ldr	r1, [pc, #168]	; (800bed0 <_strtod_l+0x5b0>)
 800be28:	428b      	cmp	r3, r1
 800be2a:	4682      	mov	sl, r0
 800be2c:	d8bc      	bhi.n	800bda8 <_strtod_l+0x488>
 800be2e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800be32:	428b      	cmp	r3, r1
 800be34:	bf86      	itte	hi
 800be36:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800bed4 <_strtod_l+0x5b4>
 800be3a:	f04f 3aff 	movhi.w	sl, #4294967295
 800be3e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800be42:	2300      	movs	r3, #0
 800be44:	9304      	str	r3, [sp, #16]
 800be46:	e084      	b.n	800bf52 <_strtod_l+0x632>
 800be48:	f018 0f01 	tst.w	r8, #1
 800be4c:	d005      	beq.n	800be5a <_strtod_l+0x53a>
 800be4e:	9b04      	ldr	r3, [sp, #16]
 800be50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be54:	f7f4 fbe0 	bl	8000618 <__aeabi_dmul>
 800be58:	2301      	movs	r3, #1
 800be5a:	9a04      	ldr	r2, [sp, #16]
 800be5c:	3208      	adds	r2, #8
 800be5e:	f109 0901 	add.w	r9, r9, #1
 800be62:	ea4f 0868 	mov.w	r8, r8, asr #1
 800be66:	9204      	str	r2, [sp, #16]
 800be68:	e7c9      	b.n	800bdfe <_strtod_l+0x4de>
 800be6a:	d0ea      	beq.n	800be42 <_strtod_l+0x522>
 800be6c:	f1c8 0800 	rsb	r8, r8, #0
 800be70:	f018 020f 	ands.w	r2, r8, #15
 800be74:	d00a      	beq.n	800be8c <_strtod_l+0x56c>
 800be76:	4b13      	ldr	r3, [pc, #76]	; (800bec4 <_strtod_l+0x5a4>)
 800be78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be7c:	4650      	mov	r0, sl
 800be7e:	4659      	mov	r1, fp
 800be80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be84:	f7f4 fcf2 	bl	800086c <__aeabi_ddiv>
 800be88:	4682      	mov	sl, r0
 800be8a:	468b      	mov	fp, r1
 800be8c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800be90:	d0d7      	beq.n	800be42 <_strtod_l+0x522>
 800be92:	f1b8 0f1f 	cmp.w	r8, #31
 800be96:	dd1f      	ble.n	800bed8 <_strtod_l+0x5b8>
 800be98:	2500      	movs	r5, #0
 800be9a:	462e      	mov	r6, r5
 800be9c:	9507      	str	r5, [sp, #28]
 800be9e:	9505      	str	r5, [sp, #20]
 800bea0:	2322      	movs	r3, #34	; 0x22
 800bea2:	f04f 0a00 	mov.w	sl, #0
 800bea6:	f04f 0b00 	mov.w	fp, #0
 800beaa:	6023      	str	r3, [r4, #0]
 800beac:	e786      	b.n	800bdbc <_strtod_l+0x49c>
 800beae:	bf00      	nop
 800beb0:	0800fc85 	.word	0x0800fc85
 800beb4:	0800fcc8 	.word	0x0800fcc8
 800beb8:	0800fc7d 	.word	0x0800fc7d
 800bebc:	0800fe0c 	.word	0x0800fe0c
 800bec0:	08010120 	.word	0x08010120
 800bec4:	08010000 	.word	0x08010000
 800bec8:	0800ffd8 	.word	0x0800ffd8
 800becc:	7ff00000 	.word	0x7ff00000
 800bed0:	7ca00000 	.word	0x7ca00000
 800bed4:	7fefffff 	.word	0x7fefffff
 800bed8:	f018 0310 	ands.w	r3, r8, #16
 800bedc:	bf18      	it	ne
 800bede:	236a      	movne	r3, #106	; 0x6a
 800bee0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c290 <_strtod_l+0x970>
 800bee4:	9304      	str	r3, [sp, #16]
 800bee6:	4650      	mov	r0, sl
 800bee8:	4659      	mov	r1, fp
 800beea:	2300      	movs	r3, #0
 800beec:	f018 0f01 	tst.w	r8, #1
 800bef0:	d004      	beq.n	800befc <_strtod_l+0x5dc>
 800bef2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bef6:	f7f4 fb8f 	bl	8000618 <__aeabi_dmul>
 800befa:	2301      	movs	r3, #1
 800befc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bf00:	f109 0908 	add.w	r9, r9, #8
 800bf04:	d1f2      	bne.n	800beec <_strtod_l+0x5cc>
 800bf06:	b10b      	cbz	r3, 800bf0c <_strtod_l+0x5ec>
 800bf08:	4682      	mov	sl, r0
 800bf0a:	468b      	mov	fp, r1
 800bf0c:	9b04      	ldr	r3, [sp, #16]
 800bf0e:	b1c3      	cbz	r3, 800bf42 <_strtod_l+0x622>
 800bf10:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bf14:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	4659      	mov	r1, fp
 800bf1c:	dd11      	ble.n	800bf42 <_strtod_l+0x622>
 800bf1e:	2b1f      	cmp	r3, #31
 800bf20:	f340 8124 	ble.w	800c16c <_strtod_l+0x84c>
 800bf24:	2b34      	cmp	r3, #52	; 0x34
 800bf26:	bfde      	ittt	le
 800bf28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bf2c:	f04f 33ff 	movle.w	r3, #4294967295
 800bf30:	fa03 f202 	lslle.w	r2, r3, r2
 800bf34:	f04f 0a00 	mov.w	sl, #0
 800bf38:	bfcc      	ite	gt
 800bf3a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bf3e:	ea02 0b01 	andle.w	fp, r2, r1
 800bf42:	2200      	movs	r2, #0
 800bf44:	2300      	movs	r3, #0
 800bf46:	4650      	mov	r0, sl
 800bf48:	4659      	mov	r1, fp
 800bf4a:	f7f4 fdcd 	bl	8000ae8 <__aeabi_dcmpeq>
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	d1a2      	bne.n	800be98 <_strtod_l+0x578>
 800bf52:	9b07      	ldr	r3, [sp, #28]
 800bf54:	9300      	str	r3, [sp, #0]
 800bf56:	9908      	ldr	r1, [sp, #32]
 800bf58:	462b      	mov	r3, r5
 800bf5a:	463a      	mov	r2, r7
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	f001 ff29 	bl	800ddb4 <__s2b>
 800bf62:	9007      	str	r0, [sp, #28]
 800bf64:	2800      	cmp	r0, #0
 800bf66:	f43f af1f 	beq.w	800bda8 <_strtod_l+0x488>
 800bf6a:	9b05      	ldr	r3, [sp, #20]
 800bf6c:	1b9e      	subs	r6, r3, r6
 800bf6e:	9b06      	ldr	r3, [sp, #24]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	bfb4      	ite	lt
 800bf74:	4633      	movlt	r3, r6
 800bf76:	2300      	movge	r3, #0
 800bf78:	930c      	str	r3, [sp, #48]	; 0x30
 800bf7a:	9b06      	ldr	r3, [sp, #24]
 800bf7c:	2500      	movs	r5, #0
 800bf7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bf82:	9312      	str	r3, [sp, #72]	; 0x48
 800bf84:	462e      	mov	r6, r5
 800bf86:	9b07      	ldr	r3, [sp, #28]
 800bf88:	4620      	mov	r0, r4
 800bf8a:	6859      	ldr	r1, [r3, #4]
 800bf8c:	f001 fe6a 	bl	800dc64 <_Balloc>
 800bf90:	9005      	str	r0, [sp, #20]
 800bf92:	2800      	cmp	r0, #0
 800bf94:	f43f af0c 	beq.w	800bdb0 <_strtod_l+0x490>
 800bf98:	9b07      	ldr	r3, [sp, #28]
 800bf9a:	691a      	ldr	r2, [r3, #16]
 800bf9c:	3202      	adds	r2, #2
 800bf9e:	f103 010c 	add.w	r1, r3, #12
 800bfa2:	0092      	lsls	r2, r2, #2
 800bfa4:	300c      	adds	r0, #12
 800bfa6:	f001 fe42 	bl	800dc2e <memcpy>
 800bfaa:	ec4b ab10 	vmov	d0, sl, fp
 800bfae:	aa1a      	add	r2, sp, #104	; 0x68
 800bfb0:	a919      	add	r1, sp, #100	; 0x64
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	f002 fa44 	bl	800e440 <__d2b>
 800bfb8:	ec4b ab18 	vmov	d8, sl, fp
 800bfbc:	9018      	str	r0, [sp, #96]	; 0x60
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	f43f aef6 	beq.w	800bdb0 <_strtod_l+0x490>
 800bfc4:	2101      	movs	r1, #1
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	f001 ff8e 	bl	800dee8 <__i2b>
 800bfcc:	4606      	mov	r6, r0
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	f43f aeee 	beq.w	800bdb0 <_strtod_l+0x490>
 800bfd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bfd6:	9904      	ldr	r1, [sp, #16]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	bfab      	itete	ge
 800bfdc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800bfde:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800bfe0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bfe2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800bfe6:	bfac      	ite	ge
 800bfe8:	eb03 0902 	addge.w	r9, r3, r2
 800bfec:	1ad7      	sublt	r7, r2, r3
 800bfee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bff0:	eba3 0801 	sub.w	r8, r3, r1
 800bff4:	4490      	add	r8, r2
 800bff6:	4ba1      	ldr	r3, [pc, #644]	; (800c27c <_strtod_l+0x95c>)
 800bff8:	f108 38ff 	add.w	r8, r8, #4294967295
 800bffc:	4598      	cmp	r8, r3
 800bffe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c002:	f280 80c7 	bge.w	800c194 <_strtod_l+0x874>
 800c006:	eba3 0308 	sub.w	r3, r3, r8
 800c00a:	2b1f      	cmp	r3, #31
 800c00c:	eba2 0203 	sub.w	r2, r2, r3
 800c010:	f04f 0101 	mov.w	r1, #1
 800c014:	f300 80b1 	bgt.w	800c17a <_strtod_l+0x85a>
 800c018:	fa01 f303 	lsl.w	r3, r1, r3
 800c01c:	930d      	str	r3, [sp, #52]	; 0x34
 800c01e:	2300      	movs	r3, #0
 800c020:	9308      	str	r3, [sp, #32]
 800c022:	eb09 0802 	add.w	r8, r9, r2
 800c026:	9b04      	ldr	r3, [sp, #16]
 800c028:	45c1      	cmp	r9, r8
 800c02a:	4417      	add	r7, r2
 800c02c:	441f      	add	r7, r3
 800c02e:	464b      	mov	r3, r9
 800c030:	bfa8      	it	ge
 800c032:	4643      	movge	r3, r8
 800c034:	42bb      	cmp	r3, r7
 800c036:	bfa8      	it	ge
 800c038:	463b      	movge	r3, r7
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	bfc2      	ittt	gt
 800c03e:	eba8 0803 	subgt.w	r8, r8, r3
 800c042:	1aff      	subgt	r7, r7, r3
 800c044:	eba9 0903 	subgt.w	r9, r9, r3
 800c048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	dd17      	ble.n	800c07e <_strtod_l+0x75e>
 800c04e:	4631      	mov	r1, r6
 800c050:	461a      	mov	r2, r3
 800c052:	4620      	mov	r0, r4
 800c054:	f002 f808 	bl	800e068 <__pow5mult>
 800c058:	4606      	mov	r6, r0
 800c05a:	2800      	cmp	r0, #0
 800c05c:	f43f aea8 	beq.w	800bdb0 <_strtod_l+0x490>
 800c060:	4601      	mov	r1, r0
 800c062:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c064:	4620      	mov	r0, r4
 800c066:	f001 ff55 	bl	800df14 <__multiply>
 800c06a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c06c:	2800      	cmp	r0, #0
 800c06e:	f43f ae9f 	beq.w	800bdb0 <_strtod_l+0x490>
 800c072:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c074:	4620      	mov	r0, r4
 800c076:	f001 fe35 	bl	800dce4 <_Bfree>
 800c07a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c07c:	9318      	str	r3, [sp, #96]	; 0x60
 800c07e:	f1b8 0f00 	cmp.w	r8, #0
 800c082:	f300 808c 	bgt.w	800c19e <_strtod_l+0x87e>
 800c086:	9b06      	ldr	r3, [sp, #24]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	dd08      	ble.n	800c09e <_strtod_l+0x77e>
 800c08c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c08e:	9905      	ldr	r1, [sp, #20]
 800c090:	4620      	mov	r0, r4
 800c092:	f001 ffe9 	bl	800e068 <__pow5mult>
 800c096:	9005      	str	r0, [sp, #20]
 800c098:	2800      	cmp	r0, #0
 800c09a:	f43f ae89 	beq.w	800bdb0 <_strtod_l+0x490>
 800c09e:	2f00      	cmp	r7, #0
 800c0a0:	dd08      	ble.n	800c0b4 <_strtod_l+0x794>
 800c0a2:	9905      	ldr	r1, [sp, #20]
 800c0a4:	463a      	mov	r2, r7
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	f002 f838 	bl	800e11c <__lshift>
 800c0ac:	9005      	str	r0, [sp, #20]
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	f43f ae7e 	beq.w	800bdb0 <_strtod_l+0x490>
 800c0b4:	f1b9 0f00 	cmp.w	r9, #0
 800c0b8:	dd08      	ble.n	800c0cc <_strtod_l+0x7ac>
 800c0ba:	4631      	mov	r1, r6
 800c0bc:	464a      	mov	r2, r9
 800c0be:	4620      	mov	r0, r4
 800c0c0:	f002 f82c 	bl	800e11c <__lshift>
 800c0c4:	4606      	mov	r6, r0
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	f43f ae72 	beq.w	800bdb0 <_strtod_l+0x490>
 800c0cc:	9a05      	ldr	r2, [sp, #20]
 800c0ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	f002 f8af 	bl	800e234 <__mdiff>
 800c0d6:	4605      	mov	r5, r0
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	f43f ae69 	beq.w	800bdb0 <_strtod_l+0x490>
 800c0de:	68c3      	ldr	r3, [r0, #12]
 800c0e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	60c3      	str	r3, [r0, #12]
 800c0e6:	4631      	mov	r1, r6
 800c0e8:	f002 f888 	bl	800e1fc <__mcmp>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	da60      	bge.n	800c1b2 <_strtod_l+0x892>
 800c0f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0f2:	ea53 030a 	orrs.w	r3, r3, sl
 800c0f6:	f040 8082 	bne.w	800c1fe <_strtod_l+0x8de>
 800c0fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d17d      	bne.n	800c1fe <_strtod_l+0x8de>
 800c102:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c106:	0d1b      	lsrs	r3, r3, #20
 800c108:	051b      	lsls	r3, r3, #20
 800c10a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c10e:	d976      	bls.n	800c1fe <_strtod_l+0x8de>
 800c110:	696b      	ldr	r3, [r5, #20]
 800c112:	b913      	cbnz	r3, 800c11a <_strtod_l+0x7fa>
 800c114:	692b      	ldr	r3, [r5, #16]
 800c116:	2b01      	cmp	r3, #1
 800c118:	dd71      	ble.n	800c1fe <_strtod_l+0x8de>
 800c11a:	4629      	mov	r1, r5
 800c11c:	2201      	movs	r2, #1
 800c11e:	4620      	mov	r0, r4
 800c120:	f001 fffc 	bl	800e11c <__lshift>
 800c124:	4631      	mov	r1, r6
 800c126:	4605      	mov	r5, r0
 800c128:	f002 f868 	bl	800e1fc <__mcmp>
 800c12c:	2800      	cmp	r0, #0
 800c12e:	dd66      	ble.n	800c1fe <_strtod_l+0x8de>
 800c130:	9904      	ldr	r1, [sp, #16]
 800c132:	4a53      	ldr	r2, [pc, #332]	; (800c280 <_strtod_l+0x960>)
 800c134:	465b      	mov	r3, fp
 800c136:	2900      	cmp	r1, #0
 800c138:	f000 8081 	beq.w	800c23e <_strtod_l+0x91e>
 800c13c:	ea02 010b 	and.w	r1, r2, fp
 800c140:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c144:	dc7b      	bgt.n	800c23e <_strtod_l+0x91e>
 800c146:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c14a:	f77f aea9 	ble.w	800bea0 <_strtod_l+0x580>
 800c14e:	4b4d      	ldr	r3, [pc, #308]	; (800c284 <_strtod_l+0x964>)
 800c150:	4650      	mov	r0, sl
 800c152:	4659      	mov	r1, fp
 800c154:	2200      	movs	r2, #0
 800c156:	f7f4 fa5f 	bl	8000618 <__aeabi_dmul>
 800c15a:	460b      	mov	r3, r1
 800c15c:	4303      	orrs	r3, r0
 800c15e:	bf08      	it	eq
 800c160:	2322      	moveq	r3, #34	; 0x22
 800c162:	4682      	mov	sl, r0
 800c164:	468b      	mov	fp, r1
 800c166:	bf08      	it	eq
 800c168:	6023      	streq	r3, [r4, #0]
 800c16a:	e62b      	b.n	800bdc4 <_strtod_l+0x4a4>
 800c16c:	f04f 32ff 	mov.w	r2, #4294967295
 800c170:	fa02 f303 	lsl.w	r3, r2, r3
 800c174:	ea03 0a0a 	and.w	sl, r3, sl
 800c178:	e6e3      	b.n	800bf42 <_strtod_l+0x622>
 800c17a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c17e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c182:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c186:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c18a:	fa01 f308 	lsl.w	r3, r1, r8
 800c18e:	9308      	str	r3, [sp, #32]
 800c190:	910d      	str	r1, [sp, #52]	; 0x34
 800c192:	e746      	b.n	800c022 <_strtod_l+0x702>
 800c194:	2300      	movs	r3, #0
 800c196:	9308      	str	r3, [sp, #32]
 800c198:	2301      	movs	r3, #1
 800c19a:	930d      	str	r3, [sp, #52]	; 0x34
 800c19c:	e741      	b.n	800c022 <_strtod_l+0x702>
 800c19e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c1a0:	4642      	mov	r2, r8
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f001 ffba 	bl	800e11c <__lshift>
 800c1a8:	9018      	str	r0, [sp, #96]	; 0x60
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	f47f af6b 	bne.w	800c086 <_strtod_l+0x766>
 800c1b0:	e5fe      	b.n	800bdb0 <_strtod_l+0x490>
 800c1b2:	465f      	mov	r7, fp
 800c1b4:	d16e      	bne.n	800c294 <_strtod_l+0x974>
 800c1b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c1b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1bc:	b342      	cbz	r2, 800c210 <_strtod_l+0x8f0>
 800c1be:	4a32      	ldr	r2, [pc, #200]	; (800c288 <_strtod_l+0x968>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d128      	bne.n	800c216 <_strtod_l+0x8f6>
 800c1c4:	9b04      	ldr	r3, [sp, #16]
 800c1c6:	4651      	mov	r1, sl
 800c1c8:	b1eb      	cbz	r3, 800c206 <_strtod_l+0x8e6>
 800c1ca:	4b2d      	ldr	r3, [pc, #180]	; (800c280 <_strtod_l+0x960>)
 800c1cc:	403b      	ands	r3, r7
 800c1ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c1d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c1d6:	d819      	bhi.n	800c20c <_strtod_l+0x8ec>
 800c1d8:	0d1b      	lsrs	r3, r3, #20
 800c1da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c1de:	fa02 f303 	lsl.w	r3, r2, r3
 800c1e2:	4299      	cmp	r1, r3
 800c1e4:	d117      	bne.n	800c216 <_strtod_l+0x8f6>
 800c1e6:	4b29      	ldr	r3, [pc, #164]	; (800c28c <_strtod_l+0x96c>)
 800c1e8:	429f      	cmp	r7, r3
 800c1ea:	d102      	bne.n	800c1f2 <_strtod_l+0x8d2>
 800c1ec:	3101      	adds	r1, #1
 800c1ee:	f43f addf 	beq.w	800bdb0 <_strtod_l+0x490>
 800c1f2:	4b23      	ldr	r3, [pc, #140]	; (800c280 <_strtod_l+0x960>)
 800c1f4:	403b      	ands	r3, r7
 800c1f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c1fa:	f04f 0a00 	mov.w	sl, #0
 800c1fe:	9b04      	ldr	r3, [sp, #16]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1a4      	bne.n	800c14e <_strtod_l+0x82e>
 800c204:	e5de      	b.n	800bdc4 <_strtod_l+0x4a4>
 800c206:	f04f 33ff 	mov.w	r3, #4294967295
 800c20a:	e7ea      	b.n	800c1e2 <_strtod_l+0x8c2>
 800c20c:	4613      	mov	r3, r2
 800c20e:	e7e8      	b.n	800c1e2 <_strtod_l+0x8c2>
 800c210:	ea53 030a 	orrs.w	r3, r3, sl
 800c214:	d08c      	beq.n	800c130 <_strtod_l+0x810>
 800c216:	9b08      	ldr	r3, [sp, #32]
 800c218:	b1db      	cbz	r3, 800c252 <_strtod_l+0x932>
 800c21a:	423b      	tst	r3, r7
 800c21c:	d0ef      	beq.n	800c1fe <_strtod_l+0x8de>
 800c21e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c220:	9a04      	ldr	r2, [sp, #16]
 800c222:	4650      	mov	r0, sl
 800c224:	4659      	mov	r1, fp
 800c226:	b1c3      	cbz	r3, 800c25a <_strtod_l+0x93a>
 800c228:	f7ff fb5e 	bl	800b8e8 <sulp>
 800c22c:	4602      	mov	r2, r0
 800c22e:	460b      	mov	r3, r1
 800c230:	ec51 0b18 	vmov	r0, r1, d8
 800c234:	f7f4 f83a 	bl	80002ac <__adddf3>
 800c238:	4682      	mov	sl, r0
 800c23a:	468b      	mov	fp, r1
 800c23c:	e7df      	b.n	800c1fe <_strtod_l+0x8de>
 800c23e:	4013      	ands	r3, r2
 800c240:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c244:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c248:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c24c:	f04f 3aff 	mov.w	sl, #4294967295
 800c250:	e7d5      	b.n	800c1fe <_strtod_l+0x8de>
 800c252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c254:	ea13 0f0a 	tst.w	r3, sl
 800c258:	e7e0      	b.n	800c21c <_strtod_l+0x8fc>
 800c25a:	f7ff fb45 	bl	800b8e8 <sulp>
 800c25e:	4602      	mov	r2, r0
 800c260:	460b      	mov	r3, r1
 800c262:	ec51 0b18 	vmov	r0, r1, d8
 800c266:	f7f4 f81f 	bl	80002a8 <__aeabi_dsub>
 800c26a:	2200      	movs	r2, #0
 800c26c:	2300      	movs	r3, #0
 800c26e:	4682      	mov	sl, r0
 800c270:	468b      	mov	fp, r1
 800c272:	f7f4 fc39 	bl	8000ae8 <__aeabi_dcmpeq>
 800c276:	2800      	cmp	r0, #0
 800c278:	d0c1      	beq.n	800c1fe <_strtod_l+0x8de>
 800c27a:	e611      	b.n	800bea0 <_strtod_l+0x580>
 800c27c:	fffffc02 	.word	0xfffffc02
 800c280:	7ff00000 	.word	0x7ff00000
 800c284:	39500000 	.word	0x39500000
 800c288:	000fffff 	.word	0x000fffff
 800c28c:	7fefffff 	.word	0x7fefffff
 800c290:	0800fce0 	.word	0x0800fce0
 800c294:	4631      	mov	r1, r6
 800c296:	4628      	mov	r0, r5
 800c298:	f002 f92e 	bl	800e4f8 <__ratio>
 800c29c:	ec59 8b10 	vmov	r8, r9, d0
 800c2a0:	ee10 0a10 	vmov	r0, s0
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c2aa:	4649      	mov	r1, r9
 800c2ac:	f7f4 fc30 	bl	8000b10 <__aeabi_dcmple>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	d07a      	beq.n	800c3aa <_strtod_l+0xa8a>
 800c2b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d04a      	beq.n	800c350 <_strtod_l+0xa30>
 800c2ba:	4b95      	ldr	r3, [pc, #596]	; (800c510 <_strtod_l+0xbf0>)
 800c2bc:	2200      	movs	r2, #0
 800c2be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c2c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c510 <_strtod_l+0xbf0>
 800c2c6:	f04f 0800 	mov.w	r8, #0
 800c2ca:	4b92      	ldr	r3, [pc, #584]	; (800c514 <_strtod_l+0xbf4>)
 800c2cc:	403b      	ands	r3, r7
 800c2ce:	930d      	str	r3, [sp, #52]	; 0x34
 800c2d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c2d2:	4b91      	ldr	r3, [pc, #580]	; (800c518 <_strtod_l+0xbf8>)
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	f040 80b0 	bne.w	800c43a <_strtod_l+0xb1a>
 800c2da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c2de:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c2e2:	ec4b ab10 	vmov	d0, sl, fp
 800c2e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c2ea:	f002 f82d 	bl	800e348 <__ulp>
 800c2ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c2f2:	ec53 2b10 	vmov	r2, r3, d0
 800c2f6:	f7f4 f98f 	bl	8000618 <__aeabi_dmul>
 800c2fa:	4652      	mov	r2, sl
 800c2fc:	465b      	mov	r3, fp
 800c2fe:	f7f3 ffd5 	bl	80002ac <__adddf3>
 800c302:	460b      	mov	r3, r1
 800c304:	4983      	ldr	r1, [pc, #524]	; (800c514 <_strtod_l+0xbf4>)
 800c306:	4a85      	ldr	r2, [pc, #532]	; (800c51c <_strtod_l+0xbfc>)
 800c308:	4019      	ands	r1, r3
 800c30a:	4291      	cmp	r1, r2
 800c30c:	4682      	mov	sl, r0
 800c30e:	d960      	bls.n	800c3d2 <_strtod_l+0xab2>
 800c310:	ee18 3a90 	vmov	r3, s17
 800c314:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c318:	4293      	cmp	r3, r2
 800c31a:	d104      	bne.n	800c326 <_strtod_l+0xa06>
 800c31c:	ee18 3a10 	vmov	r3, s16
 800c320:	3301      	adds	r3, #1
 800c322:	f43f ad45 	beq.w	800bdb0 <_strtod_l+0x490>
 800c326:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c528 <_strtod_l+0xc08>
 800c32a:	f04f 3aff 	mov.w	sl, #4294967295
 800c32e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c330:	4620      	mov	r0, r4
 800c332:	f001 fcd7 	bl	800dce4 <_Bfree>
 800c336:	9905      	ldr	r1, [sp, #20]
 800c338:	4620      	mov	r0, r4
 800c33a:	f001 fcd3 	bl	800dce4 <_Bfree>
 800c33e:	4631      	mov	r1, r6
 800c340:	4620      	mov	r0, r4
 800c342:	f001 fccf 	bl	800dce4 <_Bfree>
 800c346:	4629      	mov	r1, r5
 800c348:	4620      	mov	r0, r4
 800c34a:	f001 fccb 	bl	800dce4 <_Bfree>
 800c34e:	e61a      	b.n	800bf86 <_strtod_l+0x666>
 800c350:	f1ba 0f00 	cmp.w	sl, #0
 800c354:	d11b      	bne.n	800c38e <_strtod_l+0xa6e>
 800c356:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c35a:	b9f3      	cbnz	r3, 800c39a <_strtod_l+0xa7a>
 800c35c:	4b6c      	ldr	r3, [pc, #432]	; (800c510 <_strtod_l+0xbf0>)
 800c35e:	2200      	movs	r2, #0
 800c360:	4640      	mov	r0, r8
 800c362:	4649      	mov	r1, r9
 800c364:	f7f4 fbca 	bl	8000afc <__aeabi_dcmplt>
 800c368:	b9d0      	cbnz	r0, 800c3a0 <_strtod_l+0xa80>
 800c36a:	4640      	mov	r0, r8
 800c36c:	4649      	mov	r1, r9
 800c36e:	4b6c      	ldr	r3, [pc, #432]	; (800c520 <_strtod_l+0xc00>)
 800c370:	2200      	movs	r2, #0
 800c372:	f7f4 f951 	bl	8000618 <__aeabi_dmul>
 800c376:	4680      	mov	r8, r0
 800c378:	4689      	mov	r9, r1
 800c37a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c37e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c382:	9315      	str	r3, [sp, #84]	; 0x54
 800c384:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c388:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c38c:	e79d      	b.n	800c2ca <_strtod_l+0x9aa>
 800c38e:	f1ba 0f01 	cmp.w	sl, #1
 800c392:	d102      	bne.n	800c39a <_strtod_l+0xa7a>
 800c394:	2f00      	cmp	r7, #0
 800c396:	f43f ad83 	beq.w	800bea0 <_strtod_l+0x580>
 800c39a:	4b62      	ldr	r3, [pc, #392]	; (800c524 <_strtod_l+0xc04>)
 800c39c:	2200      	movs	r2, #0
 800c39e:	e78e      	b.n	800c2be <_strtod_l+0x99e>
 800c3a0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c520 <_strtod_l+0xc00>
 800c3a4:	f04f 0800 	mov.w	r8, #0
 800c3a8:	e7e7      	b.n	800c37a <_strtod_l+0xa5a>
 800c3aa:	4b5d      	ldr	r3, [pc, #372]	; (800c520 <_strtod_l+0xc00>)
 800c3ac:	4640      	mov	r0, r8
 800c3ae:	4649      	mov	r1, r9
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f7f4 f931 	bl	8000618 <__aeabi_dmul>
 800c3b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3b8:	4680      	mov	r8, r0
 800c3ba:	4689      	mov	r9, r1
 800c3bc:	b933      	cbnz	r3, 800c3cc <_strtod_l+0xaac>
 800c3be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3c2:	900e      	str	r0, [sp, #56]	; 0x38
 800c3c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c3ca:	e7dd      	b.n	800c388 <_strtod_l+0xa68>
 800c3cc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c3d0:	e7f9      	b.n	800c3c6 <_strtod_l+0xaa6>
 800c3d2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c3d6:	9b04      	ldr	r3, [sp, #16]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d1a8      	bne.n	800c32e <_strtod_l+0xa0e>
 800c3dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c3e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3e2:	0d1b      	lsrs	r3, r3, #20
 800c3e4:	051b      	lsls	r3, r3, #20
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d1a1      	bne.n	800c32e <_strtod_l+0xa0e>
 800c3ea:	4640      	mov	r0, r8
 800c3ec:	4649      	mov	r1, r9
 800c3ee:	f7f4 fc73 	bl	8000cd8 <__aeabi_d2lz>
 800c3f2:	f7f4 f8e3 	bl	80005bc <__aeabi_l2d>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	4640      	mov	r0, r8
 800c3fc:	4649      	mov	r1, r9
 800c3fe:	f7f3 ff53 	bl	80002a8 <__aeabi_dsub>
 800c402:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c404:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c408:	ea43 030a 	orr.w	r3, r3, sl
 800c40c:	4313      	orrs	r3, r2
 800c40e:	4680      	mov	r8, r0
 800c410:	4689      	mov	r9, r1
 800c412:	d055      	beq.n	800c4c0 <_strtod_l+0xba0>
 800c414:	a336      	add	r3, pc, #216	; (adr r3, 800c4f0 <_strtod_l+0xbd0>)
 800c416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41a:	f7f4 fb6f 	bl	8000afc <__aeabi_dcmplt>
 800c41e:	2800      	cmp	r0, #0
 800c420:	f47f acd0 	bne.w	800bdc4 <_strtod_l+0x4a4>
 800c424:	a334      	add	r3, pc, #208	; (adr r3, 800c4f8 <_strtod_l+0xbd8>)
 800c426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42a:	4640      	mov	r0, r8
 800c42c:	4649      	mov	r1, r9
 800c42e:	f7f4 fb83 	bl	8000b38 <__aeabi_dcmpgt>
 800c432:	2800      	cmp	r0, #0
 800c434:	f43f af7b 	beq.w	800c32e <_strtod_l+0xa0e>
 800c438:	e4c4      	b.n	800bdc4 <_strtod_l+0x4a4>
 800c43a:	9b04      	ldr	r3, [sp, #16]
 800c43c:	b333      	cbz	r3, 800c48c <_strtod_l+0xb6c>
 800c43e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c440:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c444:	d822      	bhi.n	800c48c <_strtod_l+0xb6c>
 800c446:	a32e      	add	r3, pc, #184	; (adr r3, 800c500 <_strtod_l+0xbe0>)
 800c448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44c:	4640      	mov	r0, r8
 800c44e:	4649      	mov	r1, r9
 800c450:	f7f4 fb5e 	bl	8000b10 <__aeabi_dcmple>
 800c454:	b1a0      	cbz	r0, 800c480 <_strtod_l+0xb60>
 800c456:	4649      	mov	r1, r9
 800c458:	4640      	mov	r0, r8
 800c45a:	f7f4 fbb5 	bl	8000bc8 <__aeabi_d2uiz>
 800c45e:	2801      	cmp	r0, #1
 800c460:	bf38      	it	cc
 800c462:	2001      	movcc	r0, #1
 800c464:	f7f4 f85e 	bl	8000524 <__aeabi_ui2d>
 800c468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c46a:	4680      	mov	r8, r0
 800c46c:	4689      	mov	r9, r1
 800c46e:	bb23      	cbnz	r3, 800c4ba <_strtod_l+0xb9a>
 800c470:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c474:	9010      	str	r0, [sp, #64]	; 0x40
 800c476:	9311      	str	r3, [sp, #68]	; 0x44
 800c478:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c47c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c482:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c484:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c488:	1a9b      	subs	r3, r3, r2
 800c48a:	9309      	str	r3, [sp, #36]	; 0x24
 800c48c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c490:	eeb0 0a48 	vmov.f32	s0, s16
 800c494:	eef0 0a68 	vmov.f32	s1, s17
 800c498:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c49c:	f001 ff54 	bl	800e348 <__ulp>
 800c4a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c4a4:	ec53 2b10 	vmov	r2, r3, d0
 800c4a8:	f7f4 f8b6 	bl	8000618 <__aeabi_dmul>
 800c4ac:	ec53 2b18 	vmov	r2, r3, d8
 800c4b0:	f7f3 fefc 	bl	80002ac <__adddf3>
 800c4b4:	4682      	mov	sl, r0
 800c4b6:	468b      	mov	fp, r1
 800c4b8:	e78d      	b.n	800c3d6 <_strtod_l+0xab6>
 800c4ba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c4be:	e7db      	b.n	800c478 <_strtod_l+0xb58>
 800c4c0:	a311      	add	r3, pc, #68	; (adr r3, 800c508 <_strtod_l+0xbe8>)
 800c4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c6:	f7f4 fb19 	bl	8000afc <__aeabi_dcmplt>
 800c4ca:	e7b2      	b.n	800c432 <_strtod_l+0xb12>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	930a      	str	r3, [sp, #40]	; 0x28
 800c4d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c4d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c4d4:	6013      	str	r3, [r2, #0]
 800c4d6:	f7ff ba6b 	b.w	800b9b0 <_strtod_l+0x90>
 800c4da:	2a65      	cmp	r2, #101	; 0x65
 800c4dc:	f43f ab5f 	beq.w	800bb9e <_strtod_l+0x27e>
 800c4e0:	2a45      	cmp	r2, #69	; 0x45
 800c4e2:	f43f ab5c 	beq.w	800bb9e <_strtod_l+0x27e>
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	f7ff bb94 	b.w	800bc14 <_strtod_l+0x2f4>
 800c4ec:	f3af 8000 	nop.w
 800c4f0:	94a03595 	.word	0x94a03595
 800c4f4:	3fdfffff 	.word	0x3fdfffff
 800c4f8:	35afe535 	.word	0x35afe535
 800c4fc:	3fe00000 	.word	0x3fe00000
 800c500:	ffc00000 	.word	0xffc00000
 800c504:	41dfffff 	.word	0x41dfffff
 800c508:	94a03595 	.word	0x94a03595
 800c50c:	3fcfffff 	.word	0x3fcfffff
 800c510:	3ff00000 	.word	0x3ff00000
 800c514:	7ff00000 	.word	0x7ff00000
 800c518:	7fe00000 	.word	0x7fe00000
 800c51c:	7c9fffff 	.word	0x7c9fffff
 800c520:	3fe00000 	.word	0x3fe00000
 800c524:	bff00000 	.word	0xbff00000
 800c528:	7fefffff 	.word	0x7fefffff

0800c52c <_strtod_r>:
 800c52c:	4b01      	ldr	r3, [pc, #4]	; (800c534 <_strtod_r+0x8>)
 800c52e:	f7ff b9f7 	b.w	800b920 <_strtod_l>
 800c532:	bf00      	nop
 800c534:	20000594 	.word	0x20000594

0800c538 <_strtol_l.constprop.0>:
 800c538:	2b01      	cmp	r3, #1
 800c53a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c53e:	d001      	beq.n	800c544 <_strtol_l.constprop.0+0xc>
 800c540:	2b24      	cmp	r3, #36	; 0x24
 800c542:	d906      	bls.n	800c552 <_strtol_l.constprop.0+0x1a>
 800c544:	f7fe f9e6 	bl	800a914 <__errno>
 800c548:	2316      	movs	r3, #22
 800c54a:	6003      	str	r3, [r0, #0]
 800c54c:	2000      	movs	r0, #0
 800c54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c552:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c638 <_strtol_l.constprop.0+0x100>
 800c556:	460d      	mov	r5, r1
 800c558:	462e      	mov	r6, r5
 800c55a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c55e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c562:	f017 0708 	ands.w	r7, r7, #8
 800c566:	d1f7      	bne.n	800c558 <_strtol_l.constprop.0+0x20>
 800c568:	2c2d      	cmp	r4, #45	; 0x2d
 800c56a:	d132      	bne.n	800c5d2 <_strtol_l.constprop.0+0x9a>
 800c56c:	782c      	ldrb	r4, [r5, #0]
 800c56e:	2701      	movs	r7, #1
 800c570:	1cb5      	adds	r5, r6, #2
 800c572:	2b00      	cmp	r3, #0
 800c574:	d05b      	beq.n	800c62e <_strtol_l.constprop.0+0xf6>
 800c576:	2b10      	cmp	r3, #16
 800c578:	d109      	bne.n	800c58e <_strtol_l.constprop.0+0x56>
 800c57a:	2c30      	cmp	r4, #48	; 0x30
 800c57c:	d107      	bne.n	800c58e <_strtol_l.constprop.0+0x56>
 800c57e:	782c      	ldrb	r4, [r5, #0]
 800c580:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c584:	2c58      	cmp	r4, #88	; 0x58
 800c586:	d14d      	bne.n	800c624 <_strtol_l.constprop.0+0xec>
 800c588:	786c      	ldrb	r4, [r5, #1]
 800c58a:	2310      	movs	r3, #16
 800c58c:	3502      	adds	r5, #2
 800c58e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c592:	f108 38ff 	add.w	r8, r8, #4294967295
 800c596:	f04f 0c00 	mov.w	ip, #0
 800c59a:	fbb8 f9f3 	udiv	r9, r8, r3
 800c59e:	4666      	mov	r6, ip
 800c5a0:	fb03 8a19 	mls	sl, r3, r9, r8
 800c5a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c5a8:	f1be 0f09 	cmp.w	lr, #9
 800c5ac:	d816      	bhi.n	800c5dc <_strtol_l.constprop.0+0xa4>
 800c5ae:	4674      	mov	r4, lr
 800c5b0:	42a3      	cmp	r3, r4
 800c5b2:	dd24      	ble.n	800c5fe <_strtol_l.constprop.0+0xc6>
 800c5b4:	f1bc 0f00 	cmp.w	ip, #0
 800c5b8:	db1e      	blt.n	800c5f8 <_strtol_l.constprop.0+0xc0>
 800c5ba:	45b1      	cmp	r9, r6
 800c5bc:	d31c      	bcc.n	800c5f8 <_strtol_l.constprop.0+0xc0>
 800c5be:	d101      	bne.n	800c5c4 <_strtol_l.constprop.0+0x8c>
 800c5c0:	45a2      	cmp	sl, r4
 800c5c2:	db19      	blt.n	800c5f8 <_strtol_l.constprop.0+0xc0>
 800c5c4:	fb06 4603 	mla	r6, r6, r3, r4
 800c5c8:	f04f 0c01 	mov.w	ip, #1
 800c5cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c5d0:	e7e8      	b.n	800c5a4 <_strtol_l.constprop.0+0x6c>
 800c5d2:	2c2b      	cmp	r4, #43	; 0x2b
 800c5d4:	bf04      	itt	eq
 800c5d6:	782c      	ldrbeq	r4, [r5, #0]
 800c5d8:	1cb5      	addeq	r5, r6, #2
 800c5da:	e7ca      	b.n	800c572 <_strtol_l.constprop.0+0x3a>
 800c5dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c5e0:	f1be 0f19 	cmp.w	lr, #25
 800c5e4:	d801      	bhi.n	800c5ea <_strtol_l.constprop.0+0xb2>
 800c5e6:	3c37      	subs	r4, #55	; 0x37
 800c5e8:	e7e2      	b.n	800c5b0 <_strtol_l.constprop.0+0x78>
 800c5ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c5ee:	f1be 0f19 	cmp.w	lr, #25
 800c5f2:	d804      	bhi.n	800c5fe <_strtol_l.constprop.0+0xc6>
 800c5f4:	3c57      	subs	r4, #87	; 0x57
 800c5f6:	e7db      	b.n	800c5b0 <_strtol_l.constprop.0+0x78>
 800c5f8:	f04f 3cff 	mov.w	ip, #4294967295
 800c5fc:	e7e6      	b.n	800c5cc <_strtol_l.constprop.0+0x94>
 800c5fe:	f1bc 0f00 	cmp.w	ip, #0
 800c602:	da05      	bge.n	800c610 <_strtol_l.constprop.0+0xd8>
 800c604:	2322      	movs	r3, #34	; 0x22
 800c606:	6003      	str	r3, [r0, #0]
 800c608:	4646      	mov	r6, r8
 800c60a:	b942      	cbnz	r2, 800c61e <_strtol_l.constprop.0+0xe6>
 800c60c:	4630      	mov	r0, r6
 800c60e:	e79e      	b.n	800c54e <_strtol_l.constprop.0+0x16>
 800c610:	b107      	cbz	r7, 800c614 <_strtol_l.constprop.0+0xdc>
 800c612:	4276      	negs	r6, r6
 800c614:	2a00      	cmp	r2, #0
 800c616:	d0f9      	beq.n	800c60c <_strtol_l.constprop.0+0xd4>
 800c618:	f1bc 0f00 	cmp.w	ip, #0
 800c61c:	d000      	beq.n	800c620 <_strtol_l.constprop.0+0xe8>
 800c61e:	1e69      	subs	r1, r5, #1
 800c620:	6011      	str	r1, [r2, #0]
 800c622:	e7f3      	b.n	800c60c <_strtol_l.constprop.0+0xd4>
 800c624:	2430      	movs	r4, #48	; 0x30
 800c626:	2b00      	cmp	r3, #0
 800c628:	d1b1      	bne.n	800c58e <_strtol_l.constprop.0+0x56>
 800c62a:	2308      	movs	r3, #8
 800c62c:	e7af      	b.n	800c58e <_strtol_l.constprop.0+0x56>
 800c62e:	2c30      	cmp	r4, #48	; 0x30
 800c630:	d0a5      	beq.n	800c57e <_strtol_l.constprop.0+0x46>
 800c632:	230a      	movs	r3, #10
 800c634:	e7ab      	b.n	800c58e <_strtol_l.constprop.0+0x56>
 800c636:	bf00      	nop
 800c638:	0800fd09 	.word	0x0800fd09

0800c63c <_strtol_r>:
 800c63c:	f7ff bf7c 	b.w	800c538 <_strtol_l.constprop.0>

0800c640 <quorem>:
 800c640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c644:	6903      	ldr	r3, [r0, #16]
 800c646:	690c      	ldr	r4, [r1, #16]
 800c648:	42a3      	cmp	r3, r4
 800c64a:	4607      	mov	r7, r0
 800c64c:	f2c0 8081 	blt.w	800c752 <quorem+0x112>
 800c650:	3c01      	subs	r4, #1
 800c652:	f101 0814 	add.w	r8, r1, #20
 800c656:	f100 0514 	add.w	r5, r0, #20
 800c65a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c65e:	9301      	str	r3, [sp, #4]
 800c660:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c664:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c668:	3301      	adds	r3, #1
 800c66a:	429a      	cmp	r2, r3
 800c66c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c670:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c674:	fbb2 f6f3 	udiv	r6, r2, r3
 800c678:	d331      	bcc.n	800c6de <quorem+0x9e>
 800c67a:	f04f 0e00 	mov.w	lr, #0
 800c67e:	4640      	mov	r0, r8
 800c680:	46ac      	mov	ip, r5
 800c682:	46f2      	mov	sl, lr
 800c684:	f850 2b04 	ldr.w	r2, [r0], #4
 800c688:	b293      	uxth	r3, r2
 800c68a:	fb06 e303 	mla	r3, r6, r3, lr
 800c68e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c692:	b29b      	uxth	r3, r3
 800c694:	ebaa 0303 	sub.w	r3, sl, r3
 800c698:	f8dc a000 	ldr.w	sl, [ip]
 800c69c:	0c12      	lsrs	r2, r2, #16
 800c69e:	fa13 f38a 	uxtah	r3, r3, sl
 800c6a2:	fb06 e202 	mla	r2, r6, r2, lr
 800c6a6:	9300      	str	r3, [sp, #0]
 800c6a8:	9b00      	ldr	r3, [sp, #0]
 800c6aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c6ae:	b292      	uxth	r2, r2
 800c6b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c6b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6b8:	f8bd 3000 	ldrh.w	r3, [sp]
 800c6bc:	4581      	cmp	r9, r0
 800c6be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6c2:	f84c 3b04 	str.w	r3, [ip], #4
 800c6c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c6ca:	d2db      	bcs.n	800c684 <quorem+0x44>
 800c6cc:	f855 300b 	ldr.w	r3, [r5, fp]
 800c6d0:	b92b      	cbnz	r3, 800c6de <quorem+0x9e>
 800c6d2:	9b01      	ldr	r3, [sp, #4]
 800c6d4:	3b04      	subs	r3, #4
 800c6d6:	429d      	cmp	r5, r3
 800c6d8:	461a      	mov	r2, r3
 800c6da:	d32e      	bcc.n	800c73a <quorem+0xfa>
 800c6dc:	613c      	str	r4, [r7, #16]
 800c6de:	4638      	mov	r0, r7
 800c6e0:	f001 fd8c 	bl	800e1fc <__mcmp>
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	db24      	blt.n	800c732 <quorem+0xf2>
 800c6e8:	3601      	adds	r6, #1
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	f04f 0c00 	mov.w	ip, #0
 800c6f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800c6f4:	f8d0 e000 	ldr.w	lr, [r0]
 800c6f8:	b293      	uxth	r3, r2
 800c6fa:	ebac 0303 	sub.w	r3, ip, r3
 800c6fe:	0c12      	lsrs	r2, r2, #16
 800c700:	fa13 f38e 	uxtah	r3, r3, lr
 800c704:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c708:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c712:	45c1      	cmp	r9, r8
 800c714:	f840 3b04 	str.w	r3, [r0], #4
 800c718:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c71c:	d2e8      	bcs.n	800c6f0 <quorem+0xb0>
 800c71e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c722:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c726:	b922      	cbnz	r2, 800c732 <quorem+0xf2>
 800c728:	3b04      	subs	r3, #4
 800c72a:	429d      	cmp	r5, r3
 800c72c:	461a      	mov	r2, r3
 800c72e:	d30a      	bcc.n	800c746 <quorem+0x106>
 800c730:	613c      	str	r4, [r7, #16]
 800c732:	4630      	mov	r0, r6
 800c734:	b003      	add	sp, #12
 800c736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c73a:	6812      	ldr	r2, [r2, #0]
 800c73c:	3b04      	subs	r3, #4
 800c73e:	2a00      	cmp	r2, #0
 800c740:	d1cc      	bne.n	800c6dc <quorem+0x9c>
 800c742:	3c01      	subs	r4, #1
 800c744:	e7c7      	b.n	800c6d6 <quorem+0x96>
 800c746:	6812      	ldr	r2, [r2, #0]
 800c748:	3b04      	subs	r3, #4
 800c74a:	2a00      	cmp	r2, #0
 800c74c:	d1f0      	bne.n	800c730 <quorem+0xf0>
 800c74e:	3c01      	subs	r4, #1
 800c750:	e7eb      	b.n	800c72a <quorem+0xea>
 800c752:	2000      	movs	r0, #0
 800c754:	e7ee      	b.n	800c734 <quorem+0xf4>
	...

0800c758 <_dtoa_r>:
 800c758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c75c:	ed2d 8b04 	vpush	{d8-d9}
 800c760:	ec57 6b10 	vmov	r6, r7, d0
 800c764:	b093      	sub	sp, #76	; 0x4c
 800c766:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c768:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c76c:	9106      	str	r1, [sp, #24]
 800c76e:	ee10 aa10 	vmov	sl, s0
 800c772:	4604      	mov	r4, r0
 800c774:	9209      	str	r2, [sp, #36]	; 0x24
 800c776:	930c      	str	r3, [sp, #48]	; 0x30
 800c778:	46bb      	mov	fp, r7
 800c77a:	b975      	cbnz	r5, 800c79a <_dtoa_r+0x42>
 800c77c:	2010      	movs	r0, #16
 800c77e:	f7fe f8f3 	bl	800a968 <malloc>
 800c782:	4602      	mov	r2, r0
 800c784:	6260      	str	r0, [r4, #36]	; 0x24
 800c786:	b920      	cbnz	r0, 800c792 <_dtoa_r+0x3a>
 800c788:	4ba7      	ldr	r3, [pc, #668]	; (800ca28 <_dtoa_r+0x2d0>)
 800c78a:	21ea      	movs	r1, #234	; 0xea
 800c78c:	48a7      	ldr	r0, [pc, #668]	; (800ca2c <_dtoa_r+0x2d4>)
 800c78e:	f002 fb37 	bl	800ee00 <__assert_func>
 800c792:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c796:	6005      	str	r5, [r0, #0]
 800c798:	60c5      	str	r5, [r0, #12]
 800c79a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c79c:	6819      	ldr	r1, [r3, #0]
 800c79e:	b151      	cbz	r1, 800c7b6 <_dtoa_r+0x5e>
 800c7a0:	685a      	ldr	r2, [r3, #4]
 800c7a2:	604a      	str	r2, [r1, #4]
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	4093      	lsls	r3, r2
 800c7a8:	608b      	str	r3, [r1, #8]
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	f001 fa9a 	bl	800dce4 <_Bfree>
 800c7b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	601a      	str	r2, [r3, #0]
 800c7b6:	1e3b      	subs	r3, r7, #0
 800c7b8:	bfaa      	itet	ge
 800c7ba:	2300      	movge	r3, #0
 800c7bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c7c0:	f8c8 3000 	strge.w	r3, [r8]
 800c7c4:	4b9a      	ldr	r3, [pc, #616]	; (800ca30 <_dtoa_r+0x2d8>)
 800c7c6:	bfbc      	itt	lt
 800c7c8:	2201      	movlt	r2, #1
 800c7ca:	f8c8 2000 	strlt.w	r2, [r8]
 800c7ce:	ea33 030b 	bics.w	r3, r3, fp
 800c7d2:	d11b      	bne.n	800c80c <_dtoa_r+0xb4>
 800c7d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7d6:	f242 730f 	movw	r3, #9999	; 0x270f
 800c7da:	6013      	str	r3, [r2, #0]
 800c7dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c7e0:	4333      	orrs	r3, r6
 800c7e2:	f000 8592 	beq.w	800d30a <_dtoa_r+0xbb2>
 800c7e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7e8:	b963      	cbnz	r3, 800c804 <_dtoa_r+0xac>
 800c7ea:	4b92      	ldr	r3, [pc, #584]	; (800ca34 <_dtoa_r+0x2dc>)
 800c7ec:	e022      	b.n	800c834 <_dtoa_r+0xdc>
 800c7ee:	4b92      	ldr	r3, [pc, #584]	; (800ca38 <_dtoa_r+0x2e0>)
 800c7f0:	9301      	str	r3, [sp, #4]
 800c7f2:	3308      	adds	r3, #8
 800c7f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c7f6:	6013      	str	r3, [r2, #0]
 800c7f8:	9801      	ldr	r0, [sp, #4]
 800c7fa:	b013      	add	sp, #76	; 0x4c
 800c7fc:	ecbd 8b04 	vpop	{d8-d9}
 800c800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c804:	4b8b      	ldr	r3, [pc, #556]	; (800ca34 <_dtoa_r+0x2dc>)
 800c806:	9301      	str	r3, [sp, #4]
 800c808:	3303      	adds	r3, #3
 800c80a:	e7f3      	b.n	800c7f4 <_dtoa_r+0x9c>
 800c80c:	2200      	movs	r2, #0
 800c80e:	2300      	movs	r3, #0
 800c810:	4650      	mov	r0, sl
 800c812:	4659      	mov	r1, fp
 800c814:	f7f4 f968 	bl	8000ae8 <__aeabi_dcmpeq>
 800c818:	ec4b ab19 	vmov	d9, sl, fp
 800c81c:	4680      	mov	r8, r0
 800c81e:	b158      	cbz	r0, 800c838 <_dtoa_r+0xe0>
 800c820:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c822:	2301      	movs	r3, #1
 800c824:	6013      	str	r3, [r2, #0]
 800c826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c828:	2b00      	cmp	r3, #0
 800c82a:	f000 856b 	beq.w	800d304 <_dtoa_r+0xbac>
 800c82e:	4883      	ldr	r0, [pc, #524]	; (800ca3c <_dtoa_r+0x2e4>)
 800c830:	6018      	str	r0, [r3, #0]
 800c832:	1e43      	subs	r3, r0, #1
 800c834:	9301      	str	r3, [sp, #4]
 800c836:	e7df      	b.n	800c7f8 <_dtoa_r+0xa0>
 800c838:	ec4b ab10 	vmov	d0, sl, fp
 800c83c:	aa10      	add	r2, sp, #64	; 0x40
 800c83e:	a911      	add	r1, sp, #68	; 0x44
 800c840:	4620      	mov	r0, r4
 800c842:	f001 fdfd 	bl	800e440 <__d2b>
 800c846:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c84a:	ee08 0a10 	vmov	s16, r0
 800c84e:	2d00      	cmp	r5, #0
 800c850:	f000 8084 	beq.w	800c95c <_dtoa_r+0x204>
 800c854:	ee19 3a90 	vmov	r3, s19
 800c858:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c85c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c860:	4656      	mov	r6, sl
 800c862:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c866:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c86a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c86e:	4b74      	ldr	r3, [pc, #464]	; (800ca40 <_dtoa_r+0x2e8>)
 800c870:	2200      	movs	r2, #0
 800c872:	4630      	mov	r0, r6
 800c874:	4639      	mov	r1, r7
 800c876:	f7f3 fd17 	bl	80002a8 <__aeabi_dsub>
 800c87a:	a365      	add	r3, pc, #404	; (adr r3, 800ca10 <_dtoa_r+0x2b8>)
 800c87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c880:	f7f3 feca 	bl	8000618 <__aeabi_dmul>
 800c884:	a364      	add	r3, pc, #400	; (adr r3, 800ca18 <_dtoa_r+0x2c0>)
 800c886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88a:	f7f3 fd0f 	bl	80002ac <__adddf3>
 800c88e:	4606      	mov	r6, r0
 800c890:	4628      	mov	r0, r5
 800c892:	460f      	mov	r7, r1
 800c894:	f7f3 fe56 	bl	8000544 <__aeabi_i2d>
 800c898:	a361      	add	r3, pc, #388	; (adr r3, 800ca20 <_dtoa_r+0x2c8>)
 800c89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89e:	f7f3 febb 	bl	8000618 <__aeabi_dmul>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	4639      	mov	r1, r7
 800c8aa:	f7f3 fcff 	bl	80002ac <__adddf3>
 800c8ae:	4606      	mov	r6, r0
 800c8b0:	460f      	mov	r7, r1
 800c8b2:	f7f4 f961 	bl	8000b78 <__aeabi_d2iz>
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	9000      	str	r0, [sp, #0]
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	4630      	mov	r0, r6
 800c8be:	4639      	mov	r1, r7
 800c8c0:	f7f4 f91c 	bl	8000afc <__aeabi_dcmplt>
 800c8c4:	b150      	cbz	r0, 800c8dc <_dtoa_r+0x184>
 800c8c6:	9800      	ldr	r0, [sp, #0]
 800c8c8:	f7f3 fe3c 	bl	8000544 <__aeabi_i2d>
 800c8cc:	4632      	mov	r2, r6
 800c8ce:	463b      	mov	r3, r7
 800c8d0:	f7f4 f90a 	bl	8000ae8 <__aeabi_dcmpeq>
 800c8d4:	b910      	cbnz	r0, 800c8dc <_dtoa_r+0x184>
 800c8d6:	9b00      	ldr	r3, [sp, #0]
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	9b00      	ldr	r3, [sp, #0]
 800c8de:	2b16      	cmp	r3, #22
 800c8e0:	d85a      	bhi.n	800c998 <_dtoa_r+0x240>
 800c8e2:	9a00      	ldr	r2, [sp, #0]
 800c8e4:	4b57      	ldr	r3, [pc, #348]	; (800ca44 <_dtoa_r+0x2ec>)
 800c8e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ee:	ec51 0b19 	vmov	r0, r1, d9
 800c8f2:	f7f4 f903 	bl	8000afc <__aeabi_dcmplt>
 800c8f6:	2800      	cmp	r0, #0
 800c8f8:	d050      	beq.n	800c99c <_dtoa_r+0x244>
 800c8fa:	9b00      	ldr	r3, [sp, #0]
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	9300      	str	r3, [sp, #0]
 800c900:	2300      	movs	r3, #0
 800c902:	930b      	str	r3, [sp, #44]	; 0x2c
 800c904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c906:	1b5d      	subs	r5, r3, r5
 800c908:	1e6b      	subs	r3, r5, #1
 800c90a:	9305      	str	r3, [sp, #20]
 800c90c:	bf45      	ittet	mi
 800c90e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c912:	9304      	strmi	r3, [sp, #16]
 800c914:	2300      	movpl	r3, #0
 800c916:	2300      	movmi	r3, #0
 800c918:	bf4c      	ite	mi
 800c91a:	9305      	strmi	r3, [sp, #20]
 800c91c:	9304      	strpl	r3, [sp, #16]
 800c91e:	9b00      	ldr	r3, [sp, #0]
 800c920:	2b00      	cmp	r3, #0
 800c922:	db3d      	blt.n	800c9a0 <_dtoa_r+0x248>
 800c924:	9b05      	ldr	r3, [sp, #20]
 800c926:	9a00      	ldr	r2, [sp, #0]
 800c928:	920a      	str	r2, [sp, #40]	; 0x28
 800c92a:	4413      	add	r3, r2
 800c92c:	9305      	str	r3, [sp, #20]
 800c92e:	2300      	movs	r3, #0
 800c930:	9307      	str	r3, [sp, #28]
 800c932:	9b06      	ldr	r3, [sp, #24]
 800c934:	2b09      	cmp	r3, #9
 800c936:	f200 8089 	bhi.w	800ca4c <_dtoa_r+0x2f4>
 800c93a:	2b05      	cmp	r3, #5
 800c93c:	bfc4      	itt	gt
 800c93e:	3b04      	subgt	r3, #4
 800c940:	9306      	strgt	r3, [sp, #24]
 800c942:	9b06      	ldr	r3, [sp, #24]
 800c944:	f1a3 0302 	sub.w	r3, r3, #2
 800c948:	bfcc      	ite	gt
 800c94a:	2500      	movgt	r5, #0
 800c94c:	2501      	movle	r5, #1
 800c94e:	2b03      	cmp	r3, #3
 800c950:	f200 8087 	bhi.w	800ca62 <_dtoa_r+0x30a>
 800c954:	e8df f003 	tbb	[pc, r3]
 800c958:	59383a2d 	.word	0x59383a2d
 800c95c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c960:	441d      	add	r5, r3
 800c962:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c966:	2b20      	cmp	r3, #32
 800c968:	bfc1      	itttt	gt
 800c96a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c96e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c972:	fa0b f303 	lslgt.w	r3, fp, r3
 800c976:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c97a:	bfda      	itte	le
 800c97c:	f1c3 0320 	rsble	r3, r3, #32
 800c980:	fa06 f003 	lslle.w	r0, r6, r3
 800c984:	4318      	orrgt	r0, r3
 800c986:	f7f3 fdcd 	bl	8000524 <__aeabi_ui2d>
 800c98a:	2301      	movs	r3, #1
 800c98c:	4606      	mov	r6, r0
 800c98e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c992:	3d01      	subs	r5, #1
 800c994:	930e      	str	r3, [sp, #56]	; 0x38
 800c996:	e76a      	b.n	800c86e <_dtoa_r+0x116>
 800c998:	2301      	movs	r3, #1
 800c99a:	e7b2      	b.n	800c902 <_dtoa_r+0x1aa>
 800c99c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c99e:	e7b1      	b.n	800c904 <_dtoa_r+0x1ac>
 800c9a0:	9b04      	ldr	r3, [sp, #16]
 800c9a2:	9a00      	ldr	r2, [sp, #0]
 800c9a4:	1a9b      	subs	r3, r3, r2
 800c9a6:	9304      	str	r3, [sp, #16]
 800c9a8:	4253      	negs	r3, r2
 800c9aa:	9307      	str	r3, [sp, #28]
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	930a      	str	r3, [sp, #40]	; 0x28
 800c9b0:	e7bf      	b.n	800c932 <_dtoa_r+0x1da>
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	9308      	str	r3, [sp, #32]
 800c9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	dc55      	bgt.n	800ca68 <_dtoa_r+0x310>
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	9209      	str	r2, [sp, #36]	; 0x24
 800c9c6:	e00c      	b.n	800c9e2 <_dtoa_r+0x28a>
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	e7f3      	b.n	800c9b4 <_dtoa_r+0x25c>
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9d0:	9308      	str	r3, [sp, #32]
 800c9d2:	9b00      	ldr	r3, [sp, #0]
 800c9d4:	4413      	add	r3, r2
 800c9d6:	9302      	str	r3, [sp, #8]
 800c9d8:	3301      	adds	r3, #1
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	9303      	str	r3, [sp, #12]
 800c9de:	bfb8      	it	lt
 800c9e0:	2301      	movlt	r3, #1
 800c9e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	6042      	str	r2, [r0, #4]
 800c9e8:	2204      	movs	r2, #4
 800c9ea:	f102 0614 	add.w	r6, r2, #20
 800c9ee:	429e      	cmp	r6, r3
 800c9f0:	6841      	ldr	r1, [r0, #4]
 800c9f2:	d93d      	bls.n	800ca70 <_dtoa_r+0x318>
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f001 f935 	bl	800dc64 <_Balloc>
 800c9fa:	9001      	str	r0, [sp, #4]
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	d13b      	bne.n	800ca78 <_dtoa_r+0x320>
 800ca00:	4b11      	ldr	r3, [pc, #68]	; (800ca48 <_dtoa_r+0x2f0>)
 800ca02:	4602      	mov	r2, r0
 800ca04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ca08:	e6c0      	b.n	800c78c <_dtoa_r+0x34>
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	e7df      	b.n	800c9ce <_dtoa_r+0x276>
 800ca0e:	bf00      	nop
 800ca10:	636f4361 	.word	0x636f4361
 800ca14:	3fd287a7 	.word	0x3fd287a7
 800ca18:	8b60c8b3 	.word	0x8b60c8b3
 800ca1c:	3fc68a28 	.word	0x3fc68a28
 800ca20:	509f79fb 	.word	0x509f79fb
 800ca24:	3fd34413 	.word	0x3fd34413
 800ca28:	0800fe16 	.word	0x0800fe16
 800ca2c:	0800fe2d 	.word	0x0800fe2d
 800ca30:	7ff00000 	.word	0x7ff00000
 800ca34:	0800fe12 	.word	0x0800fe12
 800ca38:	0800fe09 	.word	0x0800fe09
 800ca3c:	0800fc89 	.word	0x0800fc89
 800ca40:	3ff80000 	.word	0x3ff80000
 800ca44:	08010000 	.word	0x08010000
 800ca48:	0800fe88 	.word	0x0800fe88
 800ca4c:	2501      	movs	r5, #1
 800ca4e:	2300      	movs	r3, #0
 800ca50:	9306      	str	r3, [sp, #24]
 800ca52:	9508      	str	r5, [sp, #32]
 800ca54:	f04f 33ff 	mov.w	r3, #4294967295
 800ca58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	2312      	movs	r3, #18
 800ca60:	e7b0      	b.n	800c9c4 <_dtoa_r+0x26c>
 800ca62:	2301      	movs	r3, #1
 800ca64:	9308      	str	r3, [sp, #32]
 800ca66:	e7f5      	b.n	800ca54 <_dtoa_r+0x2fc>
 800ca68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ca6e:	e7b8      	b.n	800c9e2 <_dtoa_r+0x28a>
 800ca70:	3101      	adds	r1, #1
 800ca72:	6041      	str	r1, [r0, #4]
 800ca74:	0052      	lsls	r2, r2, #1
 800ca76:	e7b8      	b.n	800c9ea <_dtoa_r+0x292>
 800ca78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca7a:	9a01      	ldr	r2, [sp, #4]
 800ca7c:	601a      	str	r2, [r3, #0]
 800ca7e:	9b03      	ldr	r3, [sp, #12]
 800ca80:	2b0e      	cmp	r3, #14
 800ca82:	f200 809d 	bhi.w	800cbc0 <_dtoa_r+0x468>
 800ca86:	2d00      	cmp	r5, #0
 800ca88:	f000 809a 	beq.w	800cbc0 <_dtoa_r+0x468>
 800ca8c:	9b00      	ldr	r3, [sp, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	dd32      	ble.n	800caf8 <_dtoa_r+0x3a0>
 800ca92:	4ab7      	ldr	r2, [pc, #732]	; (800cd70 <_dtoa_r+0x618>)
 800ca94:	f003 030f 	and.w	r3, r3, #15
 800ca98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ca9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800caa0:	9b00      	ldr	r3, [sp, #0]
 800caa2:	05d8      	lsls	r0, r3, #23
 800caa4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800caa8:	d516      	bpl.n	800cad8 <_dtoa_r+0x380>
 800caaa:	4bb2      	ldr	r3, [pc, #712]	; (800cd74 <_dtoa_r+0x61c>)
 800caac:	ec51 0b19 	vmov	r0, r1, d9
 800cab0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cab4:	f7f3 feda 	bl	800086c <__aeabi_ddiv>
 800cab8:	f007 070f 	and.w	r7, r7, #15
 800cabc:	4682      	mov	sl, r0
 800cabe:	468b      	mov	fp, r1
 800cac0:	2503      	movs	r5, #3
 800cac2:	4eac      	ldr	r6, [pc, #688]	; (800cd74 <_dtoa_r+0x61c>)
 800cac4:	b957      	cbnz	r7, 800cadc <_dtoa_r+0x384>
 800cac6:	4642      	mov	r2, r8
 800cac8:	464b      	mov	r3, r9
 800caca:	4650      	mov	r0, sl
 800cacc:	4659      	mov	r1, fp
 800cace:	f7f3 fecd 	bl	800086c <__aeabi_ddiv>
 800cad2:	4682      	mov	sl, r0
 800cad4:	468b      	mov	fp, r1
 800cad6:	e028      	b.n	800cb2a <_dtoa_r+0x3d2>
 800cad8:	2502      	movs	r5, #2
 800cada:	e7f2      	b.n	800cac2 <_dtoa_r+0x36a>
 800cadc:	07f9      	lsls	r1, r7, #31
 800cade:	d508      	bpl.n	800caf2 <_dtoa_r+0x39a>
 800cae0:	4640      	mov	r0, r8
 800cae2:	4649      	mov	r1, r9
 800cae4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cae8:	f7f3 fd96 	bl	8000618 <__aeabi_dmul>
 800caec:	3501      	adds	r5, #1
 800caee:	4680      	mov	r8, r0
 800caf0:	4689      	mov	r9, r1
 800caf2:	107f      	asrs	r7, r7, #1
 800caf4:	3608      	adds	r6, #8
 800caf6:	e7e5      	b.n	800cac4 <_dtoa_r+0x36c>
 800caf8:	f000 809b 	beq.w	800cc32 <_dtoa_r+0x4da>
 800cafc:	9b00      	ldr	r3, [sp, #0]
 800cafe:	4f9d      	ldr	r7, [pc, #628]	; (800cd74 <_dtoa_r+0x61c>)
 800cb00:	425e      	negs	r6, r3
 800cb02:	4b9b      	ldr	r3, [pc, #620]	; (800cd70 <_dtoa_r+0x618>)
 800cb04:	f006 020f 	and.w	r2, r6, #15
 800cb08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb10:	ec51 0b19 	vmov	r0, r1, d9
 800cb14:	f7f3 fd80 	bl	8000618 <__aeabi_dmul>
 800cb18:	1136      	asrs	r6, r6, #4
 800cb1a:	4682      	mov	sl, r0
 800cb1c:	468b      	mov	fp, r1
 800cb1e:	2300      	movs	r3, #0
 800cb20:	2502      	movs	r5, #2
 800cb22:	2e00      	cmp	r6, #0
 800cb24:	d17a      	bne.n	800cc1c <_dtoa_r+0x4c4>
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d1d3      	bne.n	800cad2 <_dtoa_r+0x37a>
 800cb2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f000 8082 	beq.w	800cc36 <_dtoa_r+0x4de>
 800cb32:	4b91      	ldr	r3, [pc, #580]	; (800cd78 <_dtoa_r+0x620>)
 800cb34:	2200      	movs	r2, #0
 800cb36:	4650      	mov	r0, sl
 800cb38:	4659      	mov	r1, fp
 800cb3a:	f7f3 ffdf 	bl	8000afc <__aeabi_dcmplt>
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	d079      	beq.n	800cc36 <_dtoa_r+0x4de>
 800cb42:	9b03      	ldr	r3, [sp, #12]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d076      	beq.n	800cc36 <_dtoa_r+0x4de>
 800cb48:	9b02      	ldr	r3, [sp, #8]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	dd36      	ble.n	800cbbc <_dtoa_r+0x464>
 800cb4e:	9b00      	ldr	r3, [sp, #0]
 800cb50:	4650      	mov	r0, sl
 800cb52:	4659      	mov	r1, fp
 800cb54:	1e5f      	subs	r7, r3, #1
 800cb56:	2200      	movs	r2, #0
 800cb58:	4b88      	ldr	r3, [pc, #544]	; (800cd7c <_dtoa_r+0x624>)
 800cb5a:	f7f3 fd5d 	bl	8000618 <__aeabi_dmul>
 800cb5e:	9e02      	ldr	r6, [sp, #8]
 800cb60:	4682      	mov	sl, r0
 800cb62:	468b      	mov	fp, r1
 800cb64:	3501      	adds	r5, #1
 800cb66:	4628      	mov	r0, r5
 800cb68:	f7f3 fcec 	bl	8000544 <__aeabi_i2d>
 800cb6c:	4652      	mov	r2, sl
 800cb6e:	465b      	mov	r3, fp
 800cb70:	f7f3 fd52 	bl	8000618 <__aeabi_dmul>
 800cb74:	4b82      	ldr	r3, [pc, #520]	; (800cd80 <_dtoa_r+0x628>)
 800cb76:	2200      	movs	r2, #0
 800cb78:	f7f3 fb98 	bl	80002ac <__adddf3>
 800cb7c:	46d0      	mov	r8, sl
 800cb7e:	46d9      	mov	r9, fp
 800cb80:	4682      	mov	sl, r0
 800cb82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cb86:	2e00      	cmp	r6, #0
 800cb88:	d158      	bne.n	800cc3c <_dtoa_r+0x4e4>
 800cb8a:	4b7e      	ldr	r3, [pc, #504]	; (800cd84 <_dtoa_r+0x62c>)
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	4640      	mov	r0, r8
 800cb90:	4649      	mov	r1, r9
 800cb92:	f7f3 fb89 	bl	80002a8 <__aeabi_dsub>
 800cb96:	4652      	mov	r2, sl
 800cb98:	465b      	mov	r3, fp
 800cb9a:	4680      	mov	r8, r0
 800cb9c:	4689      	mov	r9, r1
 800cb9e:	f7f3 ffcb 	bl	8000b38 <__aeabi_dcmpgt>
 800cba2:	2800      	cmp	r0, #0
 800cba4:	f040 8295 	bne.w	800d0d2 <_dtoa_r+0x97a>
 800cba8:	4652      	mov	r2, sl
 800cbaa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cbae:	4640      	mov	r0, r8
 800cbb0:	4649      	mov	r1, r9
 800cbb2:	f7f3 ffa3 	bl	8000afc <__aeabi_dcmplt>
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	f040 8289 	bne.w	800d0ce <_dtoa_r+0x976>
 800cbbc:	ec5b ab19 	vmov	sl, fp, d9
 800cbc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	f2c0 8148 	blt.w	800ce58 <_dtoa_r+0x700>
 800cbc8:	9a00      	ldr	r2, [sp, #0]
 800cbca:	2a0e      	cmp	r2, #14
 800cbcc:	f300 8144 	bgt.w	800ce58 <_dtoa_r+0x700>
 800cbd0:	4b67      	ldr	r3, [pc, #412]	; (800cd70 <_dtoa_r+0x618>)
 800cbd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cbda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f280 80d5 	bge.w	800cd8c <_dtoa_r+0x634>
 800cbe2:	9b03      	ldr	r3, [sp, #12]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	f300 80d1 	bgt.w	800cd8c <_dtoa_r+0x634>
 800cbea:	f040 826f 	bne.w	800d0cc <_dtoa_r+0x974>
 800cbee:	4b65      	ldr	r3, [pc, #404]	; (800cd84 <_dtoa_r+0x62c>)
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	4640      	mov	r0, r8
 800cbf4:	4649      	mov	r1, r9
 800cbf6:	f7f3 fd0f 	bl	8000618 <__aeabi_dmul>
 800cbfa:	4652      	mov	r2, sl
 800cbfc:	465b      	mov	r3, fp
 800cbfe:	f7f3 ff91 	bl	8000b24 <__aeabi_dcmpge>
 800cc02:	9e03      	ldr	r6, [sp, #12]
 800cc04:	4637      	mov	r7, r6
 800cc06:	2800      	cmp	r0, #0
 800cc08:	f040 8245 	bne.w	800d096 <_dtoa_r+0x93e>
 800cc0c:	9d01      	ldr	r5, [sp, #4]
 800cc0e:	2331      	movs	r3, #49	; 0x31
 800cc10:	f805 3b01 	strb.w	r3, [r5], #1
 800cc14:	9b00      	ldr	r3, [sp, #0]
 800cc16:	3301      	adds	r3, #1
 800cc18:	9300      	str	r3, [sp, #0]
 800cc1a:	e240      	b.n	800d09e <_dtoa_r+0x946>
 800cc1c:	07f2      	lsls	r2, r6, #31
 800cc1e:	d505      	bpl.n	800cc2c <_dtoa_r+0x4d4>
 800cc20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc24:	f7f3 fcf8 	bl	8000618 <__aeabi_dmul>
 800cc28:	3501      	adds	r5, #1
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	1076      	asrs	r6, r6, #1
 800cc2e:	3708      	adds	r7, #8
 800cc30:	e777      	b.n	800cb22 <_dtoa_r+0x3ca>
 800cc32:	2502      	movs	r5, #2
 800cc34:	e779      	b.n	800cb2a <_dtoa_r+0x3d2>
 800cc36:	9f00      	ldr	r7, [sp, #0]
 800cc38:	9e03      	ldr	r6, [sp, #12]
 800cc3a:	e794      	b.n	800cb66 <_dtoa_r+0x40e>
 800cc3c:	9901      	ldr	r1, [sp, #4]
 800cc3e:	4b4c      	ldr	r3, [pc, #304]	; (800cd70 <_dtoa_r+0x618>)
 800cc40:	4431      	add	r1, r6
 800cc42:	910d      	str	r1, [sp, #52]	; 0x34
 800cc44:	9908      	ldr	r1, [sp, #32]
 800cc46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cc4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cc4e:	2900      	cmp	r1, #0
 800cc50:	d043      	beq.n	800ccda <_dtoa_r+0x582>
 800cc52:	494d      	ldr	r1, [pc, #308]	; (800cd88 <_dtoa_r+0x630>)
 800cc54:	2000      	movs	r0, #0
 800cc56:	f7f3 fe09 	bl	800086c <__aeabi_ddiv>
 800cc5a:	4652      	mov	r2, sl
 800cc5c:	465b      	mov	r3, fp
 800cc5e:	f7f3 fb23 	bl	80002a8 <__aeabi_dsub>
 800cc62:	9d01      	ldr	r5, [sp, #4]
 800cc64:	4682      	mov	sl, r0
 800cc66:	468b      	mov	fp, r1
 800cc68:	4649      	mov	r1, r9
 800cc6a:	4640      	mov	r0, r8
 800cc6c:	f7f3 ff84 	bl	8000b78 <__aeabi_d2iz>
 800cc70:	4606      	mov	r6, r0
 800cc72:	f7f3 fc67 	bl	8000544 <__aeabi_i2d>
 800cc76:	4602      	mov	r2, r0
 800cc78:	460b      	mov	r3, r1
 800cc7a:	4640      	mov	r0, r8
 800cc7c:	4649      	mov	r1, r9
 800cc7e:	f7f3 fb13 	bl	80002a8 <__aeabi_dsub>
 800cc82:	3630      	adds	r6, #48	; 0x30
 800cc84:	f805 6b01 	strb.w	r6, [r5], #1
 800cc88:	4652      	mov	r2, sl
 800cc8a:	465b      	mov	r3, fp
 800cc8c:	4680      	mov	r8, r0
 800cc8e:	4689      	mov	r9, r1
 800cc90:	f7f3 ff34 	bl	8000afc <__aeabi_dcmplt>
 800cc94:	2800      	cmp	r0, #0
 800cc96:	d163      	bne.n	800cd60 <_dtoa_r+0x608>
 800cc98:	4642      	mov	r2, r8
 800cc9a:	464b      	mov	r3, r9
 800cc9c:	4936      	ldr	r1, [pc, #216]	; (800cd78 <_dtoa_r+0x620>)
 800cc9e:	2000      	movs	r0, #0
 800cca0:	f7f3 fb02 	bl	80002a8 <__aeabi_dsub>
 800cca4:	4652      	mov	r2, sl
 800cca6:	465b      	mov	r3, fp
 800cca8:	f7f3 ff28 	bl	8000afc <__aeabi_dcmplt>
 800ccac:	2800      	cmp	r0, #0
 800ccae:	f040 80b5 	bne.w	800ce1c <_dtoa_r+0x6c4>
 800ccb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccb4:	429d      	cmp	r5, r3
 800ccb6:	d081      	beq.n	800cbbc <_dtoa_r+0x464>
 800ccb8:	4b30      	ldr	r3, [pc, #192]	; (800cd7c <_dtoa_r+0x624>)
 800ccba:	2200      	movs	r2, #0
 800ccbc:	4650      	mov	r0, sl
 800ccbe:	4659      	mov	r1, fp
 800ccc0:	f7f3 fcaa 	bl	8000618 <__aeabi_dmul>
 800ccc4:	4b2d      	ldr	r3, [pc, #180]	; (800cd7c <_dtoa_r+0x624>)
 800ccc6:	4682      	mov	sl, r0
 800ccc8:	468b      	mov	fp, r1
 800ccca:	4640      	mov	r0, r8
 800cccc:	4649      	mov	r1, r9
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f7f3 fca2 	bl	8000618 <__aeabi_dmul>
 800ccd4:	4680      	mov	r8, r0
 800ccd6:	4689      	mov	r9, r1
 800ccd8:	e7c6      	b.n	800cc68 <_dtoa_r+0x510>
 800ccda:	4650      	mov	r0, sl
 800ccdc:	4659      	mov	r1, fp
 800ccde:	f7f3 fc9b 	bl	8000618 <__aeabi_dmul>
 800cce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cce4:	9d01      	ldr	r5, [sp, #4]
 800cce6:	930f      	str	r3, [sp, #60]	; 0x3c
 800cce8:	4682      	mov	sl, r0
 800ccea:	468b      	mov	fp, r1
 800ccec:	4649      	mov	r1, r9
 800ccee:	4640      	mov	r0, r8
 800ccf0:	f7f3 ff42 	bl	8000b78 <__aeabi_d2iz>
 800ccf4:	4606      	mov	r6, r0
 800ccf6:	f7f3 fc25 	bl	8000544 <__aeabi_i2d>
 800ccfa:	3630      	adds	r6, #48	; 0x30
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	460b      	mov	r3, r1
 800cd00:	4640      	mov	r0, r8
 800cd02:	4649      	mov	r1, r9
 800cd04:	f7f3 fad0 	bl	80002a8 <__aeabi_dsub>
 800cd08:	f805 6b01 	strb.w	r6, [r5], #1
 800cd0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd0e:	429d      	cmp	r5, r3
 800cd10:	4680      	mov	r8, r0
 800cd12:	4689      	mov	r9, r1
 800cd14:	f04f 0200 	mov.w	r2, #0
 800cd18:	d124      	bne.n	800cd64 <_dtoa_r+0x60c>
 800cd1a:	4b1b      	ldr	r3, [pc, #108]	; (800cd88 <_dtoa_r+0x630>)
 800cd1c:	4650      	mov	r0, sl
 800cd1e:	4659      	mov	r1, fp
 800cd20:	f7f3 fac4 	bl	80002ac <__adddf3>
 800cd24:	4602      	mov	r2, r0
 800cd26:	460b      	mov	r3, r1
 800cd28:	4640      	mov	r0, r8
 800cd2a:	4649      	mov	r1, r9
 800cd2c:	f7f3 ff04 	bl	8000b38 <__aeabi_dcmpgt>
 800cd30:	2800      	cmp	r0, #0
 800cd32:	d173      	bne.n	800ce1c <_dtoa_r+0x6c4>
 800cd34:	4652      	mov	r2, sl
 800cd36:	465b      	mov	r3, fp
 800cd38:	4913      	ldr	r1, [pc, #76]	; (800cd88 <_dtoa_r+0x630>)
 800cd3a:	2000      	movs	r0, #0
 800cd3c:	f7f3 fab4 	bl	80002a8 <__aeabi_dsub>
 800cd40:	4602      	mov	r2, r0
 800cd42:	460b      	mov	r3, r1
 800cd44:	4640      	mov	r0, r8
 800cd46:	4649      	mov	r1, r9
 800cd48:	f7f3 fed8 	bl	8000afc <__aeabi_dcmplt>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	f43f af35 	beq.w	800cbbc <_dtoa_r+0x464>
 800cd52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cd54:	1e6b      	subs	r3, r5, #1
 800cd56:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd5c:	2b30      	cmp	r3, #48	; 0x30
 800cd5e:	d0f8      	beq.n	800cd52 <_dtoa_r+0x5fa>
 800cd60:	9700      	str	r7, [sp, #0]
 800cd62:	e049      	b.n	800cdf8 <_dtoa_r+0x6a0>
 800cd64:	4b05      	ldr	r3, [pc, #20]	; (800cd7c <_dtoa_r+0x624>)
 800cd66:	f7f3 fc57 	bl	8000618 <__aeabi_dmul>
 800cd6a:	4680      	mov	r8, r0
 800cd6c:	4689      	mov	r9, r1
 800cd6e:	e7bd      	b.n	800ccec <_dtoa_r+0x594>
 800cd70:	08010000 	.word	0x08010000
 800cd74:	0800ffd8 	.word	0x0800ffd8
 800cd78:	3ff00000 	.word	0x3ff00000
 800cd7c:	40240000 	.word	0x40240000
 800cd80:	401c0000 	.word	0x401c0000
 800cd84:	40140000 	.word	0x40140000
 800cd88:	3fe00000 	.word	0x3fe00000
 800cd8c:	9d01      	ldr	r5, [sp, #4]
 800cd8e:	4656      	mov	r6, sl
 800cd90:	465f      	mov	r7, fp
 800cd92:	4642      	mov	r2, r8
 800cd94:	464b      	mov	r3, r9
 800cd96:	4630      	mov	r0, r6
 800cd98:	4639      	mov	r1, r7
 800cd9a:	f7f3 fd67 	bl	800086c <__aeabi_ddiv>
 800cd9e:	f7f3 feeb 	bl	8000b78 <__aeabi_d2iz>
 800cda2:	4682      	mov	sl, r0
 800cda4:	f7f3 fbce 	bl	8000544 <__aeabi_i2d>
 800cda8:	4642      	mov	r2, r8
 800cdaa:	464b      	mov	r3, r9
 800cdac:	f7f3 fc34 	bl	8000618 <__aeabi_dmul>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	4639      	mov	r1, r7
 800cdb8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cdbc:	f7f3 fa74 	bl	80002a8 <__aeabi_dsub>
 800cdc0:	f805 6b01 	strb.w	r6, [r5], #1
 800cdc4:	9e01      	ldr	r6, [sp, #4]
 800cdc6:	9f03      	ldr	r7, [sp, #12]
 800cdc8:	1bae      	subs	r6, r5, r6
 800cdca:	42b7      	cmp	r7, r6
 800cdcc:	4602      	mov	r2, r0
 800cdce:	460b      	mov	r3, r1
 800cdd0:	d135      	bne.n	800ce3e <_dtoa_r+0x6e6>
 800cdd2:	f7f3 fa6b 	bl	80002ac <__adddf3>
 800cdd6:	4642      	mov	r2, r8
 800cdd8:	464b      	mov	r3, r9
 800cdda:	4606      	mov	r6, r0
 800cddc:	460f      	mov	r7, r1
 800cdde:	f7f3 feab 	bl	8000b38 <__aeabi_dcmpgt>
 800cde2:	b9d0      	cbnz	r0, 800ce1a <_dtoa_r+0x6c2>
 800cde4:	4642      	mov	r2, r8
 800cde6:	464b      	mov	r3, r9
 800cde8:	4630      	mov	r0, r6
 800cdea:	4639      	mov	r1, r7
 800cdec:	f7f3 fe7c 	bl	8000ae8 <__aeabi_dcmpeq>
 800cdf0:	b110      	cbz	r0, 800cdf8 <_dtoa_r+0x6a0>
 800cdf2:	f01a 0f01 	tst.w	sl, #1
 800cdf6:	d110      	bne.n	800ce1a <_dtoa_r+0x6c2>
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	ee18 1a10 	vmov	r1, s16
 800cdfe:	f000 ff71 	bl	800dce4 <_Bfree>
 800ce02:	2300      	movs	r3, #0
 800ce04:	9800      	ldr	r0, [sp, #0]
 800ce06:	702b      	strb	r3, [r5, #0]
 800ce08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce0a:	3001      	adds	r0, #1
 800ce0c:	6018      	str	r0, [r3, #0]
 800ce0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	f43f acf1 	beq.w	800c7f8 <_dtoa_r+0xa0>
 800ce16:	601d      	str	r5, [r3, #0]
 800ce18:	e4ee      	b.n	800c7f8 <_dtoa_r+0xa0>
 800ce1a:	9f00      	ldr	r7, [sp, #0]
 800ce1c:	462b      	mov	r3, r5
 800ce1e:	461d      	mov	r5, r3
 800ce20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce24:	2a39      	cmp	r2, #57	; 0x39
 800ce26:	d106      	bne.n	800ce36 <_dtoa_r+0x6de>
 800ce28:	9a01      	ldr	r2, [sp, #4]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d1f7      	bne.n	800ce1e <_dtoa_r+0x6c6>
 800ce2e:	9901      	ldr	r1, [sp, #4]
 800ce30:	2230      	movs	r2, #48	; 0x30
 800ce32:	3701      	adds	r7, #1
 800ce34:	700a      	strb	r2, [r1, #0]
 800ce36:	781a      	ldrb	r2, [r3, #0]
 800ce38:	3201      	adds	r2, #1
 800ce3a:	701a      	strb	r2, [r3, #0]
 800ce3c:	e790      	b.n	800cd60 <_dtoa_r+0x608>
 800ce3e:	4ba6      	ldr	r3, [pc, #664]	; (800d0d8 <_dtoa_r+0x980>)
 800ce40:	2200      	movs	r2, #0
 800ce42:	f7f3 fbe9 	bl	8000618 <__aeabi_dmul>
 800ce46:	2200      	movs	r2, #0
 800ce48:	2300      	movs	r3, #0
 800ce4a:	4606      	mov	r6, r0
 800ce4c:	460f      	mov	r7, r1
 800ce4e:	f7f3 fe4b 	bl	8000ae8 <__aeabi_dcmpeq>
 800ce52:	2800      	cmp	r0, #0
 800ce54:	d09d      	beq.n	800cd92 <_dtoa_r+0x63a>
 800ce56:	e7cf      	b.n	800cdf8 <_dtoa_r+0x6a0>
 800ce58:	9a08      	ldr	r2, [sp, #32]
 800ce5a:	2a00      	cmp	r2, #0
 800ce5c:	f000 80d7 	beq.w	800d00e <_dtoa_r+0x8b6>
 800ce60:	9a06      	ldr	r2, [sp, #24]
 800ce62:	2a01      	cmp	r2, #1
 800ce64:	f300 80ba 	bgt.w	800cfdc <_dtoa_r+0x884>
 800ce68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce6a:	2a00      	cmp	r2, #0
 800ce6c:	f000 80b2 	beq.w	800cfd4 <_dtoa_r+0x87c>
 800ce70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ce74:	9e07      	ldr	r6, [sp, #28]
 800ce76:	9d04      	ldr	r5, [sp, #16]
 800ce78:	9a04      	ldr	r2, [sp, #16]
 800ce7a:	441a      	add	r2, r3
 800ce7c:	9204      	str	r2, [sp, #16]
 800ce7e:	9a05      	ldr	r2, [sp, #20]
 800ce80:	2101      	movs	r1, #1
 800ce82:	441a      	add	r2, r3
 800ce84:	4620      	mov	r0, r4
 800ce86:	9205      	str	r2, [sp, #20]
 800ce88:	f001 f82e 	bl	800dee8 <__i2b>
 800ce8c:	4607      	mov	r7, r0
 800ce8e:	2d00      	cmp	r5, #0
 800ce90:	dd0c      	ble.n	800ceac <_dtoa_r+0x754>
 800ce92:	9b05      	ldr	r3, [sp, #20]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	dd09      	ble.n	800ceac <_dtoa_r+0x754>
 800ce98:	42ab      	cmp	r3, r5
 800ce9a:	9a04      	ldr	r2, [sp, #16]
 800ce9c:	bfa8      	it	ge
 800ce9e:	462b      	movge	r3, r5
 800cea0:	1ad2      	subs	r2, r2, r3
 800cea2:	9204      	str	r2, [sp, #16]
 800cea4:	9a05      	ldr	r2, [sp, #20]
 800cea6:	1aed      	subs	r5, r5, r3
 800cea8:	1ad3      	subs	r3, r2, r3
 800ceaa:	9305      	str	r3, [sp, #20]
 800ceac:	9b07      	ldr	r3, [sp, #28]
 800ceae:	b31b      	cbz	r3, 800cef8 <_dtoa_r+0x7a0>
 800ceb0:	9b08      	ldr	r3, [sp, #32]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	f000 80af 	beq.w	800d016 <_dtoa_r+0x8be>
 800ceb8:	2e00      	cmp	r6, #0
 800ceba:	dd13      	ble.n	800cee4 <_dtoa_r+0x78c>
 800cebc:	4639      	mov	r1, r7
 800cebe:	4632      	mov	r2, r6
 800cec0:	4620      	mov	r0, r4
 800cec2:	f001 f8d1 	bl	800e068 <__pow5mult>
 800cec6:	ee18 2a10 	vmov	r2, s16
 800ceca:	4601      	mov	r1, r0
 800cecc:	4607      	mov	r7, r0
 800cece:	4620      	mov	r0, r4
 800ced0:	f001 f820 	bl	800df14 <__multiply>
 800ced4:	ee18 1a10 	vmov	r1, s16
 800ced8:	4680      	mov	r8, r0
 800ceda:	4620      	mov	r0, r4
 800cedc:	f000 ff02 	bl	800dce4 <_Bfree>
 800cee0:	ee08 8a10 	vmov	s16, r8
 800cee4:	9b07      	ldr	r3, [sp, #28]
 800cee6:	1b9a      	subs	r2, r3, r6
 800cee8:	d006      	beq.n	800cef8 <_dtoa_r+0x7a0>
 800ceea:	ee18 1a10 	vmov	r1, s16
 800ceee:	4620      	mov	r0, r4
 800cef0:	f001 f8ba 	bl	800e068 <__pow5mult>
 800cef4:	ee08 0a10 	vmov	s16, r0
 800cef8:	2101      	movs	r1, #1
 800cefa:	4620      	mov	r0, r4
 800cefc:	f000 fff4 	bl	800dee8 <__i2b>
 800cf00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	4606      	mov	r6, r0
 800cf06:	f340 8088 	ble.w	800d01a <_dtoa_r+0x8c2>
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	4601      	mov	r1, r0
 800cf0e:	4620      	mov	r0, r4
 800cf10:	f001 f8aa 	bl	800e068 <__pow5mult>
 800cf14:	9b06      	ldr	r3, [sp, #24]
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	4606      	mov	r6, r0
 800cf1a:	f340 8081 	ble.w	800d020 <_dtoa_r+0x8c8>
 800cf1e:	f04f 0800 	mov.w	r8, #0
 800cf22:	6933      	ldr	r3, [r6, #16]
 800cf24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cf28:	6918      	ldr	r0, [r3, #16]
 800cf2a:	f000 ff8d 	bl	800de48 <__hi0bits>
 800cf2e:	f1c0 0020 	rsb	r0, r0, #32
 800cf32:	9b05      	ldr	r3, [sp, #20]
 800cf34:	4418      	add	r0, r3
 800cf36:	f010 001f 	ands.w	r0, r0, #31
 800cf3a:	f000 8092 	beq.w	800d062 <_dtoa_r+0x90a>
 800cf3e:	f1c0 0320 	rsb	r3, r0, #32
 800cf42:	2b04      	cmp	r3, #4
 800cf44:	f340 808a 	ble.w	800d05c <_dtoa_r+0x904>
 800cf48:	f1c0 001c 	rsb	r0, r0, #28
 800cf4c:	9b04      	ldr	r3, [sp, #16]
 800cf4e:	4403      	add	r3, r0
 800cf50:	9304      	str	r3, [sp, #16]
 800cf52:	9b05      	ldr	r3, [sp, #20]
 800cf54:	4403      	add	r3, r0
 800cf56:	4405      	add	r5, r0
 800cf58:	9305      	str	r3, [sp, #20]
 800cf5a:	9b04      	ldr	r3, [sp, #16]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	dd07      	ble.n	800cf70 <_dtoa_r+0x818>
 800cf60:	ee18 1a10 	vmov	r1, s16
 800cf64:	461a      	mov	r2, r3
 800cf66:	4620      	mov	r0, r4
 800cf68:	f001 f8d8 	bl	800e11c <__lshift>
 800cf6c:	ee08 0a10 	vmov	s16, r0
 800cf70:	9b05      	ldr	r3, [sp, #20]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	dd05      	ble.n	800cf82 <_dtoa_r+0x82a>
 800cf76:	4631      	mov	r1, r6
 800cf78:	461a      	mov	r2, r3
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	f001 f8ce 	bl	800e11c <__lshift>
 800cf80:	4606      	mov	r6, r0
 800cf82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d06e      	beq.n	800d066 <_dtoa_r+0x90e>
 800cf88:	ee18 0a10 	vmov	r0, s16
 800cf8c:	4631      	mov	r1, r6
 800cf8e:	f001 f935 	bl	800e1fc <__mcmp>
 800cf92:	2800      	cmp	r0, #0
 800cf94:	da67      	bge.n	800d066 <_dtoa_r+0x90e>
 800cf96:	9b00      	ldr	r3, [sp, #0]
 800cf98:	3b01      	subs	r3, #1
 800cf9a:	ee18 1a10 	vmov	r1, s16
 800cf9e:	9300      	str	r3, [sp, #0]
 800cfa0:	220a      	movs	r2, #10
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	f000 febf 	bl	800dd28 <__multadd>
 800cfaa:	9b08      	ldr	r3, [sp, #32]
 800cfac:	ee08 0a10 	vmov	s16, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	f000 81b1 	beq.w	800d318 <_dtoa_r+0xbc0>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	4639      	mov	r1, r7
 800cfba:	220a      	movs	r2, #10
 800cfbc:	4620      	mov	r0, r4
 800cfbe:	f000 feb3 	bl	800dd28 <__multadd>
 800cfc2:	9b02      	ldr	r3, [sp, #8]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	4607      	mov	r7, r0
 800cfc8:	f300 808e 	bgt.w	800d0e8 <_dtoa_r+0x990>
 800cfcc:	9b06      	ldr	r3, [sp, #24]
 800cfce:	2b02      	cmp	r3, #2
 800cfd0:	dc51      	bgt.n	800d076 <_dtoa_r+0x91e>
 800cfd2:	e089      	b.n	800d0e8 <_dtoa_r+0x990>
 800cfd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cfd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cfda:	e74b      	b.n	800ce74 <_dtoa_r+0x71c>
 800cfdc:	9b03      	ldr	r3, [sp, #12]
 800cfde:	1e5e      	subs	r6, r3, #1
 800cfe0:	9b07      	ldr	r3, [sp, #28]
 800cfe2:	42b3      	cmp	r3, r6
 800cfe4:	bfbf      	itttt	lt
 800cfe6:	9b07      	ldrlt	r3, [sp, #28]
 800cfe8:	9607      	strlt	r6, [sp, #28]
 800cfea:	1af2      	sublt	r2, r6, r3
 800cfec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cfee:	bfb6      	itet	lt
 800cff0:	189b      	addlt	r3, r3, r2
 800cff2:	1b9e      	subge	r6, r3, r6
 800cff4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cff6:	9b03      	ldr	r3, [sp, #12]
 800cff8:	bfb8      	it	lt
 800cffa:	2600      	movlt	r6, #0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	bfb7      	itett	lt
 800d000:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d004:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d008:	1a9d      	sublt	r5, r3, r2
 800d00a:	2300      	movlt	r3, #0
 800d00c:	e734      	b.n	800ce78 <_dtoa_r+0x720>
 800d00e:	9e07      	ldr	r6, [sp, #28]
 800d010:	9d04      	ldr	r5, [sp, #16]
 800d012:	9f08      	ldr	r7, [sp, #32]
 800d014:	e73b      	b.n	800ce8e <_dtoa_r+0x736>
 800d016:	9a07      	ldr	r2, [sp, #28]
 800d018:	e767      	b.n	800ceea <_dtoa_r+0x792>
 800d01a:	9b06      	ldr	r3, [sp, #24]
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	dc18      	bgt.n	800d052 <_dtoa_r+0x8fa>
 800d020:	f1ba 0f00 	cmp.w	sl, #0
 800d024:	d115      	bne.n	800d052 <_dtoa_r+0x8fa>
 800d026:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d02a:	b993      	cbnz	r3, 800d052 <_dtoa_r+0x8fa>
 800d02c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d030:	0d1b      	lsrs	r3, r3, #20
 800d032:	051b      	lsls	r3, r3, #20
 800d034:	b183      	cbz	r3, 800d058 <_dtoa_r+0x900>
 800d036:	9b04      	ldr	r3, [sp, #16]
 800d038:	3301      	adds	r3, #1
 800d03a:	9304      	str	r3, [sp, #16]
 800d03c:	9b05      	ldr	r3, [sp, #20]
 800d03e:	3301      	adds	r3, #1
 800d040:	9305      	str	r3, [sp, #20]
 800d042:	f04f 0801 	mov.w	r8, #1
 800d046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d048:	2b00      	cmp	r3, #0
 800d04a:	f47f af6a 	bne.w	800cf22 <_dtoa_r+0x7ca>
 800d04e:	2001      	movs	r0, #1
 800d050:	e76f      	b.n	800cf32 <_dtoa_r+0x7da>
 800d052:	f04f 0800 	mov.w	r8, #0
 800d056:	e7f6      	b.n	800d046 <_dtoa_r+0x8ee>
 800d058:	4698      	mov	r8, r3
 800d05a:	e7f4      	b.n	800d046 <_dtoa_r+0x8ee>
 800d05c:	f43f af7d 	beq.w	800cf5a <_dtoa_r+0x802>
 800d060:	4618      	mov	r0, r3
 800d062:	301c      	adds	r0, #28
 800d064:	e772      	b.n	800cf4c <_dtoa_r+0x7f4>
 800d066:	9b03      	ldr	r3, [sp, #12]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	dc37      	bgt.n	800d0dc <_dtoa_r+0x984>
 800d06c:	9b06      	ldr	r3, [sp, #24]
 800d06e:	2b02      	cmp	r3, #2
 800d070:	dd34      	ble.n	800d0dc <_dtoa_r+0x984>
 800d072:	9b03      	ldr	r3, [sp, #12]
 800d074:	9302      	str	r3, [sp, #8]
 800d076:	9b02      	ldr	r3, [sp, #8]
 800d078:	b96b      	cbnz	r3, 800d096 <_dtoa_r+0x93e>
 800d07a:	4631      	mov	r1, r6
 800d07c:	2205      	movs	r2, #5
 800d07e:	4620      	mov	r0, r4
 800d080:	f000 fe52 	bl	800dd28 <__multadd>
 800d084:	4601      	mov	r1, r0
 800d086:	4606      	mov	r6, r0
 800d088:	ee18 0a10 	vmov	r0, s16
 800d08c:	f001 f8b6 	bl	800e1fc <__mcmp>
 800d090:	2800      	cmp	r0, #0
 800d092:	f73f adbb 	bgt.w	800cc0c <_dtoa_r+0x4b4>
 800d096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d098:	9d01      	ldr	r5, [sp, #4]
 800d09a:	43db      	mvns	r3, r3
 800d09c:	9300      	str	r3, [sp, #0]
 800d09e:	f04f 0800 	mov.w	r8, #0
 800d0a2:	4631      	mov	r1, r6
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	f000 fe1d 	bl	800dce4 <_Bfree>
 800d0aa:	2f00      	cmp	r7, #0
 800d0ac:	f43f aea4 	beq.w	800cdf8 <_dtoa_r+0x6a0>
 800d0b0:	f1b8 0f00 	cmp.w	r8, #0
 800d0b4:	d005      	beq.n	800d0c2 <_dtoa_r+0x96a>
 800d0b6:	45b8      	cmp	r8, r7
 800d0b8:	d003      	beq.n	800d0c2 <_dtoa_r+0x96a>
 800d0ba:	4641      	mov	r1, r8
 800d0bc:	4620      	mov	r0, r4
 800d0be:	f000 fe11 	bl	800dce4 <_Bfree>
 800d0c2:	4639      	mov	r1, r7
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	f000 fe0d 	bl	800dce4 <_Bfree>
 800d0ca:	e695      	b.n	800cdf8 <_dtoa_r+0x6a0>
 800d0cc:	2600      	movs	r6, #0
 800d0ce:	4637      	mov	r7, r6
 800d0d0:	e7e1      	b.n	800d096 <_dtoa_r+0x93e>
 800d0d2:	9700      	str	r7, [sp, #0]
 800d0d4:	4637      	mov	r7, r6
 800d0d6:	e599      	b.n	800cc0c <_dtoa_r+0x4b4>
 800d0d8:	40240000 	.word	0x40240000
 800d0dc:	9b08      	ldr	r3, [sp, #32]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	f000 80ca 	beq.w	800d278 <_dtoa_r+0xb20>
 800d0e4:	9b03      	ldr	r3, [sp, #12]
 800d0e6:	9302      	str	r3, [sp, #8]
 800d0e8:	2d00      	cmp	r5, #0
 800d0ea:	dd05      	ble.n	800d0f8 <_dtoa_r+0x9a0>
 800d0ec:	4639      	mov	r1, r7
 800d0ee:	462a      	mov	r2, r5
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	f001 f813 	bl	800e11c <__lshift>
 800d0f6:	4607      	mov	r7, r0
 800d0f8:	f1b8 0f00 	cmp.w	r8, #0
 800d0fc:	d05b      	beq.n	800d1b6 <_dtoa_r+0xa5e>
 800d0fe:	6879      	ldr	r1, [r7, #4]
 800d100:	4620      	mov	r0, r4
 800d102:	f000 fdaf 	bl	800dc64 <_Balloc>
 800d106:	4605      	mov	r5, r0
 800d108:	b928      	cbnz	r0, 800d116 <_dtoa_r+0x9be>
 800d10a:	4b87      	ldr	r3, [pc, #540]	; (800d328 <_dtoa_r+0xbd0>)
 800d10c:	4602      	mov	r2, r0
 800d10e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d112:	f7ff bb3b 	b.w	800c78c <_dtoa_r+0x34>
 800d116:	693a      	ldr	r2, [r7, #16]
 800d118:	3202      	adds	r2, #2
 800d11a:	0092      	lsls	r2, r2, #2
 800d11c:	f107 010c 	add.w	r1, r7, #12
 800d120:	300c      	adds	r0, #12
 800d122:	f000 fd84 	bl	800dc2e <memcpy>
 800d126:	2201      	movs	r2, #1
 800d128:	4629      	mov	r1, r5
 800d12a:	4620      	mov	r0, r4
 800d12c:	f000 fff6 	bl	800e11c <__lshift>
 800d130:	9b01      	ldr	r3, [sp, #4]
 800d132:	f103 0901 	add.w	r9, r3, #1
 800d136:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d13a:	4413      	add	r3, r2
 800d13c:	9305      	str	r3, [sp, #20]
 800d13e:	f00a 0301 	and.w	r3, sl, #1
 800d142:	46b8      	mov	r8, r7
 800d144:	9304      	str	r3, [sp, #16]
 800d146:	4607      	mov	r7, r0
 800d148:	4631      	mov	r1, r6
 800d14a:	ee18 0a10 	vmov	r0, s16
 800d14e:	f7ff fa77 	bl	800c640 <quorem>
 800d152:	4641      	mov	r1, r8
 800d154:	9002      	str	r0, [sp, #8]
 800d156:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d15a:	ee18 0a10 	vmov	r0, s16
 800d15e:	f001 f84d 	bl	800e1fc <__mcmp>
 800d162:	463a      	mov	r2, r7
 800d164:	9003      	str	r0, [sp, #12]
 800d166:	4631      	mov	r1, r6
 800d168:	4620      	mov	r0, r4
 800d16a:	f001 f863 	bl	800e234 <__mdiff>
 800d16e:	68c2      	ldr	r2, [r0, #12]
 800d170:	f109 3bff 	add.w	fp, r9, #4294967295
 800d174:	4605      	mov	r5, r0
 800d176:	bb02      	cbnz	r2, 800d1ba <_dtoa_r+0xa62>
 800d178:	4601      	mov	r1, r0
 800d17a:	ee18 0a10 	vmov	r0, s16
 800d17e:	f001 f83d 	bl	800e1fc <__mcmp>
 800d182:	4602      	mov	r2, r0
 800d184:	4629      	mov	r1, r5
 800d186:	4620      	mov	r0, r4
 800d188:	9207      	str	r2, [sp, #28]
 800d18a:	f000 fdab 	bl	800dce4 <_Bfree>
 800d18e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d192:	ea43 0102 	orr.w	r1, r3, r2
 800d196:	9b04      	ldr	r3, [sp, #16]
 800d198:	430b      	orrs	r3, r1
 800d19a:	464d      	mov	r5, r9
 800d19c:	d10f      	bne.n	800d1be <_dtoa_r+0xa66>
 800d19e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d1a2:	d02a      	beq.n	800d1fa <_dtoa_r+0xaa2>
 800d1a4:	9b03      	ldr	r3, [sp, #12]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	dd02      	ble.n	800d1b0 <_dtoa_r+0xa58>
 800d1aa:	9b02      	ldr	r3, [sp, #8]
 800d1ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d1b0:	f88b a000 	strb.w	sl, [fp]
 800d1b4:	e775      	b.n	800d0a2 <_dtoa_r+0x94a>
 800d1b6:	4638      	mov	r0, r7
 800d1b8:	e7ba      	b.n	800d130 <_dtoa_r+0x9d8>
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	e7e2      	b.n	800d184 <_dtoa_r+0xa2c>
 800d1be:	9b03      	ldr	r3, [sp, #12]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	db04      	blt.n	800d1ce <_dtoa_r+0xa76>
 800d1c4:	9906      	ldr	r1, [sp, #24]
 800d1c6:	430b      	orrs	r3, r1
 800d1c8:	9904      	ldr	r1, [sp, #16]
 800d1ca:	430b      	orrs	r3, r1
 800d1cc:	d122      	bne.n	800d214 <_dtoa_r+0xabc>
 800d1ce:	2a00      	cmp	r2, #0
 800d1d0:	ddee      	ble.n	800d1b0 <_dtoa_r+0xa58>
 800d1d2:	ee18 1a10 	vmov	r1, s16
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	4620      	mov	r0, r4
 800d1da:	f000 ff9f 	bl	800e11c <__lshift>
 800d1de:	4631      	mov	r1, r6
 800d1e0:	ee08 0a10 	vmov	s16, r0
 800d1e4:	f001 f80a 	bl	800e1fc <__mcmp>
 800d1e8:	2800      	cmp	r0, #0
 800d1ea:	dc03      	bgt.n	800d1f4 <_dtoa_r+0xa9c>
 800d1ec:	d1e0      	bne.n	800d1b0 <_dtoa_r+0xa58>
 800d1ee:	f01a 0f01 	tst.w	sl, #1
 800d1f2:	d0dd      	beq.n	800d1b0 <_dtoa_r+0xa58>
 800d1f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d1f8:	d1d7      	bne.n	800d1aa <_dtoa_r+0xa52>
 800d1fa:	2339      	movs	r3, #57	; 0x39
 800d1fc:	f88b 3000 	strb.w	r3, [fp]
 800d200:	462b      	mov	r3, r5
 800d202:	461d      	mov	r5, r3
 800d204:	3b01      	subs	r3, #1
 800d206:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d20a:	2a39      	cmp	r2, #57	; 0x39
 800d20c:	d071      	beq.n	800d2f2 <_dtoa_r+0xb9a>
 800d20e:	3201      	adds	r2, #1
 800d210:	701a      	strb	r2, [r3, #0]
 800d212:	e746      	b.n	800d0a2 <_dtoa_r+0x94a>
 800d214:	2a00      	cmp	r2, #0
 800d216:	dd07      	ble.n	800d228 <_dtoa_r+0xad0>
 800d218:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d21c:	d0ed      	beq.n	800d1fa <_dtoa_r+0xaa2>
 800d21e:	f10a 0301 	add.w	r3, sl, #1
 800d222:	f88b 3000 	strb.w	r3, [fp]
 800d226:	e73c      	b.n	800d0a2 <_dtoa_r+0x94a>
 800d228:	9b05      	ldr	r3, [sp, #20]
 800d22a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d22e:	4599      	cmp	r9, r3
 800d230:	d047      	beq.n	800d2c2 <_dtoa_r+0xb6a>
 800d232:	ee18 1a10 	vmov	r1, s16
 800d236:	2300      	movs	r3, #0
 800d238:	220a      	movs	r2, #10
 800d23a:	4620      	mov	r0, r4
 800d23c:	f000 fd74 	bl	800dd28 <__multadd>
 800d240:	45b8      	cmp	r8, r7
 800d242:	ee08 0a10 	vmov	s16, r0
 800d246:	f04f 0300 	mov.w	r3, #0
 800d24a:	f04f 020a 	mov.w	r2, #10
 800d24e:	4641      	mov	r1, r8
 800d250:	4620      	mov	r0, r4
 800d252:	d106      	bne.n	800d262 <_dtoa_r+0xb0a>
 800d254:	f000 fd68 	bl	800dd28 <__multadd>
 800d258:	4680      	mov	r8, r0
 800d25a:	4607      	mov	r7, r0
 800d25c:	f109 0901 	add.w	r9, r9, #1
 800d260:	e772      	b.n	800d148 <_dtoa_r+0x9f0>
 800d262:	f000 fd61 	bl	800dd28 <__multadd>
 800d266:	4639      	mov	r1, r7
 800d268:	4680      	mov	r8, r0
 800d26a:	2300      	movs	r3, #0
 800d26c:	220a      	movs	r2, #10
 800d26e:	4620      	mov	r0, r4
 800d270:	f000 fd5a 	bl	800dd28 <__multadd>
 800d274:	4607      	mov	r7, r0
 800d276:	e7f1      	b.n	800d25c <_dtoa_r+0xb04>
 800d278:	9b03      	ldr	r3, [sp, #12]
 800d27a:	9302      	str	r3, [sp, #8]
 800d27c:	9d01      	ldr	r5, [sp, #4]
 800d27e:	ee18 0a10 	vmov	r0, s16
 800d282:	4631      	mov	r1, r6
 800d284:	f7ff f9dc 	bl	800c640 <quorem>
 800d288:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d28c:	9b01      	ldr	r3, [sp, #4]
 800d28e:	f805 ab01 	strb.w	sl, [r5], #1
 800d292:	1aea      	subs	r2, r5, r3
 800d294:	9b02      	ldr	r3, [sp, #8]
 800d296:	4293      	cmp	r3, r2
 800d298:	dd09      	ble.n	800d2ae <_dtoa_r+0xb56>
 800d29a:	ee18 1a10 	vmov	r1, s16
 800d29e:	2300      	movs	r3, #0
 800d2a0:	220a      	movs	r2, #10
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	f000 fd40 	bl	800dd28 <__multadd>
 800d2a8:	ee08 0a10 	vmov	s16, r0
 800d2ac:	e7e7      	b.n	800d27e <_dtoa_r+0xb26>
 800d2ae:	9b02      	ldr	r3, [sp, #8]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	bfc8      	it	gt
 800d2b4:	461d      	movgt	r5, r3
 800d2b6:	9b01      	ldr	r3, [sp, #4]
 800d2b8:	bfd8      	it	le
 800d2ba:	2501      	movle	r5, #1
 800d2bc:	441d      	add	r5, r3
 800d2be:	f04f 0800 	mov.w	r8, #0
 800d2c2:	ee18 1a10 	vmov	r1, s16
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	f000 ff27 	bl	800e11c <__lshift>
 800d2ce:	4631      	mov	r1, r6
 800d2d0:	ee08 0a10 	vmov	s16, r0
 800d2d4:	f000 ff92 	bl	800e1fc <__mcmp>
 800d2d8:	2800      	cmp	r0, #0
 800d2da:	dc91      	bgt.n	800d200 <_dtoa_r+0xaa8>
 800d2dc:	d102      	bne.n	800d2e4 <_dtoa_r+0xb8c>
 800d2de:	f01a 0f01 	tst.w	sl, #1
 800d2e2:	d18d      	bne.n	800d200 <_dtoa_r+0xaa8>
 800d2e4:	462b      	mov	r3, r5
 800d2e6:	461d      	mov	r5, r3
 800d2e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2ec:	2a30      	cmp	r2, #48	; 0x30
 800d2ee:	d0fa      	beq.n	800d2e6 <_dtoa_r+0xb8e>
 800d2f0:	e6d7      	b.n	800d0a2 <_dtoa_r+0x94a>
 800d2f2:	9a01      	ldr	r2, [sp, #4]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d184      	bne.n	800d202 <_dtoa_r+0xaaa>
 800d2f8:	9b00      	ldr	r3, [sp, #0]
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	9300      	str	r3, [sp, #0]
 800d2fe:	2331      	movs	r3, #49	; 0x31
 800d300:	7013      	strb	r3, [r2, #0]
 800d302:	e6ce      	b.n	800d0a2 <_dtoa_r+0x94a>
 800d304:	4b09      	ldr	r3, [pc, #36]	; (800d32c <_dtoa_r+0xbd4>)
 800d306:	f7ff ba95 	b.w	800c834 <_dtoa_r+0xdc>
 800d30a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f47f aa6e 	bne.w	800c7ee <_dtoa_r+0x96>
 800d312:	4b07      	ldr	r3, [pc, #28]	; (800d330 <_dtoa_r+0xbd8>)
 800d314:	f7ff ba8e 	b.w	800c834 <_dtoa_r+0xdc>
 800d318:	9b02      	ldr	r3, [sp, #8]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	dcae      	bgt.n	800d27c <_dtoa_r+0xb24>
 800d31e:	9b06      	ldr	r3, [sp, #24]
 800d320:	2b02      	cmp	r3, #2
 800d322:	f73f aea8 	bgt.w	800d076 <_dtoa_r+0x91e>
 800d326:	e7a9      	b.n	800d27c <_dtoa_r+0xb24>
 800d328:	0800fe88 	.word	0x0800fe88
 800d32c:	0800fc88 	.word	0x0800fc88
 800d330:	0800fe09 	.word	0x0800fe09

0800d334 <std>:
 800d334:	2300      	movs	r3, #0
 800d336:	b510      	push	{r4, lr}
 800d338:	4604      	mov	r4, r0
 800d33a:	e9c0 3300 	strd	r3, r3, [r0]
 800d33e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d342:	6083      	str	r3, [r0, #8]
 800d344:	8181      	strh	r1, [r0, #12]
 800d346:	6643      	str	r3, [r0, #100]	; 0x64
 800d348:	81c2      	strh	r2, [r0, #14]
 800d34a:	6183      	str	r3, [r0, #24]
 800d34c:	4619      	mov	r1, r3
 800d34e:	2208      	movs	r2, #8
 800d350:	305c      	adds	r0, #92	; 0x5c
 800d352:	f7fd fb19 	bl	800a988 <memset>
 800d356:	4b05      	ldr	r3, [pc, #20]	; (800d36c <std+0x38>)
 800d358:	6263      	str	r3, [r4, #36]	; 0x24
 800d35a:	4b05      	ldr	r3, [pc, #20]	; (800d370 <std+0x3c>)
 800d35c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d35e:	4b05      	ldr	r3, [pc, #20]	; (800d374 <std+0x40>)
 800d360:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d362:	4b05      	ldr	r3, [pc, #20]	; (800d378 <std+0x44>)
 800d364:	6224      	str	r4, [r4, #32]
 800d366:	6323      	str	r3, [r4, #48]	; 0x30
 800d368:	bd10      	pop	{r4, pc}
 800d36a:	bf00      	nop
 800d36c:	0800eb91 	.word	0x0800eb91
 800d370:	0800ebb3 	.word	0x0800ebb3
 800d374:	0800ebeb 	.word	0x0800ebeb
 800d378:	0800ec0f 	.word	0x0800ec0f

0800d37c <_cleanup_r>:
 800d37c:	4901      	ldr	r1, [pc, #4]	; (800d384 <_cleanup_r+0x8>)
 800d37e:	f000 b8af 	b.w	800d4e0 <_fwalk_reent>
 800d382:	bf00      	nop
 800d384:	0800ef69 	.word	0x0800ef69

0800d388 <__sfmoreglue>:
 800d388:	b570      	push	{r4, r5, r6, lr}
 800d38a:	2268      	movs	r2, #104	; 0x68
 800d38c:	1e4d      	subs	r5, r1, #1
 800d38e:	4355      	muls	r5, r2
 800d390:	460e      	mov	r6, r1
 800d392:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d396:	f7fd fb6b 	bl	800aa70 <_malloc_r>
 800d39a:	4604      	mov	r4, r0
 800d39c:	b140      	cbz	r0, 800d3b0 <__sfmoreglue+0x28>
 800d39e:	2100      	movs	r1, #0
 800d3a0:	e9c0 1600 	strd	r1, r6, [r0]
 800d3a4:	300c      	adds	r0, #12
 800d3a6:	60a0      	str	r0, [r4, #8]
 800d3a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d3ac:	f7fd faec 	bl	800a988 <memset>
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	bd70      	pop	{r4, r5, r6, pc}

0800d3b4 <__sfp_lock_acquire>:
 800d3b4:	4801      	ldr	r0, [pc, #4]	; (800d3bc <__sfp_lock_acquire+0x8>)
 800d3b6:	f000 bc26 	b.w	800dc06 <__retarget_lock_acquire_recursive>
 800d3ba:	bf00      	nop
 800d3bc:	2000110d 	.word	0x2000110d

0800d3c0 <__sfp_lock_release>:
 800d3c0:	4801      	ldr	r0, [pc, #4]	; (800d3c8 <__sfp_lock_release+0x8>)
 800d3c2:	f000 bc21 	b.w	800dc08 <__retarget_lock_release_recursive>
 800d3c6:	bf00      	nop
 800d3c8:	2000110d 	.word	0x2000110d

0800d3cc <__sinit_lock_acquire>:
 800d3cc:	4801      	ldr	r0, [pc, #4]	; (800d3d4 <__sinit_lock_acquire+0x8>)
 800d3ce:	f000 bc1a 	b.w	800dc06 <__retarget_lock_acquire_recursive>
 800d3d2:	bf00      	nop
 800d3d4:	2000110e 	.word	0x2000110e

0800d3d8 <__sinit_lock_release>:
 800d3d8:	4801      	ldr	r0, [pc, #4]	; (800d3e0 <__sinit_lock_release+0x8>)
 800d3da:	f000 bc15 	b.w	800dc08 <__retarget_lock_release_recursive>
 800d3de:	bf00      	nop
 800d3e0:	2000110e 	.word	0x2000110e

0800d3e4 <__sinit>:
 800d3e4:	b510      	push	{r4, lr}
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	f7ff fff0 	bl	800d3cc <__sinit_lock_acquire>
 800d3ec:	69a3      	ldr	r3, [r4, #24]
 800d3ee:	b11b      	cbz	r3, 800d3f8 <__sinit+0x14>
 800d3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3f4:	f7ff bff0 	b.w	800d3d8 <__sinit_lock_release>
 800d3f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d3fc:	6523      	str	r3, [r4, #80]	; 0x50
 800d3fe:	4b13      	ldr	r3, [pc, #76]	; (800d44c <__sinit+0x68>)
 800d400:	4a13      	ldr	r2, [pc, #76]	; (800d450 <__sinit+0x6c>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	62a2      	str	r2, [r4, #40]	; 0x28
 800d406:	42a3      	cmp	r3, r4
 800d408:	bf04      	itt	eq
 800d40a:	2301      	moveq	r3, #1
 800d40c:	61a3      	streq	r3, [r4, #24]
 800d40e:	4620      	mov	r0, r4
 800d410:	f000 f820 	bl	800d454 <__sfp>
 800d414:	6060      	str	r0, [r4, #4]
 800d416:	4620      	mov	r0, r4
 800d418:	f000 f81c 	bl	800d454 <__sfp>
 800d41c:	60a0      	str	r0, [r4, #8]
 800d41e:	4620      	mov	r0, r4
 800d420:	f000 f818 	bl	800d454 <__sfp>
 800d424:	2200      	movs	r2, #0
 800d426:	60e0      	str	r0, [r4, #12]
 800d428:	2104      	movs	r1, #4
 800d42a:	6860      	ldr	r0, [r4, #4]
 800d42c:	f7ff ff82 	bl	800d334 <std>
 800d430:	68a0      	ldr	r0, [r4, #8]
 800d432:	2201      	movs	r2, #1
 800d434:	2109      	movs	r1, #9
 800d436:	f7ff ff7d 	bl	800d334 <std>
 800d43a:	68e0      	ldr	r0, [r4, #12]
 800d43c:	2202      	movs	r2, #2
 800d43e:	2112      	movs	r1, #18
 800d440:	f7ff ff78 	bl	800d334 <std>
 800d444:	2301      	movs	r3, #1
 800d446:	61a3      	str	r3, [r4, #24]
 800d448:	e7d2      	b.n	800d3f0 <__sinit+0xc>
 800d44a:	bf00      	nop
 800d44c:	0800fc74 	.word	0x0800fc74
 800d450:	0800d37d 	.word	0x0800d37d

0800d454 <__sfp>:
 800d454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d456:	4607      	mov	r7, r0
 800d458:	f7ff ffac 	bl	800d3b4 <__sfp_lock_acquire>
 800d45c:	4b1e      	ldr	r3, [pc, #120]	; (800d4d8 <__sfp+0x84>)
 800d45e:	681e      	ldr	r6, [r3, #0]
 800d460:	69b3      	ldr	r3, [r6, #24]
 800d462:	b913      	cbnz	r3, 800d46a <__sfp+0x16>
 800d464:	4630      	mov	r0, r6
 800d466:	f7ff ffbd 	bl	800d3e4 <__sinit>
 800d46a:	3648      	adds	r6, #72	; 0x48
 800d46c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d470:	3b01      	subs	r3, #1
 800d472:	d503      	bpl.n	800d47c <__sfp+0x28>
 800d474:	6833      	ldr	r3, [r6, #0]
 800d476:	b30b      	cbz	r3, 800d4bc <__sfp+0x68>
 800d478:	6836      	ldr	r6, [r6, #0]
 800d47a:	e7f7      	b.n	800d46c <__sfp+0x18>
 800d47c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d480:	b9d5      	cbnz	r5, 800d4b8 <__sfp+0x64>
 800d482:	4b16      	ldr	r3, [pc, #88]	; (800d4dc <__sfp+0x88>)
 800d484:	60e3      	str	r3, [r4, #12]
 800d486:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d48a:	6665      	str	r5, [r4, #100]	; 0x64
 800d48c:	f000 fbba 	bl	800dc04 <__retarget_lock_init_recursive>
 800d490:	f7ff ff96 	bl	800d3c0 <__sfp_lock_release>
 800d494:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d498:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d49c:	6025      	str	r5, [r4, #0]
 800d49e:	61a5      	str	r5, [r4, #24]
 800d4a0:	2208      	movs	r2, #8
 800d4a2:	4629      	mov	r1, r5
 800d4a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d4a8:	f7fd fa6e 	bl	800a988 <memset>
 800d4ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d4b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4b8:	3468      	adds	r4, #104	; 0x68
 800d4ba:	e7d9      	b.n	800d470 <__sfp+0x1c>
 800d4bc:	2104      	movs	r1, #4
 800d4be:	4638      	mov	r0, r7
 800d4c0:	f7ff ff62 	bl	800d388 <__sfmoreglue>
 800d4c4:	4604      	mov	r4, r0
 800d4c6:	6030      	str	r0, [r6, #0]
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	d1d5      	bne.n	800d478 <__sfp+0x24>
 800d4cc:	f7ff ff78 	bl	800d3c0 <__sfp_lock_release>
 800d4d0:	230c      	movs	r3, #12
 800d4d2:	603b      	str	r3, [r7, #0]
 800d4d4:	e7ee      	b.n	800d4b4 <__sfp+0x60>
 800d4d6:	bf00      	nop
 800d4d8:	0800fc74 	.word	0x0800fc74
 800d4dc:	ffff0001 	.word	0xffff0001

0800d4e0 <_fwalk_reent>:
 800d4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4e4:	4606      	mov	r6, r0
 800d4e6:	4688      	mov	r8, r1
 800d4e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d4ec:	2700      	movs	r7, #0
 800d4ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d4f2:	f1b9 0901 	subs.w	r9, r9, #1
 800d4f6:	d505      	bpl.n	800d504 <_fwalk_reent+0x24>
 800d4f8:	6824      	ldr	r4, [r4, #0]
 800d4fa:	2c00      	cmp	r4, #0
 800d4fc:	d1f7      	bne.n	800d4ee <_fwalk_reent+0xe>
 800d4fe:	4638      	mov	r0, r7
 800d500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d504:	89ab      	ldrh	r3, [r5, #12]
 800d506:	2b01      	cmp	r3, #1
 800d508:	d907      	bls.n	800d51a <_fwalk_reent+0x3a>
 800d50a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d50e:	3301      	adds	r3, #1
 800d510:	d003      	beq.n	800d51a <_fwalk_reent+0x3a>
 800d512:	4629      	mov	r1, r5
 800d514:	4630      	mov	r0, r6
 800d516:	47c0      	blx	r8
 800d518:	4307      	orrs	r7, r0
 800d51a:	3568      	adds	r5, #104	; 0x68
 800d51c:	e7e9      	b.n	800d4f2 <_fwalk_reent+0x12>

0800d51e <rshift>:
 800d51e:	6903      	ldr	r3, [r0, #16]
 800d520:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d528:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d52c:	f100 0414 	add.w	r4, r0, #20
 800d530:	dd45      	ble.n	800d5be <rshift+0xa0>
 800d532:	f011 011f 	ands.w	r1, r1, #31
 800d536:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d53a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d53e:	d10c      	bne.n	800d55a <rshift+0x3c>
 800d540:	f100 0710 	add.w	r7, r0, #16
 800d544:	4629      	mov	r1, r5
 800d546:	42b1      	cmp	r1, r6
 800d548:	d334      	bcc.n	800d5b4 <rshift+0x96>
 800d54a:	1a9b      	subs	r3, r3, r2
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	1eea      	subs	r2, r5, #3
 800d550:	4296      	cmp	r6, r2
 800d552:	bf38      	it	cc
 800d554:	2300      	movcc	r3, #0
 800d556:	4423      	add	r3, r4
 800d558:	e015      	b.n	800d586 <rshift+0x68>
 800d55a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d55e:	f1c1 0820 	rsb	r8, r1, #32
 800d562:	40cf      	lsrs	r7, r1
 800d564:	f105 0e04 	add.w	lr, r5, #4
 800d568:	46a1      	mov	r9, r4
 800d56a:	4576      	cmp	r6, lr
 800d56c:	46f4      	mov	ip, lr
 800d56e:	d815      	bhi.n	800d59c <rshift+0x7e>
 800d570:	1a9a      	subs	r2, r3, r2
 800d572:	0092      	lsls	r2, r2, #2
 800d574:	3a04      	subs	r2, #4
 800d576:	3501      	adds	r5, #1
 800d578:	42ae      	cmp	r6, r5
 800d57a:	bf38      	it	cc
 800d57c:	2200      	movcc	r2, #0
 800d57e:	18a3      	adds	r3, r4, r2
 800d580:	50a7      	str	r7, [r4, r2]
 800d582:	b107      	cbz	r7, 800d586 <rshift+0x68>
 800d584:	3304      	adds	r3, #4
 800d586:	1b1a      	subs	r2, r3, r4
 800d588:	42a3      	cmp	r3, r4
 800d58a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d58e:	bf08      	it	eq
 800d590:	2300      	moveq	r3, #0
 800d592:	6102      	str	r2, [r0, #16]
 800d594:	bf08      	it	eq
 800d596:	6143      	streq	r3, [r0, #20]
 800d598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d59c:	f8dc c000 	ldr.w	ip, [ip]
 800d5a0:	fa0c fc08 	lsl.w	ip, ip, r8
 800d5a4:	ea4c 0707 	orr.w	r7, ip, r7
 800d5a8:	f849 7b04 	str.w	r7, [r9], #4
 800d5ac:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d5b0:	40cf      	lsrs	r7, r1
 800d5b2:	e7da      	b.n	800d56a <rshift+0x4c>
 800d5b4:	f851 cb04 	ldr.w	ip, [r1], #4
 800d5b8:	f847 cf04 	str.w	ip, [r7, #4]!
 800d5bc:	e7c3      	b.n	800d546 <rshift+0x28>
 800d5be:	4623      	mov	r3, r4
 800d5c0:	e7e1      	b.n	800d586 <rshift+0x68>

0800d5c2 <__hexdig_fun>:
 800d5c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d5c6:	2b09      	cmp	r3, #9
 800d5c8:	d802      	bhi.n	800d5d0 <__hexdig_fun+0xe>
 800d5ca:	3820      	subs	r0, #32
 800d5cc:	b2c0      	uxtb	r0, r0
 800d5ce:	4770      	bx	lr
 800d5d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d5d4:	2b05      	cmp	r3, #5
 800d5d6:	d801      	bhi.n	800d5dc <__hexdig_fun+0x1a>
 800d5d8:	3847      	subs	r0, #71	; 0x47
 800d5da:	e7f7      	b.n	800d5cc <__hexdig_fun+0xa>
 800d5dc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d5e0:	2b05      	cmp	r3, #5
 800d5e2:	d801      	bhi.n	800d5e8 <__hexdig_fun+0x26>
 800d5e4:	3827      	subs	r0, #39	; 0x27
 800d5e6:	e7f1      	b.n	800d5cc <__hexdig_fun+0xa>
 800d5e8:	2000      	movs	r0, #0
 800d5ea:	4770      	bx	lr

0800d5ec <__gethex>:
 800d5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f0:	ed2d 8b02 	vpush	{d8}
 800d5f4:	b089      	sub	sp, #36	; 0x24
 800d5f6:	ee08 0a10 	vmov	s16, r0
 800d5fa:	9304      	str	r3, [sp, #16]
 800d5fc:	4bb4      	ldr	r3, [pc, #720]	; (800d8d0 <__gethex+0x2e4>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	9301      	str	r3, [sp, #4]
 800d602:	4618      	mov	r0, r3
 800d604:	468b      	mov	fp, r1
 800d606:	4690      	mov	r8, r2
 800d608:	f7f2 fdf2 	bl	80001f0 <strlen>
 800d60c:	9b01      	ldr	r3, [sp, #4]
 800d60e:	f8db 2000 	ldr.w	r2, [fp]
 800d612:	4403      	add	r3, r0
 800d614:	4682      	mov	sl, r0
 800d616:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d61a:	9305      	str	r3, [sp, #20]
 800d61c:	1c93      	adds	r3, r2, #2
 800d61e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d622:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d626:	32fe      	adds	r2, #254	; 0xfe
 800d628:	18d1      	adds	r1, r2, r3
 800d62a:	461f      	mov	r7, r3
 800d62c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d630:	9100      	str	r1, [sp, #0]
 800d632:	2830      	cmp	r0, #48	; 0x30
 800d634:	d0f8      	beq.n	800d628 <__gethex+0x3c>
 800d636:	f7ff ffc4 	bl	800d5c2 <__hexdig_fun>
 800d63a:	4604      	mov	r4, r0
 800d63c:	2800      	cmp	r0, #0
 800d63e:	d13a      	bne.n	800d6b6 <__gethex+0xca>
 800d640:	9901      	ldr	r1, [sp, #4]
 800d642:	4652      	mov	r2, sl
 800d644:	4638      	mov	r0, r7
 800d646:	f001 fae6 	bl	800ec16 <strncmp>
 800d64a:	4605      	mov	r5, r0
 800d64c:	2800      	cmp	r0, #0
 800d64e:	d168      	bne.n	800d722 <__gethex+0x136>
 800d650:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d654:	eb07 060a 	add.w	r6, r7, sl
 800d658:	f7ff ffb3 	bl	800d5c2 <__hexdig_fun>
 800d65c:	2800      	cmp	r0, #0
 800d65e:	d062      	beq.n	800d726 <__gethex+0x13a>
 800d660:	4633      	mov	r3, r6
 800d662:	7818      	ldrb	r0, [r3, #0]
 800d664:	2830      	cmp	r0, #48	; 0x30
 800d666:	461f      	mov	r7, r3
 800d668:	f103 0301 	add.w	r3, r3, #1
 800d66c:	d0f9      	beq.n	800d662 <__gethex+0x76>
 800d66e:	f7ff ffa8 	bl	800d5c2 <__hexdig_fun>
 800d672:	2301      	movs	r3, #1
 800d674:	fab0 f480 	clz	r4, r0
 800d678:	0964      	lsrs	r4, r4, #5
 800d67a:	4635      	mov	r5, r6
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	463a      	mov	r2, r7
 800d680:	4616      	mov	r6, r2
 800d682:	3201      	adds	r2, #1
 800d684:	7830      	ldrb	r0, [r6, #0]
 800d686:	f7ff ff9c 	bl	800d5c2 <__hexdig_fun>
 800d68a:	2800      	cmp	r0, #0
 800d68c:	d1f8      	bne.n	800d680 <__gethex+0x94>
 800d68e:	9901      	ldr	r1, [sp, #4]
 800d690:	4652      	mov	r2, sl
 800d692:	4630      	mov	r0, r6
 800d694:	f001 fabf 	bl	800ec16 <strncmp>
 800d698:	b980      	cbnz	r0, 800d6bc <__gethex+0xd0>
 800d69a:	b94d      	cbnz	r5, 800d6b0 <__gethex+0xc4>
 800d69c:	eb06 050a 	add.w	r5, r6, sl
 800d6a0:	462a      	mov	r2, r5
 800d6a2:	4616      	mov	r6, r2
 800d6a4:	3201      	adds	r2, #1
 800d6a6:	7830      	ldrb	r0, [r6, #0]
 800d6a8:	f7ff ff8b 	bl	800d5c2 <__hexdig_fun>
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	d1f8      	bne.n	800d6a2 <__gethex+0xb6>
 800d6b0:	1bad      	subs	r5, r5, r6
 800d6b2:	00ad      	lsls	r5, r5, #2
 800d6b4:	e004      	b.n	800d6c0 <__gethex+0xd4>
 800d6b6:	2400      	movs	r4, #0
 800d6b8:	4625      	mov	r5, r4
 800d6ba:	e7e0      	b.n	800d67e <__gethex+0x92>
 800d6bc:	2d00      	cmp	r5, #0
 800d6be:	d1f7      	bne.n	800d6b0 <__gethex+0xc4>
 800d6c0:	7833      	ldrb	r3, [r6, #0]
 800d6c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d6c6:	2b50      	cmp	r3, #80	; 0x50
 800d6c8:	d13b      	bne.n	800d742 <__gethex+0x156>
 800d6ca:	7873      	ldrb	r3, [r6, #1]
 800d6cc:	2b2b      	cmp	r3, #43	; 0x2b
 800d6ce:	d02c      	beq.n	800d72a <__gethex+0x13e>
 800d6d0:	2b2d      	cmp	r3, #45	; 0x2d
 800d6d2:	d02e      	beq.n	800d732 <__gethex+0x146>
 800d6d4:	1c71      	adds	r1, r6, #1
 800d6d6:	f04f 0900 	mov.w	r9, #0
 800d6da:	7808      	ldrb	r0, [r1, #0]
 800d6dc:	f7ff ff71 	bl	800d5c2 <__hexdig_fun>
 800d6e0:	1e43      	subs	r3, r0, #1
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	2b18      	cmp	r3, #24
 800d6e6:	d82c      	bhi.n	800d742 <__gethex+0x156>
 800d6e8:	f1a0 0210 	sub.w	r2, r0, #16
 800d6ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d6f0:	f7ff ff67 	bl	800d5c2 <__hexdig_fun>
 800d6f4:	1e43      	subs	r3, r0, #1
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	2b18      	cmp	r3, #24
 800d6fa:	d91d      	bls.n	800d738 <__gethex+0x14c>
 800d6fc:	f1b9 0f00 	cmp.w	r9, #0
 800d700:	d000      	beq.n	800d704 <__gethex+0x118>
 800d702:	4252      	negs	r2, r2
 800d704:	4415      	add	r5, r2
 800d706:	f8cb 1000 	str.w	r1, [fp]
 800d70a:	b1e4      	cbz	r4, 800d746 <__gethex+0x15a>
 800d70c:	9b00      	ldr	r3, [sp, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	bf14      	ite	ne
 800d712:	2700      	movne	r7, #0
 800d714:	2706      	moveq	r7, #6
 800d716:	4638      	mov	r0, r7
 800d718:	b009      	add	sp, #36	; 0x24
 800d71a:	ecbd 8b02 	vpop	{d8}
 800d71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d722:	463e      	mov	r6, r7
 800d724:	4625      	mov	r5, r4
 800d726:	2401      	movs	r4, #1
 800d728:	e7ca      	b.n	800d6c0 <__gethex+0xd4>
 800d72a:	f04f 0900 	mov.w	r9, #0
 800d72e:	1cb1      	adds	r1, r6, #2
 800d730:	e7d3      	b.n	800d6da <__gethex+0xee>
 800d732:	f04f 0901 	mov.w	r9, #1
 800d736:	e7fa      	b.n	800d72e <__gethex+0x142>
 800d738:	230a      	movs	r3, #10
 800d73a:	fb03 0202 	mla	r2, r3, r2, r0
 800d73e:	3a10      	subs	r2, #16
 800d740:	e7d4      	b.n	800d6ec <__gethex+0x100>
 800d742:	4631      	mov	r1, r6
 800d744:	e7df      	b.n	800d706 <__gethex+0x11a>
 800d746:	1bf3      	subs	r3, r6, r7
 800d748:	3b01      	subs	r3, #1
 800d74a:	4621      	mov	r1, r4
 800d74c:	2b07      	cmp	r3, #7
 800d74e:	dc0b      	bgt.n	800d768 <__gethex+0x17c>
 800d750:	ee18 0a10 	vmov	r0, s16
 800d754:	f000 fa86 	bl	800dc64 <_Balloc>
 800d758:	4604      	mov	r4, r0
 800d75a:	b940      	cbnz	r0, 800d76e <__gethex+0x182>
 800d75c:	4b5d      	ldr	r3, [pc, #372]	; (800d8d4 <__gethex+0x2e8>)
 800d75e:	4602      	mov	r2, r0
 800d760:	21de      	movs	r1, #222	; 0xde
 800d762:	485d      	ldr	r0, [pc, #372]	; (800d8d8 <__gethex+0x2ec>)
 800d764:	f001 fb4c 	bl	800ee00 <__assert_func>
 800d768:	3101      	adds	r1, #1
 800d76a:	105b      	asrs	r3, r3, #1
 800d76c:	e7ee      	b.n	800d74c <__gethex+0x160>
 800d76e:	f100 0914 	add.w	r9, r0, #20
 800d772:	f04f 0b00 	mov.w	fp, #0
 800d776:	f1ca 0301 	rsb	r3, sl, #1
 800d77a:	f8cd 9008 	str.w	r9, [sp, #8]
 800d77e:	f8cd b000 	str.w	fp, [sp]
 800d782:	9306      	str	r3, [sp, #24]
 800d784:	42b7      	cmp	r7, r6
 800d786:	d340      	bcc.n	800d80a <__gethex+0x21e>
 800d788:	9802      	ldr	r0, [sp, #8]
 800d78a:	9b00      	ldr	r3, [sp, #0]
 800d78c:	f840 3b04 	str.w	r3, [r0], #4
 800d790:	eba0 0009 	sub.w	r0, r0, r9
 800d794:	1080      	asrs	r0, r0, #2
 800d796:	0146      	lsls	r6, r0, #5
 800d798:	6120      	str	r0, [r4, #16]
 800d79a:	4618      	mov	r0, r3
 800d79c:	f000 fb54 	bl	800de48 <__hi0bits>
 800d7a0:	1a30      	subs	r0, r6, r0
 800d7a2:	f8d8 6000 	ldr.w	r6, [r8]
 800d7a6:	42b0      	cmp	r0, r6
 800d7a8:	dd63      	ble.n	800d872 <__gethex+0x286>
 800d7aa:	1b87      	subs	r7, r0, r6
 800d7ac:	4639      	mov	r1, r7
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	f000 fef8 	bl	800e5a4 <__any_on>
 800d7b4:	4682      	mov	sl, r0
 800d7b6:	b1a8      	cbz	r0, 800d7e4 <__gethex+0x1f8>
 800d7b8:	1e7b      	subs	r3, r7, #1
 800d7ba:	1159      	asrs	r1, r3, #5
 800d7bc:	f003 021f 	and.w	r2, r3, #31
 800d7c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d7c4:	f04f 0a01 	mov.w	sl, #1
 800d7c8:	fa0a f202 	lsl.w	r2, sl, r2
 800d7cc:	420a      	tst	r2, r1
 800d7ce:	d009      	beq.n	800d7e4 <__gethex+0x1f8>
 800d7d0:	4553      	cmp	r3, sl
 800d7d2:	dd05      	ble.n	800d7e0 <__gethex+0x1f4>
 800d7d4:	1eb9      	subs	r1, r7, #2
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	f000 fee4 	bl	800e5a4 <__any_on>
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	d145      	bne.n	800d86c <__gethex+0x280>
 800d7e0:	f04f 0a02 	mov.w	sl, #2
 800d7e4:	4639      	mov	r1, r7
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	f7ff fe99 	bl	800d51e <rshift>
 800d7ec:	443d      	add	r5, r7
 800d7ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d7f2:	42ab      	cmp	r3, r5
 800d7f4:	da4c      	bge.n	800d890 <__gethex+0x2a4>
 800d7f6:	ee18 0a10 	vmov	r0, s16
 800d7fa:	4621      	mov	r1, r4
 800d7fc:	f000 fa72 	bl	800dce4 <_Bfree>
 800d800:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d802:	2300      	movs	r3, #0
 800d804:	6013      	str	r3, [r2, #0]
 800d806:	27a3      	movs	r7, #163	; 0xa3
 800d808:	e785      	b.n	800d716 <__gethex+0x12a>
 800d80a:	1e73      	subs	r3, r6, #1
 800d80c:	9a05      	ldr	r2, [sp, #20]
 800d80e:	9303      	str	r3, [sp, #12]
 800d810:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d814:	4293      	cmp	r3, r2
 800d816:	d019      	beq.n	800d84c <__gethex+0x260>
 800d818:	f1bb 0f20 	cmp.w	fp, #32
 800d81c:	d107      	bne.n	800d82e <__gethex+0x242>
 800d81e:	9b02      	ldr	r3, [sp, #8]
 800d820:	9a00      	ldr	r2, [sp, #0]
 800d822:	f843 2b04 	str.w	r2, [r3], #4
 800d826:	9302      	str	r3, [sp, #8]
 800d828:	2300      	movs	r3, #0
 800d82a:	9300      	str	r3, [sp, #0]
 800d82c:	469b      	mov	fp, r3
 800d82e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d832:	f7ff fec6 	bl	800d5c2 <__hexdig_fun>
 800d836:	9b00      	ldr	r3, [sp, #0]
 800d838:	f000 000f 	and.w	r0, r0, #15
 800d83c:	fa00 f00b 	lsl.w	r0, r0, fp
 800d840:	4303      	orrs	r3, r0
 800d842:	9300      	str	r3, [sp, #0]
 800d844:	f10b 0b04 	add.w	fp, fp, #4
 800d848:	9b03      	ldr	r3, [sp, #12]
 800d84a:	e00d      	b.n	800d868 <__gethex+0x27c>
 800d84c:	9b03      	ldr	r3, [sp, #12]
 800d84e:	9a06      	ldr	r2, [sp, #24]
 800d850:	4413      	add	r3, r2
 800d852:	42bb      	cmp	r3, r7
 800d854:	d3e0      	bcc.n	800d818 <__gethex+0x22c>
 800d856:	4618      	mov	r0, r3
 800d858:	9901      	ldr	r1, [sp, #4]
 800d85a:	9307      	str	r3, [sp, #28]
 800d85c:	4652      	mov	r2, sl
 800d85e:	f001 f9da 	bl	800ec16 <strncmp>
 800d862:	9b07      	ldr	r3, [sp, #28]
 800d864:	2800      	cmp	r0, #0
 800d866:	d1d7      	bne.n	800d818 <__gethex+0x22c>
 800d868:	461e      	mov	r6, r3
 800d86a:	e78b      	b.n	800d784 <__gethex+0x198>
 800d86c:	f04f 0a03 	mov.w	sl, #3
 800d870:	e7b8      	b.n	800d7e4 <__gethex+0x1f8>
 800d872:	da0a      	bge.n	800d88a <__gethex+0x29e>
 800d874:	1a37      	subs	r7, r6, r0
 800d876:	4621      	mov	r1, r4
 800d878:	ee18 0a10 	vmov	r0, s16
 800d87c:	463a      	mov	r2, r7
 800d87e:	f000 fc4d 	bl	800e11c <__lshift>
 800d882:	1bed      	subs	r5, r5, r7
 800d884:	4604      	mov	r4, r0
 800d886:	f100 0914 	add.w	r9, r0, #20
 800d88a:	f04f 0a00 	mov.w	sl, #0
 800d88e:	e7ae      	b.n	800d7ee <__gethex+0x202>
 800d890:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d894:	42a8      	cmp	r0, r5
 800d896:	dd72      	ble.n	800d97e <__gethex+0x392>
 800d898:	1b45      	subs	r5, r0, r5
 800d89a:	42ae      	cmp	r6, r5
 800d89c:	dc36      	bgt.n	800d90c <__gethex+0x320>
 800d89e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d8a2:	2b02      	cmp	r3, #2
 800d8a4:	d02a      	beq.n	800d8fc <__gethex+0x310>
 800d8a6:	2b03      	cmp	r3, #3
 800d8a8:	d02c      	beq.n	800d904 <__gethex+0x318>
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d11c      	bne.n	800d8e8 <__gethex+0x2fc>
 800d8ae:	42ae      	cmp	r6, r5
 800d8b0:	d11a      	bne.n	800d8e8 <__gethex+0x2fc>
 800d8b2:	2e01      	cmp	r6, #1
 800d8b4:	d112      	bne.n	800d8dc <__gethex+0x2f0>
 800d8b6:	9a04      	ldr	r2, [sp, #16]
 800d8b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d8bc:	6013      	str	r3, [r2, #0]
 800d8be:	2301      	movs	r3, #1
 800d8c0:	6123      	str	r3, [r4, #16]
 800d8c2:	f8c9 3000 	str.w	r3, [r9]
 800d8c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d8c8:	2762      	movs	r7, #98	; 0x62
 800d8ca:	601c      	str	r4, [r3, #0]
 800d8cc:	e723      	b.n	800d716 <__gethex+0x12a>
 800d8ce:	bf00      	nop
 800d8d0:	0800ff64 	.word	0x0800ff64
 800d8d4:	0800fe88 	.word	0x0800fe88
 800d8d8:	0800fefc 	.word	0x0800fefc
 800d8dc:	1e71      	subs	r1, r6, #1
 800d8de:	4620      	mov	r0, r4
 800d8e0:	f000 fe60 	bl	800e5a4 <__any_on>
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	d1e6      	bne.n	800d8b6 <__gethex+0x2ca>
 800d8e8:	ee18 0a10 	vmov	r0, s16
 800d8ec:	4621      	mov	r1, r4
 800d8ee:	f000 f9f9 	bl	800dce4 <_Bfree>
 800d8f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	6013      	str	r3, [r2, #0]
 800d8f8:	2750      	movs	r7, #80	; 0x50
 800d8fa:	e70c      	b.n	800d716 <__gethex+0x12a>
 800d8fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d1f2      	bne.n	800d8e8 <__gethex+0x2fc>
 800d902:	e7d8      	b.n	800d8b6 <__gethex+0x2ca>
 800d904:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d906:	2b00      	cmp	r3, #0
 800d908:	d1d5      	bne.n	800d8b6 <__gethex+0x2ca>
 800d90a:	e7ed      	b.n	800d8e8 <__gethex+0x2fc>
 800d90c:	1e6f      	subs	r7, r5, #1
 800d90e:	f1ba 0f00 	cmp.w	sl, #0
 800d912:	d131      	bne.n	800d978 <__gethex+0x38c>
 800d914:	b127      	cbz	r7, 800d920 <__gethex+0x334>
 800d916:	4639      	mov	r1, r7
 800d918:	4620      	mov	r0, r4
 800d91a:	f000 fe43 	bl	800e5a4 <__any_on>
 800d91e:	4682      	mov	sl, r0
 800d920:	117b      	asrs	r3, r7, #5
 800d922:	2101      	movs	r1, #1
 800d924:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d928:	f007 071f 	and.w	r7, r7, #31
 800d92c:	fa01 f707 	lsl.w	r7, r1, r7
 800d930:	421f      	tst	r7, r3
 800d932:	4629      	mov	r1, r5
 800d934:	4620      	mov	r0, r4
 800d936:	bf18      	it	ne
 800d938:	f04a 0a02 	orrne.w	sl, sl, #2
 800d93c:	1b76      	subs	r6, r6, r5
 800d93e:	f7ff fdee 	bl	800d51e <rshift>
 800d942:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d946:	2702      	movs	r7, #2
 800d948:	f1ba 0f00 	cmp.w	sl, #0
 800d94c:	d048      	beq.n	800d9e0 <__gethex+0x3f4>
 800d94e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d952:	2b02      	cmp	r3, #2
 800d954:	d015      	beq.n	800d982 <__gethex+0x396>
 800d956:	2b03      	cmp	r3, #3
 800d958:	d017      	beq.n	800d98a <__gethex+0x39e>
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d109      	bne.n	800d972 <__gethex+0x386>
 800d95e:	f01a 0f02 	tst.w	sl, #2
 800d962:	d006      	beq.n	800d972 <__gethex+0x386>
 800d964:	f8d9 0000 	ldr.w	r0, [r9]
 800d968:	ea4a 0a00 	orr.w	sl, sl, r0
 800d96c:	f01a 0f01 	tst.w	sl, #1
 800d970:	d10e      	bne.n	800d990 <__gethex+0x3a4>
 800d972:	f047 0710 	orr.w	r7, r7, #16
 800d976:	e033      	b.n	800d9e0 <__gethex+0x3f4>
 800d978:	f04f 0a01 	mov.w	sl, #1
 800d97c:	e7d0      	b.n	800d920 <__gethex+0x334>
 800d97e:	2701      	movs	r7, #1
 800d980:	e7e2      	b.n	800d948 <__gethex+0x35c>
 800d982:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d984:	f1c3 0301 	rsb	r3, r3, #1
 800d988:	9315      	str	r3, [sp, #84]	; 0x54
 800d98a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d0f0      	beq.n	800d972 <__gethex+0x386>
 800d990:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d994:	f104 0314 	add.w	r3, r4, #20
 800d998:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d99c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d9a0:	f04f 0c00 	mov.w	ip, #0
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9aa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d9ae:	d01c      	beq.n	800d9ea <__gethex+0x3fe>
 800d9b0:	3201      	adds	r2, #1
 800d9b2:	6002      	str	r2, [r0, #0]
 800d9b4:	2f02      	cmp	r7, #2
 800d9b6:	f104 0314 	add.w	r3, r4, #20
 800d9ba:	d13f      	bne.n	800da3c <__gethex+0x450>
 800d9bc:	f8d8 2000 	ldr.w	r2, [r8]
 800d9c0:	3a01      	subs	r2, #1
 800d9c2:	42b2      	cmp	r2, r6
 800d9c4:	d10a      	bne.n	800d9dc <__gethex+0x3f0>
 800d9c6:	1171      	asrs	r1, r6, #5
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d9ce:	f006 061f 	and.w	r6, r6, #31
 800d9d2:	fa02 f606 	lsl.w	r6, r2, r6
 800d9d6:	421e      	tst	r6, r3
 800d9d8:	bf18      	it	ne
 800d9da:	4617      	movne	r7, r2
 800d9dc:	f047 0720 	orr.w	r7, r7, #32
 800d9e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d9e2:	601c      	str	r4, [r3, #0]
 800d9e4:	9b04      	ldr	r3, [sp, #16]
 800d9e6:	601d      	str	r5, [r3, #0]
 800d9e8:	e695      	b.n	800d716 <__gethex+0x12a>
 800d9ea:	4299      	cmp	r1, r3
 800d9ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800d9f0:	d8d8      	bhi.n	800d9a4 <__gethex+0x3b8>
 800d9f2:	68a3      	ldr	r3, [r4, #8]
 800d9f4:	459b      	cmp	fp, r3
 800d9f6:	db19      	blt.n	800da2c <__gethex+0x440>
 800d9f8:	6861      	ldr	r1, [r4, #4]
 800d9fa:	ee18 0a10 	vmov	r0, s16
 800d9fe:	3101      	adds	r1, #1
 800da00:	f000 f930 	bl	800dc64 <_Balloc>
 800da04:	4681      	mov	r9, r0
 800da06:	b918      	cbnz	r0, 800da10 <__gethex+0x424>
 800da08:	4b1a      	ldr	r3, [pc, #104]	; (800da74 <__gethex+0x488>)
 800da0a:	4602      	mov	r2, r0
 800da0c:	2184      	movs	r1, #132	; 0x84
 800da0e:	e6a8      	b.n	800d762 <__gethex+0x176>
 800da10:	6922      	ldr	r2, [r4, #16]
 800da12:	3202      	adds	r2, #2
 800da14:	f104 010c 	add.w	r1, r4, #12
 800da18:	0092      	lsls	r2, r2, #2
 800da1a:	300c      	adds	r0, #12
 800da1c:	f000 f907 	bl	800dc2e <memcpy>
 800da20:	4621      	mov	r1, r4
 800da22:	ee18 0a10 	vmov	r0, s16
 800da26:	f000 f95d 	bl	800dce4 <_Bfree>
 800da2a:	464c      	mov	r4, r9
 800da2c:	6923      	ldr	r3, [r4, #16]
 800da2e:	1c5a      	adds	r2, r3, #1
 800da30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800da34:	6122      	str	r2, [r4, #16]
 800da36:	2201      	movs	r2, #1
 800da38:	615a      	str	r2, [r3, #20]
 800da3a:	e7bb      	b.n	800d9b4 <__gethex+0x3c8>
 800da3c:	6922      	ldr	r2, [r4, #16]
 800da3e:	455a      	cmp	r2, fp
 800da40:	dd0b      	ble.n	800da5a <__gethex+0x46e>
 800da42:	2101      	movs	r1, #1
 800da44:	4620      	mov	r0, r4
 800da46:	f7ff fd6a 	bl	800d51e <rshift>
 800da4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da4e:	3501      	adds	r5, #1
 800da50:	42ab      	cmp	r3, r5
 800da52:	f6ff aed0 	blt.w	800d7f6 <__gethex+0x20a>
 800da56:	2701      	movs	r7, #1
 800da58:	e7c0      	b.n	800d9dc <__gethex+0x3f0>
 800da5a:	f016 061f 	ands.w	r6, r6, #31
 800da5e:	d0fa      	beq.n	800da56 <__gethex+0x46a>
 800da60:	4453      	add	r3, sl
 800da62:	f1c6 0620 	rsb	r6, r6, #32
 800da66:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800da6a:	f000 f9ed 	bl	800de48 <__hi0bits>
 800da6e:	42b0      	cmp	r0, r6
 800da70:	dbe7      	blt.n	800da42 <__gethex+0x456>
 800da72:	e7f0      	b.n	800da56 <__gethex+0x46a>
 800da74:	0800fe88 	.word	0x0800fe88

0800da78 <L_shift>:
 800da78:	f1c2 0208 	rsb	r2, r2, #8
 800da7c:	0092      	lsls	r2, r2, #2
 800da7e:	b570      	push	{r4, r5, r6, lr}
 800da80:	f1c2 0620 	rsb	r6, r2, #32
 800da84:	6843      	ldr	r3, [r0, #4]
 800da86:	6804      	ldr	r4, [r0, #0]
 800da88:	fa03 f506 	lsl.w	r5, r3, r6
 800da8c:	432c      	orrs	r4, r5
 800da8e:	40d3      	lsrs	r3, r2
 800da90:	6004      	str	r4, [r0, #0]
 800da92:	f840 3f04 	str.w	r3, [r0, #4]!
 800da96:	4288      	cmp	r0, r1
 800da98:	d3f4      	bcc.n	800da84 <L_shift+0xc>
 800da9a:	bd70      	pop	{r4, r5, r6, pc}

0800da9c <__match>:
 800da9c:	b530      	push	{r4, r5, lr}
 800da9e:	6803      	ldr	r3, [r0, #0]
 800daa0:	3301      	adds	r3, #1
 800daa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800daa6:	b914      	cbnz	r4, 800daae <__match+0x12>
 800daa8:	6003      	str	r3, [r0, #0]
 800daaa:	2001      	movs	r0, #1
 800daac:	bd30      	pop	{r4, r5, pc}
 800daae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dab2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dab6:	2d19      	cmp	r5, #25
 800dab8:	bf98      	it	ls
 800daba:	3220      	addls	r2, #32
 800dabc:	42a2      	cmp	r2, r4
 800dabe:	d0f0      	beq.n	800daa2 <__match+0x6>
 800dac0:	2000      	movs	r0, #0
 800dac2:	e7f3      	b.n	800daac <__match+0x10>

0800dac4 <__hexnan>:
 800dac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac8:	680b      	ldr	r3, [r1, #0]
 800daca:	115e      	asrs	r6, r3, #5
 800dacc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dad0:	f013 031f 	ands.w	r3, r3, #31
 800dad4:	b087      	sub	sp, #28
 800dad6:	bf18      	it	ne
 800dad8:	3604      	addne	r6, #4
 800dada:	2500      	movs	r5, #0
 800dadc:	1f37      	subs	r7, r6, #4
 800dade:	4690      	mov	r8, r2
 800dae0:	6802      	ldr	r2, [r0, #0]
 800dae2:	9301      	str	r3, [sp, #4]
 800dae4:	4682      	mov	sl, r0
 800dae6:	f846 5c04 	str.w	r5, [r6, #-4]
 800daea:	46b9      	mov	r9, r7
 800daec:	463c      	mov	r4, r7
 800daee:	9502      	str	r5, [sp, #8]
 800daf0:	46ab      	mov	fp, r5
 800daf2:	7851      	ldrb	r1, [r2, #1]
 800daf4:	1c53      	adds	r3, r2, #1
 800daf6:	9303      	str	r3, [sp, #12]
 800daf8:	b341      	cbz	r1, 800db4c <__hexnan+0x88>
 800dafa:	4608      	mov	r0, r1
 800dafc:	9205      	str	r2, [sp, #20]
 800dafe:	9104      	str	r1, [sp, #16]
 800db00:	f7ff fd5f 	bl	800d5c2 <__hexdig_fun>
 800db04:	2800      	cmp	r0, #0
 800db06:	d14f      	bne.n	800dba8 <__hexnan+0xe4>
 800db08:	9904      	ldr	r1, [sp, #16]
 800db0a:	9a05      	ldr	r2, [sp, #20]
 800db0c:	2920      	cmp	r1, #32
 800db0e:	d818      	bhi.n	800db42 <__hexnan+0x7e>
 800db10:	9b02      	ldr	r3, [sp, #8]
 800db12:	459b      	cmp	fp, r3
 800db14:	dd13      	ble.n	800db3e <__hexnan+0x7a>
 800db16:	454c      	cmp	r4, r9
 800db18:	d206      	bcs.n	800db28 <__hexnan+0x64>
 800db1a:	2d07      	cmp	r5, #7
 800db1c:	dc04      	bgt.n	800db28 <__hexnan+0x64>
 800db1e:	462a      	mov	r2, r5
 800db20:	4649      	mov	r1, r9
 800db22:	4620      	mov	r0, r4
 800db24:	f7ff ffa8 	bl	800da78 <L_shift>
 800db28:	4544      	cmp	r4, r8
 800db2a:	d950      	bls.n	800dbce <__hexnan+0x10a>
 800db2c:	2300      	movs	r3, #0
 800db2e:	f1a4 0904 	sub.w	r9, r4, #4
 800db32:	f844 3c04 	str.w	r3, [r4, #-4]
 800db36:	f8cd b008 	str.w	fp, [sp, #8]
 800db3a:	464c      	mov	r4, r9
 800db3c:	461d      	mov	r5, r3
 800db3e:	9a03      	ldr	r2, [sp, #12]
 800db40:	e7d7      	b.n	800daf2 <__hexnan+0x2e>
 800db42:	2929      	cmp	r1, #41	; 0x29
 800db44:	d156      	bne.n	800dbf4 <__hexnan+0x130>
 800db46:	3202      	adds	r2, #2
 800db48:	f8ca 2000 	str.w	r2, [sl]
 800db4c:	f1bb 0f00 	cmp.w	fp, #0
 800db50:	d050      	beq.n	800dbf4 <__hexnan+0x130>
 800db52:	454c      	cmp	r4, r9
 800db54:	d206      	bcs.n	800db64 <__hexnan+0xa0>
 800db56:	2d07      	cmp	r5, #7
 800db58:	dc04      	bgt.n	800db64 <__hexnan+0xa0>
 800db5a:	462a      	mov	r2, r5
 800db5c:	4649      	mov	r1, r9
 800db5e:	4620      	mov	r0, r4
 800db60:	f7ff ff8a 	bl	800da78 <L_shift>
 800db64:	4544      	cmp	r4, r8
 800db66:	d934      	bls.n	800dbd2 <__hexnan+0x10e>
 800db68:	f1a8 0204 	sub.w	r2, r8, #4
 800db6c:	4623      	mov	r3, r4
 800db6e:	f853 1b04 	ldr.w	r1, [r3], #4
 800db72:	f842 1f04 	str.w	r1, [r2, #4]!
 800db76:	429f      	cmp	r7, r3
 800db78:	d2f9      	bcs.n	800db6e <__hexnan+0xaa>
 800db7a:	1b3b      	subs	r3, r7, r4
 800db7c:	f023 0303 	bic.w	r3, r3, #3
 800db80:	3304      	adds	r3, #4
 800db82:	3401      	adds	r4, #1
 800db84:	3e03      	subs	r6, #3
 800db86:	42b4      	cmp	r4, r6
 800db88:	bf88      	it	hi
 800db8a:	2304      	movhi	r3, #4
 800db8c:	4443      	add	r3, r8
 800db8e:	2200      	movs	r2, #0
 800db90:	f843 2b04 	str.w	r2, [r3], #4
 800db94:	429f      	cmp	r7, r3
 800db96:	d2fb      	bcs.n	800db90 <__hexnan+0xcc>
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	b91b      	cbnz	r3, 800dba4 <__hexnan+0xe0>
 800db9c:	4547      	cmp	r7, r8
 800db9e:	d127      	bne.n	800dbf0 <__hexnan+0x12c>
 800dba0:	2301      	movs	r3, #1
 800dba2:	603b      	str	r3, [r7, #0]
 800dba4:	2005      	movs	r0, #5
 800dba6:	e026      	b.n	800dbf6 <__hexnan+0x132>
 800dba8:	3501      	adds	r5, #1
 800dbaa:	2d08      	cmp	r5, #8
 800dbac:	f10b 0b01 	add.w	fp, fp, #1
 800dbb0:	dd06      	ble.n	800dbc0 <__hexnan+0xfc>
 800dbb2:	4544      	cmp	r4, r8
 800dbb4:	d9c3      	bls.n	800db3e <__hexnan+0x7a>
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	f844 3c04 	str.w	r3, [r4, #-4]
 800dbbc:	2501      	movs	r5, #1
 800dbbe:	3c04      	subs	r4, #4
 800dbc0:	6822      	ldr	r2, [r4, #0]
 800dbc2:	f000 000f 	and.w	r0, r0, #15
 800dbc6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800dbca:	6022      	str	r2, [r4, #0]
 800dbcc:	e7b7      	b.n	800db3e <__hexnan+0x7a>
 800dbce:	2508      	movs	r5, #8
 800dbd0:	e7b5      	b.n	800db3e <__hexnan+0x7a>
 800dbd2:	9b01      	ldr	r3, [sp, #4]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d0df      	beq.n	800db98 <__hexnan+0xd4>
 800dbd8:	f04f 32ff 	mov.w	r2, #4294967295
 800dbdc:	f1c3 0320 	rsb	r3, r3, #32
 800dbe0:	fa22 f303 	lsr.w	r3, r2, r3
 800dbe4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dbe8:	401a      	ands	r2, r3
 800dbea:	f846 2c04 	str.w	r2, [r6, #-4]
 800dbee:	e7d3      	b.n	800db98 <__hexnan+0xd4>
 800dbf0:	3f04      	subs	r7, #4
 800dbf2:	e7d1      	b.n	800db98 <__hexnan+0xd4>
 800dbf4:	2004      	movs	r0, #4
 800dbf6:	b007      	add	sp, #28
 800dbf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dbfc <_localeconv_r>:
 800dbfc:	4800      	ldr	r0, [pc, #0]	; (800dc00 <_localeconv_r+0x4>)
 800dbfe:	4770      	bx	lr
 800dc00:	20000684 	.word	0x20000684

0800dc04 <__retarget_lock_init_recursive>:
 800dc04:	4770      	bx	lr

0800dc06 <__retarget_lock_acquire_recursive>:
 800dc06:	4770      	bx	lr

0800dc08 <__retarget_lock_release_recursive>:
 800dc08:	4770      	bx	lr

0800dc0a <__ascii_mbtowc>:
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	b901      	cbnz	r1, 800dc10 <__ascii_mbtowc+0x6>
 800dc0e:	a901      	add	r1, sp, #4
 800dc10:	b142      	cbz	r2, 800dc24 <__ascii_mbtowc+0x1a>
 800dc12:	b14b      	cbz	r3, 800dc28 <__ascii_mbtowc+0x1e>
 800dc14:	7813      	ldrb	r3, [r2, #0]
 800dc16:	600b      	str	r3, [r1, #0]
 800dc18:	7812      	ldrb	r2, [r2, #0]
 800dc1a:	1e10      	subs	r0, r2, #0
 800dc1c:	bf18      	it	ne
 800dc1e:	2001      	movne	r0, #1
 800dc20:	b002      	add	sp, #8
 800dc22:	4770      	bx	lr
 800dc24:	4610      	mov	r0, r2
 800dc26:	e7fb      	b.n	800dc20 <__ascii_mbtowc+0x16>
 800dc28:	f06f 0001 	mvn.w	r0, #1
 800dc2c:	e7f8      	b.n	800dc20 <__ascii_mbtowc+0x16>

0800dc2e <memcpy>:
 800dc2e:	440a      	add	r2, r1
 800dc30:	4291      	cmp	r1, r2
 800dc32:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc36:	d100      	bne.n	800dc3a <memcpy+0xc>
 800dc38:	4770      	bx	lr
 800dc3a:	b510      	push	{r4, lr}
 800dc3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc40:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc44:	4291      	cmp	r1, r2
 800dc46:	d1f9      	bne.n	800dc3c <memcpy+0xe>
 800dc48:	bd10      	pop	{r4, pc}
	...

0800dc4c <__malloc_lock>:
 800dc4c:	4801      	ldr	r0, [pc, #4]	; (800dc54 <__malloc_lock+0x8>)
 800dc4e:	f7ff bfda 	b.w	800dc06 <__retarget_lock_acquire_recursive>
 800dc52:	bf00      	nop
 800dc54:	2000110c 	.word	0x2000110c

0800dc58 <__malloc_unlock>:
 800dc58:	4801      	ldr	r0, [pc, #4]	; (800dc60 <__malloc_unlock+0x8>)
 800dc5a:	f7ff bfd5 	b.w	800dc08 <__retarget_lock_release_recursive>
 800dc5e:	bf00      	nop
 800dc60:	2000110c 	.word	0x2000110c

0800dc64 <_Balloc>:
 800dc64:	b570      	push	{r4, r5, r6, lr}
 800dc66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dc68:	4604      	mov	r4, r0
 800dc6a:	460d      	mov	r5, r1
 800dc6c:	b976      	cbnz	r6, 800dc8c <_Balloc+0x28>
 800dc6e:	2010      	movs	r0, #16
 800dc70:	f7fc fe7a 	bl	800a968 <malloc>
 800dc74:	4602      	mov	r2, r0
 800dc76:	6260      	str	r0, [r4, #36]	; 0x24
 800dc78:	b920      	cbnz	r0, 800dc84 <_Balloc+0x20>
 800dc7a:	4b18      	ldr	r3, [pc, #96]	; (800dcdc <_Balloc+0x78>)
 800dc7c:	4818      	ldr	r0, [pc, #96]	; (800dce0 <_Balloc+0x7c>)
 800dc7e:	2166      	movs	r1, #102	; 0x66
 800dc80:	f001 f8be 	bl	800ee00 <__assert_func>
 800dc84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc88:	6006      	str	r6, [r0, #0]
 800dc8a:	60c6      	str	r6, [r0, #12]
 800dc8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dc8e:	68f3      	ldr	r3, [r6, #12]
 800dc90:	b183      	cbz	r3, 800dcb4 <_Balloc+0x50>
 800dc92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc94:	68db      	ldr	r3, [r3, #12]
 800dc96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dc9a:	b9b8      	cbnz	r0, 800dccc <_Balloc+0x68>
 800dc9c:	2101      	movs	r1, #1
 800dc9e:	fa01 f605 	lsl.w	r6, r1, r5
 800dca2:	1d72      	adds	r2, r6, #5
 800dca4:	0092      	lsls	r2, r2, #2
 800dca6:	4620      	mov	r0, r4
 800dca8:	f000 fc9d 	bl	800e5e6 <_calloc_r>
 800dcac:	b160      	cbz	r0, 800dcc8 <_Balloc+0x64>
 800dcae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dcb2:	e00e      	b.n	800dcd2 <_Balloc+0x6e>
 800dcb4:	2221      	movs	r2, #33	; 0x21
 800dcb6:	2104      	movs	r1, #4
 800dcb8:	4620      	mov	r0, r4
 800dcba:	f000 fc94 	bl	800e5e6 <_calloc_r>
 800dcbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcc0:	60f0      	str	r0, [r6, #12]
 800dcc2:	68db      	ldr	r3, [r3, #12]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d1e4      	bne.n	800dc92 <_Balloc+0x2e>
 800dcc8:	2000      	movs	r0, #0
 800dcca:	bd70      	pop	{r4, r5, r6, pc}
 800dccc:	6802      	ldr	r2, [r0, #0]
 800dcce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dcd8:	e7f7      	b.n	800dcca <_Balloc+0x66>
 800dcda:	bf00      	nop
 800dcdc:	0800fe16 	.word	0x0800fe16
 800dce0:	0800ff78 	.word	0x0800ff78

0800dce4 <_Bfree>:
 800dce4:	b570      	push	{r4, r5, r6, lr}
 800dce6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dce8:	4605      	mov	r5, r0
 800dcea:	460c      	mov	r4, r1
 800dcec:	b976      	cbnz	r6, 800dd0c <_Bfree+0x28>
 800dcee:	2010      	movs	r0, #16
 800dcf0:	f7fc fe3a 	bl	800a968 <malloc>
 800dcf4:	4602      	mov	r2, r0
 800dcf6:	6268      	str	r0, [r5, #36]	; 0x24
 800dcf8:	b920      	cbnz	r0, 800dd04 <_Bfree+0x20>
 800dcfa:	4b09      	ldr	r3, [pc, #36]	; (800dd20 <_Bfree+0x3c>)
 800dcfc:	4809      	ldr	r0, [pc, #36]	; (800dd24 <_Bfree+0x40>)
 800dcfe:	218a      	movs	r1, #138	; 0x8a
 800dd00:	f001 f87e 	bl	800ee00 <__assert_func>
 800dd04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd08:	6006      	str	r6, [r0, #0]
 800dd0a:	60c6      	str	r6, [r0, #12]
 800dd0c:	b13c      	cbz	r4, 800dd1e <_Bfree+0x3a>
 800dd0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dd10:	6862      	ldr	r2, [r4, #4]
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dd18:	6021      	str	r1, [r4, #0]
 800dd1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dd1e:	bd70      	pop	{r4, r5, r6, pc}
 800dd20:	0800fe16 	.word	0x0800fe16
 800dd24:	0800ff78 	.word	0x0800ff78

0800dd28 <__multadd>:
 800dd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd2c:	690d      	ldr	r5, [r1, #16]
 800dd2e:	4607      	mov	r7, r0
 800dd30:	460c      	mov	r4, r1
 800dd32:	461e      	mov	r6, r3
 800dd34:	f101 0c14 	add.w	ip, r1, #20
 800dd38:	2000      	movs	r0, #0
 800dd3a:	f8dc 3000 	ldr.w	r3, [ip]
 800dd3e:	b299      	uxth	r1, r3
 800dd40:	fb02 6101 	mla	r1, r2, r1, r6
 800dd44:	0c1e      	lsrs	r6, r3, #16
 800dd46:	0c0b      	lsrs	r3, r1, #16
 800dd48:	fb02 3306 	mla	r3, r2, r6, r3
 800dd4c:	b289      	uxth	r1, r1
 800dd4e:	3001      	adds	r0, #1
 800dd50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dd54:	4285      	cmp	r5, r0
 800dd56:	f84c 1b04 	str.w	r1, [ip], #4
 800dd5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dd5e:	dcec      	bgt.n	800dd3a <__multadd+0x12>
 800dd60:	b30e      	cbz	r6, 800dda6 <__multadd+0x7e>
 800dd62:	68a3      	ldr	r3, [r4, #8]
 800dd64:	42ab      	cmp	r3, r5
 800dd66:	dc19      	bgt.n	800dd9c <__multadd+0x74>
 800dd68:	6861      	ldr	r1, [r4, #4]
 800dd6a:	4638      	mov	r0, r7
 800dd6c:	3101      	adds	r1, #1
 800dd6e:	f7ff ff79 	bl	800dc64 <_Balloc>
 800dd72:	4680      	mov	r8, r0
 800dd74:	b928      	cbnz	r0, 800dd82 <__multadd+0x5a>
 800dd76:	4602      	mov	r2, r0
 800dd78:	4b0c      	ldr	r3, [pc, #48]	; (800ddac <__multadd+0x84>)
 800dd7a:	480d      	ldr	r0, [pc, #52]	; (800ddb0 <__multadd+0x88>)
 800dd7c:	21b5      	movs	r1, #181	; 0xb5
 800dd7e:	f001 f83f 	bl	800ee00 <__assert_func>
 800dd82:	6922      	ldr	r2, [r4, #16]
 800dd84:	3202      	adds	r2, #2
 800dd86:	f104 010c 	add.w	r1, r4, #12
 800dd8a:	0092      	lsls	r2, r2, #2
 800dd8c:	300c      	adds	r0, #12
 800dd8e:	f7ff ff4e 	bl	800dc2e <memcpy>
 800dd92:	4621      	mov	r1, r4
 800dd94:	4638      	mov	r0, r7
 800dd96:	f7ff ffa5 	bl	800dce4 <_Bfree>
 800dd9a:	4644      	mov	r4, r8
 800dd9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dda0:	3501      	adds	r5, #1
 800dda2:	615e      	str	r6, [r3, #20]
 800dda4:	6125      	str	r5, [r4, #16]
 800dda6:	4620      	mov	r0, r4
 800dda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddac:	0800fe88 	.word	0x0800fe88
 800ddb0:	0800ff78 	.word	0x0800ff78

0800ddb4 <__s2b>:
 800ddb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddb8:	460c      	mov	r4, r1
 800ddba:	4615      	mov	r5, r2
 800ddbc:	461f      	mov	r7, r3
 800ddbe:	2209      	movs	r2, #9
 800ddc0:	3308      	adds	r3, #8
 800ddc2:	4606      	mov	r6, r0
 800ddc4:	fb93 f3f2 	sdiv	r3, r3, r2
 800ddc8:	2100      	movs	r1, #0
 800ddca:	2201      	movs	r2, #1
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	db09      	blt.n	800dde4 <__s2b+0x30>
 800ddd0:	4630      	mov	r0, r6
 800ddd2:	f7ff ff47 	bl	800dc64 <_Balloc>
 800ddd6:	b940      	cbnz	r0, 800ddea <__s2b+0x36>
 800ddd8:	4602      	mov	r2, r0
 800ddda:	4b19      	ldr	r3, [pc, #100]	; (800de40 <__s2b+0x8c>)
 800dddc:	4819      	ldr	r0, [pc, #100]	; (800de44 <__s2b+0x90>)
 800ddde:	21ce      	movs	r1, #206	; 0xce
 800dde0:	f001 f80e 	bl	800ee00 <__assert_func>
 800dde4:	0052      	lsls	r2, r2, #1
 800dde6:	3101      	adds	r1, #1
 800dde8:	e7f0      	b.n	800ddcc <__s2b+0x18>
 800ddea:	9b08      	ldr	r3, [sp, #32]
 800ddec:	6143      	str	r3, [r0, #20]
 800ddee:	2d09      	cmp	r5, #9
 800ddf0:	f04f 0301 	mov.w	r3, #1
 800ddf4:	6103      	str	r3, [r0, #16]
 800ddf6:	dd16      	ble.n	800de26 <__s2b+0x72>
 800ddf8:	f104 0909 	add.w	r9, r4, #9
 800ddfc:	46c8      	mov	r8, r9
 800ddfe:	442c      	add	r4, r5
 800de00:	f818 3b01 	ldrb.w	r3, [r8], #1
 800de04:	4601      	mov	r1, r0
 800de06:	3b30      	subs	r3, #48	; 0x30
 800de08:	220a      	movs	r2, #10
 800de0a:	4630      	mov	r0, r6
 800de0c:	f7ff ff8c 	bl	800dd28 <__multadd>
 800de10:	45a0      	cmp	r8, r4
 800de12:	d1f5      	bne.n	800de00 <__s2b+0x4c>
 800de14:	f1a5 0408 	sub.w	r4, r5, #8
 800de18:	444c      	add	r4, r9
 800de1a:	1b2d      	subs	r5, r5, r4
 800de1c:	1963      	adds	r3, r4, r5
 800de1e:	42bb      	cmp	r3, r7
 800de20:	db04      	blt.n	800de2c <__s2b+0x78>
 800de22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de26:	340a      	adds	r4, #10
 800de28:	2509      	movs	r5, #9
 800de2a:	e7f6      	b.n	800de1a <__s2b+0x66>
 800de2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800de30:	4601      	mov	r1, r0
 800de32:	3b30      	subs	r3, #48	; 0x30
 800de34:	220a      	movs	r2, #10
 800de36:	4630      	mov	r0, r6
 800de38:	f7ff ff76 	bl	800dd28 <__multadd>
 800de3c:	e7ee      	b.n	800de1c <__s2b+0x68>
 800de3e:	bf00      	nop
 800de40:	0800fe88 	.word	0x0800fe88
 800de44:	0800ff78 	.word	0x0800ff78

0800de48 <__hi0bits>:
 800de48:	0c03      	lsrs	r3, r0, #16
 800de4a:	041b      	lsls	r3, r3, #16
 800de4c:	b9d3      	cbnz	r3, 800de84 <__hi0bits+0x3c>
 800de4e:	0400      	lsls	r0, r0, #16
 800de50:	2310      	movs	r3, #16
 800de52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800de56:	bf04      	itt	eq
 800de58:	0200      	lsleq	r0, r0, #8
 800de5a:	3308      	addeq	r3, #8
 800de5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800de60:	bf04      	itt	eq
 800de62:	0100      	lsleq	r0, r0, #4
 800de64:	3304      	addeq	r3, #4
 800de66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800de6a:	bf04      	itt	eq
 800de6c:	0080      	lsleq	r0, r0, #2
 800de6e:	3302      	addeq	r3, #2
 800de70:	2800      	cmp	r0, #0
 800de72:	db05      	blt.n	800de80 <__hi0bits+0x38>
 800de74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800de78:	f103 0301 	add.w	r3, r3, #1
 800de7c:	bf08      	it	eq
 800de7e:	2320      	moveq	r3, #32
 800de80:	4618      	mov	r0, r3
 800de82:	4770      	bx	lr
 800de84:	2300      	movs	r3, #0
 800de86:	e7e4      	b.n	800de52 <__hi0bits+0xa>

0800de88 <__lo0bits>:
 800de88:	6803      	ldr	r3, [r0, #0]
 800de8a:	f013 0207 	ands.w	r2, r3, #7
 800de8e:	4601      	mov	r1, r0
 800de90:	d00b      	beq.n	800deaa <__lo0bits+0x22>
 800de92:	07da      	lsls	r2, r3, #31
 800de94:	d423      	bmi.n	800dede <__lo0bits+0x56>
 800de96:	0798      	lsls	r0, r3, #30
 800de98:	bf49      	itett	mi
 800de9a:	085b      	lsrmi	r3, r3, #1
 800de9c:	089b      	lsrpl	r3, r3, #2
 800de9e:	2001      	movmi	r0, #1
 800dea0:	600b      	strmi	r3, [r1, #0]
 800dea2:	bf5c      	itt	pl
 800dea4:	600b      	strpl	r3, [r1, #0]
 800dea6:	2002      	movpl	r0, #2
 800dea8:	4770      	bx	lr
 800deaa:	b298      	uxth	r0, r3
 800deac:	b9a8      	cbnz	r0, 800deda <__lo0bits+0x52>
 800deae:	0c1b      	lsrs	r3, r3, #16
 800deb0:	2010      	movs	r0, #16
 800deb2:	b2da      	uxtb	r2, r3
 800deb4:	b90a      	cbnz	r2, 800deba <__lo0bits+0x32>
 800deb6:	3008      	adds	r0, #8
 800deb8:	0a1b      	lsrs	r3, r3, #8
 800deba:	071a      	lsls	r2, r3, #28
 800debc:	bf04      	itt	eq
 800debe:	091b      	lsreq	r3, r3, #4
 800dec0:	3004      	addeq	r0, #4
 800dec2:	079a      	lsls	r2, r3, #30
 800dec4:	bf04      	itt	eq
 800dec6:	089b      	lsreq	r3, r3, #2
 800dec8:	3002      	addeq	r0, #2
 800deca:	07da      	lsls	r2, r3, #31
 800decc:	d403      	bmi.n	800ded6 <__lo0bits+0x4e>
 800dece:	085b      	lsrs	r3, r3, #1
 800ded0:	f100 0001 	add.w	r0, r0, #1
 800ded4:	d005      	beq.n	800dee2 <__lo0bits+0x5a>
 800ded6:	600b      	str	r3, [r1, #0]
 800ded8:	4770      	bx	lr
 800deda:	4610      	mov	r0, r2
 800dedc:	e7e9      	b.n	800deb2 <__lo0bits+0x2a>
 800dede:	2000      	movs	r0, #0
 800dee0:	4770      	bx	lr
 800dee2:	2020      	movs	r0, #32
 800dee4:	4770      	bx	lr
	...

0800dee8 <__i2b>:
 800dee8:	b510      	push	{r4, lr}
 800deea:	460c      	mov	r4, r1
 800deec:	2101      	movs	r1, #1
 800deee:	f7ff feb9 	bl	800dc64 <_Balloc>
 800def2:	4602      	mov	r2, r0
 800def4:	b928      	cbnz	r0, 800df02 <__i2b+0x1a>
 800def6:	4b05      	ldr	r3, [pc, #20]	; (800df0c <__i2b+0x24>)
 800def8:	4805      	ldr	r0, [pc, #20]	; (800df10 <__i2b+0x28>)
 800defa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800defe:	f000 ff7f 	bl	800ee00 <__assert_func>
 800df02:	2301      	movs	r3, #1
 800df04:	6144      	str	r4, [r0, #20]
 800df06:	6103      	str	r3, [r0, #16]
 800df08:	bd10      	pop	{r4, pc}
 800df0a:	bf00      	nop
 800df0c:	0800fe88 	.word	0x0800fe88
 800df10:	0800ff78 	.word	0x0800ff78

0800df14 <__multiply>:
 800df14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df18:	4691      	mov	r9, r2
 800df1a:	690a      	ldr	r2, [r1, #16]
 800df1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df20:	429a      	cmp	r2, r3
 800df22:	bfb8      	it	lt
 800df24:	460b      	movlt	r3, r1
 800df26:	460c      	mov	r4, r1
 800df28:	bfbc      	itt	lt
 800df2a:	464c      	movlt	r4, r9
 800df2c:	4699      	movlt	r9, r3
 800df2e:	6927      	ldr	r7, [r4, #16]
 800df30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800df34:	68a3      	ldr	r3, [r4, #8]
 800df36:	6861      	ldr	r1, [r4, #4]
 800df38:	eb07 060a 	add.w	r6, r7, sl
 800df3c:	42b3      	cmp	r3, r6
 800df3e:	b085      	sub	sp, #20
 800df40:	bfb8      	it	lt
 800df42:	3101      	addlt	r1, #1
 800df44:	f7ff fe8e 	bl	800dc64 <_Balloc>
 800df48:	b930      	cbnz	r0, 800df58 <__multiply+0x44>
 800df4a:	4602      	mov	r2, r0
 800df4c:	4b44      	ldr	r3, [pc, #272]	; (800e060 <__multiply+0x14c>)
 800df4e:	4845      	ldr	r0, [pc, #276]	; (800e064 <__multiply+0x150>)
 800df50:	f240 115d 	movw	r1, #349	; 0x15d
 800df54:	f000 ff54 	bl	800ee00 <__assert_func>
 800df58:	f100 0514 	add.w	r5, r0, #20
 800df5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800df60:	462b      	mov	r3, r5
 800df62:	2200      	movs	r2, #0
 800df64:	4543      	cmp	r3, r8
 800df66:	d321      	bcc.n	800dfac <__multiply+0x98>
 800df68:	f104 0314 	add.w	r3, r4, #20
 800df6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800df70:	f109 0314 	add.w	r3, r9, #20
 800df74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800df78:	9202      	str	r2, [sp, #8]
 800df7a:	1b3a      	subs	r2, r7, r4
 800df7c:	3a15      	subs	r2, #21
 800df7e:	f022 0203 	bic.w	r2, r2, #3
 800df82:	3204      	adds	r2, #4
 800df84:	f104 0115 	add.w	r1, r4, #21
 800df88:	428f      	cmp	r7, r1
 800df8a:	bf38      	it	cc
 800df8c:	2204      	movcc	r2, #4
 800df8e:	9201      	str	r2, [sp, #4]
 800df90:	9a02      	ldr	r2, [sp, #8]
 800df92:	9303      	str	r3, [sp, #12]
 800df94:	429a      	cmp	r2, r3
 800df96:	d80c      	bhi.n	800dfb2 <__multiply+0x9e>
 800df98:	2e00      	cmp	r6, #0
 800df9a:	dd03      	ble.n	800dfa4 <__multiply+0x90>
 800df9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d05a      	beq.n	800e05a <__multiply+0x146>
 800dfa4:	6106      	str	r6, [r0, #16]
 800dfa6:	b005      	add	sp, #20
 800dfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfac:	f843 2b04 	str.w	r2, [r3], #4
 800dfb0:	e7d8      	b.n	800df64 <__multiply+0x50>
 800dfb2:	f8b3 a000 	ldrh.w	sl, [r3]
 800dfb6:	f1ba 0f00 	cmp.w	sl, #0
 800dfba:	d024      	beq.n	800e006 <__multiply+0xf2>
 800dfbc:	f104 0e14 	add.w	lr, r4, #20
 800dfc0:	46a9      	mov	r9, r5
 800dfc2:	f04f 0c00 	mov.w	ip, #0
 800dfc6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dfca:	f8d9 1000 	ldr.w	r1, [r9]
 800dfce:	fa1f fb82 	uxth.w	fp, r2
 800dfd2:	b289      	uxth	r1, r1
 800dfd4:	fb0a 110b 	mla	r1, sl, fp, r1
 800dfd8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dfdc:	f8d9 2000 	ldr.w	r2, [r9]
 800dfe0:	4461      	add	r1, ip
 800dfe2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dfe6:	fb0a c20b 	mla	r2, sl, fp, ip
 800dfea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dfee:	b289      	uxth	r1, r1
 800dff0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dff4:	4577      	cmp	r7, lr
 800dff6:	f849 1b04 	str.w	r1, [r9], #4
 800dffa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dffe:	d8e2      	bhi.n	800dfc6 <__multiply+0xb2>
 800e000:	9a01      	ldr	r2, [sp, #4]
 800e002:	f845 c002 	str.w	ip, [r5, r2]
 800e006:	9a03      	ldr	r2, [sp, #12]
 800e008:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e00c:	3304      	adds	r3, #4
 800e00e:	f1b9 0f00 	cmp.w	r9, #0
 800e012:	d020      	beq.n	800e056 <__multiply+0x142>
 800e014:	6829      	ldr	r1, [r5, #0]
 800e016:	f104 0c14 	add.w	ip, r4, #20
 800e01a:	46ae      	mov	lr, r5
 800e01c:	f04f 0a00 	mov.w	sl, #0
 800e020:	f8bc b000 	ldrh.w	fp, [ip]
 800e024:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e028:	fb09 220b 	mla	r2, r9, fp, r2
 800e02c:	4492      	add	sl, r2
 800e02e:	b289      	uxth	r1, r1
 800e030:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e034:	f84e 1b04 	str.w	r1, [lr], #4
 800e038:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e03c:	f8be 1000 	ldrh.w	r1, [lr]
 800e040:	0c12      	lsrs	r2, r2, #16
 800e042:	fb09 1102 	mla	r1, r9, r2, r1
 800e046:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e04a:	4567      	cmp	r7, ip
 800e04c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e050:	d8e6      	bhi.n	800e020 <__multiply+0x10c>
 800e052:	9a01      	ldr	r2, [sp, #4]
 800e054:	50a9      	str	r1, [r5, r2]
 800e056:	3504      	adds	r5, #4
 800e058:	e79a      	b.n	800df90 <__multiply+0x7c>
 800e05a:	3e01      	subs	r6, #1
 800e05c:	e79c      	b.n	800df98 <__multiply+0x84>
 800e05e:	bf00      	nop
 800e060:	0800fe88 	.word	0x0800fe88
 800e064:	0800ff78 	.word	0x0800ff78

0800e068 <__pow5mult>:
 800e068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e06c:	4615      	mov	r5, r2
 800e06e:	f012 0203 	ands.w	r2, r2, #3
 800e072:	4606      	mov	r6, r0
 800e074:	460f      	mov	r7, r1
 800e076:	d007      	beq.n	800e088 <__pow5mult+0x20>
 800e078:	4c25      	ldr	r4, [pc, #148]	; (800e110 <__pow5mult+0xa8>)
 800e07a:	3a01      	subs	r2, #1
 800e07c:	2300      	movs	r3, #0
 800e07e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e082:	f7ff fe51 	bl	800dd28 <__multadd>
 800e086:	4607      	mov	r7, r0
 800e088:	10ad      	asrs	r5, r5, #2
 800e08a:	d03d      	beq.n	800e108 <__pow5mult+0xa0>
 800e08c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e08e:	b97c      	cbnz	r4, 800e0b0 <__pow5mult+0x48>
 800e090:	2010      	movs	r0, #16
 800e092:	f7fc fc69 	bl	800a968 <malloc>
 800e096:	4602      	mov	r2, r0
 800e098:	6270      	str	r0, [r6, #36]	; 0x24
 800e09a:	b928      	cbnz	r0, 800e0a8 <__pow5mult+0x40>
 800e09c:	4b1d      	ldr	r3, [pc, #116]	; (800e114 <__pow5mult+0xac>)
 800e09e:	481e      	ldr	r0, [pc, #120]	; (800e118 <__pow5mult+0xb0>)
 800e0a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e0a4:	f000 feac 	bl	800ee00 <__assert_func>
 800e0a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e0ac:	6004      	str	r4, [r0, #0]
 800e0ae:	60c4      	str	r4, [r0, #12]
 800e0b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e0b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e0b8:	b94c      	cbnz	r4, 800e0ce <__pow5mult+0x66>
 800e0ba:	f240 2171 	movw	r1, #625	; 0x271
 800e0be:	4630      	mov	r0, r6
 800e0c0:	f7ff ff12 	bl	800dee8 <__i2b>
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e0ca:	4604      	mov	r4, r0
 800e0cc:	6003      	str	r3, [r0, #0]
 800e0ce:	f04f 0900 	mov.w	r9, #0
 800e0d2:	07eb      	lsls	r3, r5, #31
 800e0d4:	d50a      	bpl.n	800e0ec <__pow5mult+0x84>
 800e0d6:	4639      	mov	r1, r7
 800e0d8:	4622      	mov	r2, r4
 800e0da:	4630      	mov	r0, r6
 800e0dc:	f7ff ff1a 	bl	800df14 <__multiply>
 800e0e0:	4639      	mov	r1, r7
 800e0e2:	4680      	mov	r8, r0
 800e0e4:	4630      	mov	r0, r6
 800e0e6:	f7ff fdfd 	bl	800dce4 <_Bfree>
 800e0ea:	4647      	mov	r7, r8
 800e0ec:	106d      	asrs	r5, r5, #1
 800e0ee:	d00b      	beq.n	800e108 <__pow5mult+0xa0>
 800e0f0:	6820      	ldr	r0, [r4, #0]
 800e0f2:	b938      	cbnz	r0, 800e104 <__pow5mult+0x9c>
 800e0f4:	4622      	mov	r2, r4
 800e0f6:	4621      	mov	r1, r4
 800e0f8:	4630      	mov	r0, r6
 800e0fa:	f7ff ff0b 	bl	800df14 <__multiply>
 800e0fe:	6020      	str	r0, [r4, #0]
 800e100:	f8c0 9000 	str.w	r9, [r0]
 800e104:	4604      	mov	r4, r0
 800e106:	e7e4      	b.n	800e0d2 <__pow5mult+0x6a>
 800e108:	4638      	mov	r0, r7
 800e10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e10e:	bf00      	nop
 800e110:	080100c8 	.word	0x080100c8
 800e114:	0800fe16 	.word	0x0800fe16
 800e118:	0800ff78 	.word	0x0800ff78

0800e11c <__lshift>:
 800e11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e120:	460c      	mov	r4, r1
 800e122:	6849      	ldr	r1, [r1, #4]
 800e124:	6923      	ldr	r3, [r4, #16]
 800e126:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e12a:	68a3      	ldr	r3, [r4, #8]
 800e12c:	4607      	mov	r7, r0
 800e12e:	4691      	mov	r9, r2
 800e130:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e134:	f108 0601 	add.w	r6, r8, #1
 800e138:	42b3      	cmp	r3, r6
 800e13a:	db0b      	blt.n	800e154 <__lshift+0x38>
 800e13c:	4638      	mov	r0, r7
 800e13e:	f7ff fd91 	bl	800dc64 <_Balloc>
 800e142:	4605      	mov	r5, r0
 800e144:	b948      	cbnz	r0, 800e15a <__lshift+0x3e>
 800e146:	4602      	mov	r2, r0
 800e148:	4b2a      	ldr	r3, [pc, #168]	; (800e1f4 <__lshift+0xd8>)
 800e14a:	482b      	ldr	r0, [pc, #172]	; (800e1f8 <__lshift+0xdc>)
 800e14c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e150:	f000 fe56 	bl	800ee00 <__assert_func>
 800e154:	3101      	adds	r1, #1
 800e156:	005b      	lsls	r3, r3, #1
 800e158:	e7ee      	b.n	800e138 <__lshift+0x1c>
 800e15a:	2300      	movs	r3, #0
 800e15c:	f100 0114 	add.w	r1, r0, #20
 800e160:	f100 0210 	add.w	r2, r0, #16
 800e164:	4618      	mov	r0, r3
 800e166:	4553      	cmp	r3, sl
 800e168:	db37      	blt.n	800e1da <__lshift+0xbe>
 800e16a:	6920      	ldr	r0, [r4, #16]
 800e16c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e170:	f104 0314 	add.w	r3, r4, #20
 800e174:	f019 091f 	ands.w	r9, r9, #31
 800e178:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e17c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e180:	d02f      	beq.n	800e1e2 <__lshift+0xc6>
 800e182:	f1c9 0e20 	rsb	lr, r9, #32
 800e186:	468a      	mov	sl, r1
 800e188:	f04f 0c00 	mov.w	ip, #0
 800e18c:	681a      	ldr	r2, [r3, #0]
 800e18e:	fa02 f209 	lsl.w	r2, r2, r9
 800e192:	ea42 020c 	orr.w	r2, r2, ip
 800e196:	f84a 2b04 	str.w	r2, [sl], #4
 800e19a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e19e:	4298      	cmp	r0, r3
 800e1a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e1a4:	d8f2      	bhi.n	800e18c <__lshift+0x70>
 800e1a6:	1b03      	subs	r3, r0, r4
 800e1a8:	3b15      	subs	r3, #21
 800e1aa:	f023 0303 	bic.w	r3, r3, #3
 800e1ae:	3304      	adds	r3, #4
 800e1b0:	f104 0215 	add.w	r2, r4, #21
 800e1b4:	4290      	cmp	r0, r2
 800e1b6:	bf38      	it	cc
 800e1b8:	2304      	movcc	r3, #4
 800e1ba:	f841 c003 	str.w	ip, [r1, r3]
 800e1be:	f1bc 0f00 	cmp.w	ip, #0
 800e1c2:	d001      	beq.n	800e1c8 <__lshift+0xac>
 800e1c4:	f108 0602 	add.w	r6, r8, #2
 800e1c8:	3e01      	subs	r6, #1
 800e1ca:	4638      	mov	r0, r7
 800e1cc:	612e      	str	r6, [r5, #16]
 800e1ce:	4621      	mov	r1, r4
 800e1d0:	f7ff fd88 	bl	800dce4 <_Bfree>
 800e1d4:	4628      	mov	r0, r5
 800e1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1da:	f842 0f04 	str.w	r0, [r2, #4]!
 800e1de:	3301      	adds	r3, #1
 800e1e0:	e7c1      	b.n	800e166 <__lshift+0x4a>
 800e1e2:	3904      	subs	r1, #4
 800e1e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e1ec:	4298      	cmp	r0, r3
 800e1ee:	d8f9      	bhi.n	800e1e4 <__lshift+0xc8>
 800e1f0:	e7ea      	b.n	800e1c8 <__lshift+0xac>
 800e1f2:	bf00      	nop
 800e1f4:	0800fe88 	.word	0x0800fe88
 800e1f8:	0800ff78 	.word	0x0800ff78

0800e1fc <__mcmp>:
 800e1fc:	b530      	push	{r4, r5, lr}
 800e1fe:	6902      	ldr	r2, [r0, #16]
 800e200:	690c      	ldr	r4, [r1, #16]
 800e202:	1b12      	subs	r2, r2, r4
 800e204:	d10e      	bne.n	800e224 <__mcmp+0x28>
 800e206:	f100 0314 	add.w	r3, r0, #20
 800e20a:	3114      	adds	r1, #20
 800e20c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e210:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e214:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e218:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e21c:	42a5      	cmp	r5, r4
 800e21e:	d003      	beq.n	800e228 <__mcmp+0x2c>
 800e220:	d305      	bcc.n	800e22e <__mcmp+0x32>
 800e222:	2201      	movs	r2, #1
 800e224:	4610      	mov	r0, r2
 800e226:	bd30      	pop	{r4, r5, pc}
 800e228:	4283      	cmp	r3, r0
 800e22a:	d3f3      	bcc.n	800e214 <__mcmp+0x18>
 800e22c:	e7fa      	b.n	800e224 <__mcmp+0x28>
 800e22e:	f04f 32ff 	mov.w	r2, #4294967295
 800e232:	e7f7      	b.n	800e224 <__mcmp+0x28>

0800e234 <__mdiff>:
 800e234:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e238:	460c      	mov	r4, r1
 800e23a:	4606      	mov	r6, r0
 800e23c:	4611      	mov	r1, r2
 800e23e:	4620      	mov	r0, r4
 800e240:	4690      	mov	r8, r2
 800e242:	f7ff ffdb 	bl	800e1fc <__mcmp>
 800e246:	1e05      	subs	r5, r0, #0
 800e248:	d110      	bne.n	800e26c <__mdiff+0x38>
 800e24a:	4629      	mov	r1, r5
 800e24c:	4630      	mov	r0, r6
 800e24e:	f7ff fd09 	bl	800dc64 <_Balloc>
 800e252:	b930      	cbnz	r0, 800e262 <__mdiff+0x2e>
 800e254:	4b3a      	ldr	r3, [pc, #232]	; (800e340 <__mdiff+0x10c>)
 800e256:	4602      	mov	r2, r0
 800e258:	f240 2132 	movw	r1, #562	; 0x232
 800e25c:	4839      	ldr	r0, [pc, #228]	; (800e344 <__mdiff+0x110>)
 800e25e:	f000 fdcf 	bl	800ee00 <__assert_func>
 800e262:	2301      	movs	r3, #1
 800e264:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e268:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e26c:	bfa4      	itt	ge
 800e26e:	4643      	movge	r3, r8
 800e270:	46a0      	movge	r8, r4
 800e272:	4630      	mov	r0, r6
 800e274:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e278:	bfa6      	itte	ge
 800e27a:	461c      	movge	r4, r3
 800e27c:	2500      	movge	r5, #0
 800e27e:	2501      	movlt	r5, #1
 800e280:	f7ff fcf0 	bl	800dc64 <_Balloc>
 800e284:	b920      	cbnz	r0, 800e290 <__mdiff+0x5c>
 800e286:	4b2e      	ldr	r3, [pc, #184]	; (800e340 <__mdiff+0x10c>)
 800e288:	4602      	mov	r2, r0
 800e28a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e28e:	e7e5      	b.n	800e25c <__mdiff+0x28>
 800e290:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e294:	6926      	ldr	r6, [r4, #16]
 800e296:	60c5      	str	r5, [r0, #12]
 800e298:	f104 0914 	add.w	r9, r4, #20
 800e29c:	f108 0514 	add.w	r5, r8, #20
 800e2a0:	f100 0e14 	add.w	lr, r0, #20
 800e2a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e2a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e2ac:	f108 0210 	add.w	r2, r8, #16
 800e2b0:	46f2      	mov	sl, lr
 800e2b2:	2100      	movs	r1, #0
 800e2b4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e2b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e2bc:	fa1f f883 	uxth.w	r8, r3
 800e2c0:	fa11 f18b 	uxtah	r1, r1, fp
 800e2c4:	0c1b      	lsrs	r3, r3, #16
 800e2c6:	eba1 0808 	sub.w	r8, r1, r8
 800e2ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e2ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e2d2:	fa1f f888 	uxth.w	r8, r8
 800e2d6:	1419      	asrs	r1, r3, #16
 800e2d8:	454e      	cmp	r6, r9
 800e2da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e2de:	f84a 3b04 	str.w	r3, [sl], #4
 800e2e2:	d8e7      	bhi.n	800e2b4 <__mdiff+0x80>
 800e2e4:	1b33      	subs	r3, r6, r4
 800e2e6:	3b15      	subs	r3, #21
 800e2e8:	f023 0303 	bic.w	r3, r3, #3
 800e2ec:	3304      	adds	r3, #4
 800e2ee:	3415      	adds	r4, #21
 800e2f0:	42a6      	cmp	r6, r4
 800e2f2:	bf38      	it	cc
 800e2f4:	2304      	movcc	r3, #4
 800e2f6:	441d      	add	r5, r3
 800e2f8:	4473      	add	r3, lr
 800e2fa:	469e      	mov	lr, r3
 800e2fc:	462e      	mov	r6, r5
 800e2fe:	4566      	cmp	r6, ip
 800e300:	d30e      	bcc.n	800e320 <__mdiff+0xec>
 800e302:	f10c 0203 	add.w	r2, ip, #3
 800e306:	1b52      	subs	r2, r2, r5
 800e308:	f022 0203 	bic.w	r2, r2, #3
 800e30c:	3d03      	subs	r5, #3
 800e30e:	45ac      	cmp	ip, r5
 800e310:	bf38      	it	cc
 800e312:	2200      	movcc	r2, #0
 800e314:	441a      	add	r2, r3
 800e316:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e31a:	b17b      	cbz	r3, 800e33c <__mdiff+0x108>
 800e31c:	6107      	str	r7, [r0, #16]
 800e31e:	e7a3      	b.n	800e268 <__mdiff+0x34>
 800e320:	f856 8b04 	ldr.w	r8, [r6], #4
 800e324:	fa11 f288 	uxtah	r2, r1, r8
 800e328:	1414      	asrs	r4, r2, #16
 800e32a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e32e:	b292      	uxth	r2, r2
 800e330:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e334:	f84e 2b04 	str.w	r2, [lr], #4
 800e338:	1421      	asrs	r1, r4, #16
 800e33a:	e7e0      	b.n	800e2fe <__mdiff+0xca>
 800e33c:	3f01      	subs	r7, #1
 800e33e:	e7ea      	b.n	800e316 <__mdiff+0xe2>
 800e340:	0800fe88 	.word	0x0800fe88
 800e344:	0800ff78 	.word	0x0800ff78

0800e348 <__ulp>:
 800e348:	b082      	sub	sp, #8
 800e34a:	ed8d 0b00 	vstr	d0, [sp]
 800e34e:	9b01      	ldr	r3, [sp, #4]
 800e350:	4912      	ldr	r1, [pc, #72]	; (800e39c <__ulp+0x54>)
 800e352:	4019      	ands	r1, r3
 800e354:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e358:	2900      	cmp	r1, #0
 800e35a:	dd05      	ble.n	800e368 <__ulp+0x20>
 800e35c:	2200      	movs	r2, #0
 800e35e:	460b      	mov	r3, r1
 800e360:	ec43 2b10 	vmov	d0, r2, r3
 800e364:	b002      	add	sp, #8
 800e366:	4770      	bx	lr
 800e368:	4249      	negs	r1, r1
 800e36a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e36e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e372:	f04f 0200 	mov.w	r2, #0
 800e376:	f04f 0300 	mov.w	r3, #0
 800e37a:	da04      	bge.n	800e386 <__ulp+0x3e>
 800e37c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e380:	fa41 f300 	asr.w	r3, r1, r0
 800e384:	e7ec      	b.n	800e360 <__ulp+0x18>
 800e386:	f1a0 0114 	sub.w	r1, r0, #20
 800e38a:	291e      	cmp	r1, #30
 800e38c:	bfda      	itte	le
 800e38e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e392:	fa20 f101 	lsrle.w	r1, r0, r1
 800e396:	2101      	movgt	r1, #1
 800e398:	460a      	mov	r2, r1
 800e39a:	e7e1      	b.n	800e360 <__ulp+0x18>
 800e39c:	7ff00000 	.word	0x7ff00000

0800e3a0 <__b2d>:
 800e3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3a2:	6905      	ldr	r5, [r0, #16]
 800e3a4:	f100 0714 	add.w	r7, r0, #20
 800e3a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e3ac:	1f2e      	subs	r6, r5, #4
 800e3ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	f7ff fd48 	bl	800de48 <__hi0bits>
 800e3b8:	f1c0 0320 	rsb	r3, r0, #32
 800e3bc:	280a      	cmp	r0, #10
 800e3be:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e43c <__b2d+0x9c>
 800e3c2:	600b      	str	r3, [r1, #0]
 800e3c4:	dc14      	bgt.n	800e3f0 <__b2d+0x50>
 800e3c6:	f1c0 0e0b 	rsb	lr, r0, #11
 800e3ca:	fa24 f10e 	lsr.w	r1, r4, lr
 800e3ce:	42b7      	cmp	r7, r6
 800e3d0:	ea41 030c 	orr.w	r3, r1, ip
 800e3d4:	bf34      	ite	cc
 800e3d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e3da:	2100      	movcs	r1, #0
 800e3dc:	3015      	adds	r0, #21
 800e3de:	fa04 f000 	lsl.w	r0, r4, r0
 800e3e2:	fa21 f10e 	lsr.w	r1, r1, lr
 800e3e6:	ea40 0201 	orr.w	r2, r0, r1
 800e3ea:	ec43 2b10 	vmov	d0, r2, r3
 800e3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3f0:	42b7      	cmp	r7, r6
 800e3f2:	bf3a      	itte	cc
 800e3f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e3f8:	f1a5 0608 	subcc.w	r6, r5, #8
 800e3fc:	2100      	movcs	r1, #0
 800e3fe:	380b      	subs	r0, #11
 800e400:	d017      	beq.n	800e432 <__b2d+0x92>
 800e402:	f1c0 0c20 	rsb	ip, r0, #32
 800e406:	fa04 f500 	lsl.w	r5, r4, r0
 800e40a:	42be      	cmp	r6, r7
 800e40c:	fa21 f40c 	lsr.w	r4, r1, ip
 800e410:	ea45 0504 	orr.w	r5, r5, r4
 800e414:	bf8c      	ite	hi
 800e416:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e41a:	2400      	movls	r4, #0
 800e41c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e420:	fa01 f000 	lsl.w	r0, r1, r0
 800e424:	fa24 f40c 	lsr.w	r4, r4, ip
 800e428:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e42c:	ea40 0204 	orr.w	r2, r0, r4
 800e430:	e7db      	b.n	800e3ea <__b2d+0x4a>
 800e432:	ea44 030c 	orr.w	r3, r4, ip
 800e436:	460a      	mov	r2, r1
 800e438:	e7d7      	b.n	800e3ea <__b2d+0x4a>
 800e43a:	bf00      	nop
 800e43c:	3ff00000 	.word	0x3ff00000

0800e440 <__d2b>:
 800e440:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e444:	4689      	mov	r9, r1
 800e446:	2101      	movs	r1, #1
 800e448:	ec57 6b10 	vmov	r6, r7, d0
 800e44c:	4690      	mov	r8, r2
 800e44e:	f7ff fc09 	bl	800dc64 <_Balloc>
 800e452:	4604      	mov	r4, r0
 800e454:	b930      	cbnz	r0, 800e464 <__d2b+0x24>
 800e456:	4602      	mov	r2, r0
 800e458:	4b25      	ldr	r3, [pc, #148]	; (800e4f0 <__d2b+0xb0>)
 800e45a:	4826      	ldr	r0, [pc, #152]	; (800e4f4 <__d2b+0xb4>)
 800e45c:	f240 310a 	movw	r1, #778	; 0x30a
 800e460:	f000 fcce 	bl	800ee00 <__assert_func>
 800e464:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e468:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e46c:	bb35      	cbnz	r5, 800e4bc <__d2b+0x7c>
 800e46e:	2e00      	cmp	r6, #0
 800e470:	9301      	str	r3, [sp, #4]
 800e472:	d028      	beq.n	800e4c6 <__d2b+0x86>
 800e474:	4668      	mov	r0, sp
 800e476:	9600      	str	r6, [sp, #0]
 800e478:	f7ff fd06 	bl	800de88 <__lo0bits>
 800e47c:	9900      	ldr	r1, [sp, #0]
 800e47e:	b300      	cbz	r0, 800e4c2 <__d2b+0x82>
 800e480:	9a01      	ldr	r2, [sp, #4]
 800e482:	f1c0 0320 	rsb	r3, r0, #32
 800e486:	fa02 f303 	lsl.w	r3, r2, r3
 800e48a:	430b      	orrs	r3, r1
 800e48c:	40c2      	lsrs	r2, r0
 800e48e:	6163      	str	r3, [r4, #20]
 800e490:	9201      	str	r2, [sp, #4]
 800e492:	9b01      	ldr	r3, [sp, #4]
 800e494:	61a3      	str	r3, [r4, #24]
 800e496:	2b00      	cmp	r3, #0
 800e498:	bf14      	ite	ne
 800e49a:	2202      	movne	r2, #2
 800e49c:	2201      	moveq	r2, #1
 800e49e:	6122      	str	r2, [r4, #16]
 800e4a0:	b1d5      	cbz	r5, 800e4d8 <__d2b+0x98>
 800e4a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e4a6:	4405      	add	r5, r0
 800e4a8:	f8c9 5000 	str.w	r5, [r9]
 800e4ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e4b0:	f8c8 0000 	str.w	r0, [r8]
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	b003      	add	sp, #12
 800e4b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e4c0:	e7d5      	b.n	800e46e <__d2b+0x2e>
 800e4c2:	6161      	str	r1, [r4, #20]
 800e4c4:	e7e5      	b.n	800e492 <__d2b+0x52>
 800e4c6:	a801      	add	r0, sp, #4
 800e4c8:	f7ff fcde 	bl	800de88 <__lo0bits>
 800e4cc:	9b01      	ldr	r3, [sp, #4]
 800e4ce:	6163      	str	r3, [r4, #20]
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	6122      	str	r2, [r4, #16]
 800e4d4:	3020      	adds	r0, #32
 800e4d6:	e7e3      	b.n	800e4a0 <__d2b+0x60>
 800e4d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e4dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e4e0:	f8c9 0000 	str.w	r0, [r9]
 800e4e4:	6918      	ldr	r0, [r3, #16]
 800e4e6:	f7ff fcaf 	bl	800de48 <__hi0bits>
 800e4ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e4ee:	e7df      	b.n	800e4b0 <__d2b+0x70>
 800e4f0:	0800fe88 	.word	0x0800fe88
 800e4f4:	0800ff78 	.word	0x0800ff78

0800e4f8 <__ratio>:
 800e4f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4fc:	4688      	mov	r8, r1
 800e4fe:	4669      	mov	r1, sp
 800e500:	4681      	mov	r9, r0
 800e502:	f7ff ff4d 	bl	800e3a0 <__b2d>
 800e506:	a901      	add	r1, sp, #4
 800e508:	4640      	mov	r0, r8
 800e50a:	ec55 4b10 	vmov	r4, r5, d0
 800e50e:	f7ff ff47 	bl	800e3a0 <__b2d>
 800e512:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e516:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e51a:	eba3 0c02 	sub.w	ip, r3, r2
 800e51e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e522:	1a9b      	subs	r3, r3, r2
 800e524:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e528:	ec51 0b10 	vmov	r0, r1, d0
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	bfd6      	itet	le
 800e530:	460a      	movle	r2, r1
 800e532:	462a      	movgt	r2, r5
 800e534:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e538:	468b      	mov	fp, r1
 800e53a:	462f      	mov	r7, r5
 800e53c:	bfd4      	ite	le
 800e53e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e542:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e546:	4620      	mov	r0, r4
 800e548:	ee10 2a10 	vmov	r2, s0
 800e54c:	465b      	mov	r3, fp
 800e54e:	4639      	mov	r1, r7
 800e550:	f7f2 f98c 	bl	800086c <__aeabi_ddiv>
 800e554:	ec41 0b10 	vmov	d0, r0, r1
 800e558:	b003      	add	sp, #12
 800e55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e55e <__copybits>:
 800e55e:	3901      	subs	r1, #1
 800e560:	b570      	push	{r4, r5, r6, lr}
 800e562:	1149      	asrs	r1, r1, #5
 800e564:	6914      	ldr	r4, [r2, #16]
 800e566:	3101      	adds	r1, #1
 800e568:	f102 0314 	add.w	r3, r2, #20
 800e56c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e570:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e574:	1f05      	subs	r5, r0, #4
 800e576:	42a3      	cmp	r3, r4
 800e578:	d30c      	bcc.n	800e594 <__copybits+0x36>
 800e57a:	1aa3      	subs	r3, r4, r2
 800e57c:	3b11      	subs	r3, #17
 800e57e:	f023 0303 	bic.w	r3, r3, #3
 800e582:	3211      	adds	r2, #17
 800e584:	42a2      	cmp	r2, r4
 800e586:	bf88      	it	hi
 800e588:	2300      	movhi	r3, #0
 800e58a:	4418      	add	r0, r3
 800e58c:	2300      	movs	r3, #0
 800e58e:	4288      	cmp	r0, r1
 800e590:	d305      	bcc.n	800e59e <__copybits+0x40>
 800e592:	bd70      	pop	{r4, r5, r6, pc}
 800e594:	f853 6b04 	ldr.w	r6, [r3], #4
 800e598:	f845 6f04 	str.w	r6, [r5, #4]!
 800e59c:	e7eb      	b.n	800e576 <__copybits+0x18>
 800e59e:	f840 3b04 	str.w	r3, [r0], #4
 800e5a2:	e7f4      	b.n	800e58e <__copybits+0x30>

0800e5a4 <__any_on>:
 800e5a4:	f100 0214 	add.w	r2, r0, #20
 800e5a8:	6900      	ldr	r0, [r0, #16]
 800e5aa:	114b      	asrs	r3, r1, #5
 800e5ac:	4298      	cmp	r0, r3
 800e5ae:	b510      	push	{r4, lr}
 800e5b0:	db11      	blt.n	800e5d6 <__any_on+0x32>
 800e5b2:	dd0a      	ble.n	800e5ca <__any_on+0x26>
 800e5b4:	f011 011f 	ands.w	r1, r1, #31
 800e5b8:	d007      	beq.n	800e5ca <__any_on+0x26>
 800e5ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e5be:	fa24 f001 	lsr.w	r0, r4, r1
 800e5c2:	fa00 f101 	lsl.w	r1, r0, r1
 800e5c6:	428c      	cmp	r4, r1
 800e5c8:	d10b      	bne.n	800e5e2 <__any_on+0x3e>
 800e5ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d803      	bhi.n	800e5da <__any_on+0x36>
 800e5d2:	2000      	movs	r0, #0
 800e5d4:	bd10      	pop	{r4, pc}
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	e7f7      	b.n	800e5ca <__any_on+0x26>
 800e5da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e5de:	2900      	cmp	r1, #0
 800e5e0:	d0f5      	beq.n	800e5ce <__any_on+0x2a>
 800e5e2:	2001      	movs	r0, #1
 800e5e4:	e7f6      	b.n	800e5d4 <__any_on+0x30>

0800e5e6 <_calloc_r>:
 800e5e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5e8:	fba1 2402 	umull	r2, r4, r1, r2
 800e5ec:	b94c      	cbnz	r4, 800e602 <_calloc_r+0x1c>
 800e5ee:	4611      	mov	r1, r2
 800e5f0:	9201      	str	r2, [sp, #4]
 800e5f2:	f7fc fa3d 	bl	800aa70 <_malloc_r>
 800e5f6:	9a01      	ldr	r2, [sp, #4]
 800e5f8:	4605      	mov	r5, r0
 800e5fa:	b930      	cbnz	r0, 800e60a <_calloc_r+0x24>
 800e5fc:	4628      	mov	r0, r5
 800e5fe:	b003      	add	sp, #12
 800e600:	bd30      	pop	{r4, r5, pc}
 800e602:	220c      	movs	r2, #12
 800e604:	6002      	str	r2, [r0, #0]
 800e606:	2500      	movs	r5, #0
 800e608:	e7f8      	b.n	800e5fc <_calloc_r+0x16>
 800e60a:	4621      	mov	r1, r4
 800e60c:	f7fc f9bc 	bl	800a988 <memset>
 800e610:	e7f4      	b.n	800e5fc <_calloc_r+0x16>

0800e612 <__ssputs_r>:
 800e612:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e616:	688e      	ldr	r6, [r1, #8]
 800e618:	429e      	cmp	r6, r3
 800e61a:	4682      	mov	sl, r0
 800e61c:	460c      	mov	r4, r1
 800e61e:	4690      	mov	r8, r2
 800e620:	461f      	mov	r7, r3
 800e622:	d838      	bhi.n	800e696 <__ssputs_r+0x84>
 800e624:	898a      	ldrh	r2, [r1, #12]
 800e626:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e62a:	d032      	beq.n	800e692 <__ssputs_r+0x80>
 800e62c:	6825      	ldr	r5, [r4, #0]
 800e62e:	6909      	ldr	r1, [r1, #16]
 800e630:	eba5 0901 	sub.w	r9, r5, r1
 800e634:	6965      	ldr	r5, [r4, #20]
 800e636:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e63a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e63e:	3301      	adds	r3, #1
 800e640:	444b      	add	r3, r9
 800e642:	106d      	asrs	r5, r5, #1
 800e644:	429d      	cmp	r5, r3
 800e646:	bf38      	it	cc
 800e648:	461d      	movcc	r5, r3
 800e64a:	0553      	lsls	r3, r2, #21
 800e64c:	d531      	bpl.n	800e6b2 <__ssputs_r+0xa0>
 800e64e:	4629      	mov	r1, r5
 800e650:	f7fc fa0e 	bl	800aa70 <_malloc_r>
 800e654:	4606      	mov	r6, r0
 800e656:	b950      	cbnz	r0, 800e66e <__ssputs_r+0x5c>
 800e658:	230c      	movs	r3, #12
 800e65a:	f8ca 3000 	str.w	r3, [sl]
 800e65e:	89a3      	ldrh	r3, [r4, #12]
 800e660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e664:	81a3      	strh	r3, [r4, #12]
 800e666:	f04f 30ff 	mov.w	r0, #4294967295
 800e66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e66e:	6921      	ldr	r1, [r4, #16]
 800e670:	464a      	mov	r2, r9
 800e672:	f7ff fadc 	bl	800dc2e <memcpy>
 800e676:	89a3      	ldrh	r3, [r4, #12]
 800e678:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e67c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e680:	81a3      	strh	r3, [r4, #12]
 800e682:	6126      	str	r6, [r4, #16]
 800e684:	6165      	str	r5, [r4, #20]
 800e686:	444e      	add	r6, r9
 800e688:	eba5 0509 	sub.w	r5, r5, r9
 800e68c:	6026      	str	r6, [r4, #0]
 800e68e:	60a5      	str	r5, [r4, #8]
 800e690:	463e      	mov	r6, r7
 800e692:	42be      	cmp	r6, r7
 800e694:	d900      	bls.n	800e698 <__ssputs_r+0x86>
 800e696:	463e      	mov	r6, r7
 800e698:	6820      	ldr	r0, [r4, #0]
 800e69a:	4632      	mov	r2, r6
 800e69c:	4641      	mov	r1, r8
 800e69e:	f000 fd29 	bl	800f0f4 <memmove>
 800e6a2:	68a3      	ldr	r3, [r4, #8]
 800e6a4:	1b9b      	subs	r3, r3, r6
 800e6a6:	60a3      	str	r3, [r4, #8]
 800e6a8:	6823      	ldr	r3, [r4, #0]
 800e6aa:	4433      	add	r3, r6
 800e6ac:	6023      	str	r3, [r4, #0]
 800e6ae:	2000      	movs	r0, #0
 800e6b0:	e7db      	b.n	800e66a <__ssputs_r+0x58>
 800e6b2:	462a      	mov	r2, r5
 800e6b4:	f000 fd38 	bl	800f128 <_realloc_r>
 800e6b8:	4606      	mov	r6, r0
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	d1e1      	bne.n	800e682 <__ssputs_r+0x70>
 800e6be:	6921      	ldr	r1, [r4, #16]
 800e6c0:	4650      	mov	r0, sl
 800e6c2:	f7fc f969 	bl	800a998 <_free_r>
 800e6c6:	e7c7      	b.n	800e658 <__ssputs_r+0x46>

0800e6c8 <_svfiprintf_r>:
 800e6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6cc:	4698      	mov	r8, r3
 800e6ce:	898b      	ldrh	r3, [r1, #12]
 800e6d0:	061b      	lsls	r3, r3, #24
 800e6d2:	b09d      	sub	sp, #116	; 0x74
 800e6d4:	4607      	mov	r7, r0
 800e6d6:	460d      	mov	r5, r1
 800e6d8:	4614      	mov	r4, r2
 800e6da:	d50e      	bpl.n	800e6fa <_svfiprintf_r+0x32>
 800e6dc:	690b      	ldr	r3, [r1, #16]
 800e6de:	b963      	cbnz	r3, 800e6fa <_svfiprintf_r+0x32>
 800e6e0:	2140      	movs	r1, #64	; 0x40
 800e6e2:	f7fc f9c5 	bl	800aa70 <_malloc_r>
 800e6e6:	6028      	str	r0, [r5, #0]
 800e6e8:	6128      	str	r0, [r5, #16]
 800e6ea:	b920      	cbnz	r0, 800e6f6 <_svfiprintf_r+0x2e>
 800e6ec:	230c      	movs	r3, #12
 800e6ee:	603b      	str	r3, [r7, #0]
 800e6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f4:	e0d1      	b.n	800e89a <_svfiprintf_r+0x1d2>
 800e6f6:	2340      	movs	r3, #64	; 0x40
 800e6f8:	616b      	str	r3, [r5, #20]
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	9309      	str	r3, [sp, #36]	; 0x24
 800e6fe:	2320      	movs	r3, #32
 800e700:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e704:	f8cd 800c 	str.w	r8, [sp, #12]
 800e708:	2330      	movs	r3, #48	; 0x30
 800e70a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e8b4 <_svfiprintf_r+0x1ec>
 800e70e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e712:	f04f 0901 	mov.w	r9, #1
 800e716:	4623      	mov	r3, r4
 800e718:	469a      	mov	sl, r3
 800e71a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e71e:	b10a      	cbz	r2, 800e724 <_svfiprintf_r+0x5c>
 800e720:	2a25      	cmp	r2, #37	; 0x25
 800e722:	d1f9      	bne.n	800e718 <_svfiprintf_r+0x50>
 800e724:	ebba 0b04 	subs.w	fp, sl, r4
 800e728:	d00b      	beq.n	800e742 <_svfiprintf_r+0x7a>
 800e72a:	465b      	mov	r3, fp
 800e72c:	4622      	mov	r2, r4
 800e72e:	4629      	mov	r1, r5
 800e730:	4638      	mov	r0, r7
 800e732:	f7ff ff6e 	bl	800e612 <__ssputs_r>
 800e736:	3001      	adds	r0, #1
 800e738:	f000 80aa 	beq.w	800e890 <_svfiprintf_r+0x1c8>
 800e73c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e73e:	445a      	add	r2, fp
 800e740:	9209      	str	r2, [sp, #36]	; 0x24
 800e742:	f89a 3000 	ldrb.w	r3, [sl]
 800e746:	2b00      	cmp	r3, #0
 800e748:	f000 80a2 	beq.w	800e890 <_svfiprintf_r+0x1c8>
 800e74c:	2300      	movs	r3, #0
 800e74e:	f04f 32ff 	mov.w	r2, #4294967295
 800e752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e756:	f10a 0a01 	add.w	sl, sl, #1
 800e75a:	9304      	str	r3, [sp, #16]
 800e75c:	9307      	str	r3, [sp, #28]
 800e75e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e762:	931a      	str	r3, [sp, #104]	; 0x68
 800e764:	4654      	mov	r4, sl
 800e766:	2205      	movs	r2, #5
 800e768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e76c:	4851      	ldr	r0, [pc, #324]	; (800e8b4 <_svfiprintf_r+0x1ec>)
 800e76e:	f7f1 fd47 	bl	8000200 <memchr>
 800e772:	9a04      	ldr	r2, [sp, #16]
 800e774:	b9d8      	cbnz	r0, 800e7ae <_svfiprintf_r+0xe6>
 800e776:	06d0      	lsls	r0, r2, #27
 800e778:	bf44      	itt	mi
 800e77a:	2320      	movmi	r3, #32
 800e77c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e780:	0711      	lsls	r1, r2, #28
 800e782:	bf44      	itt	mi
 800e784:	232b      	movmi	r3, #43	; 0x2b
 800e786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e78a:	f89a 3000 	ldrb.w	r3, [sl]
 800e78e:	2b2a      	cmp	r3, #42	; 0x2a
 800e790:	d015      	beq.n	800e7be <_svfiprintf_r+0xf6>
 800e792:	9a07      	ldr	r2, [sp, #28]
 800e794:	4654      	mov	r4, sl
 800e796:	2000      	movs	r0, #0
 800e798:	f04f 0c0a 	mov.w	ip, #10
 800e79c:	4621      	mov	r1, r4
 800e79e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7a2:	3b30      	subs	r3, #48	; 0x30
 800e7a4:	2b09      	cmp	r3, #9
 800e7a6:	d94e      	bls.n	800e846 <_svfiprintf_r+0x17e>
 800e7a8:	b1b0      	cbz	r0, 800e7d8 <_svfiprintf_r+0x110>
 800e7aa:	9207      	str	r2, [sp, #28]
 800e7ac:	e014      	b.n	800e7d8 <_svfiprintf_r+0x110>
 800e7ae:	eba0 0308 	sub.w	r3, r0, r8
 800e7b2:	fa09 f303 	lsl.w	r3, r9, r3
 800e7b6:	4313      	orrs	r3, r2
 800e7b8:	9304      	str	r3, [sp, #16]
 800e7ba:	46a2      	mov	sl, r4
 800e7bc:	e7d2      	b.n	800e764 <_svfiprintf_r+0x9c>
 800e7be:	9b03      	ldr	r3, [sp, #12]
 800e7c0:	1d19      	adds	r1, r3, #4
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	9103      	str	r1, [sp, #12]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	bfbb      	ittet	lt
 800e7ca:	425b      	neglt	r3, r3
 800e7cc:	f042 0202 	orrlt.w	r2, r2, #2
 800e7d0:	9307      	strge	r3, [sp, #28]
 800e7d2:	9307      	strlt	r3, [sp, #28]
 800e7d4:	bfb8      	it	lt
 800e7d6:	9204      	strlt	r2, [sp, #16]
 800e7d8:	7823      	ldrb	r3, [r4, #0]
 800e7da:	2b2e      	cmp	r3, #46	; 0x2e
 800e7dc:	d10c      	bne.n	800e7f8 <_svfiprintf_r+0x130>
 800e7de:	7863      	ldrb	r3, [r4, #1]
 800e7e0:	2b2a      	cmp	r3, #42	; 0x2a
 800e7e2:	d135      	bne.n	800e850 <_svfiprintf_r+0x188>
 800e7e4:	9b03      	ldr	r3, [sp, #12]
 800e7e6:	1d1a      	adds	r2, r3, #4
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	9203      	str	r2, [sp, #12]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	bfb8      	it	lt
 800e7f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e7f4:	3402      	adds	r4, #2
 800e7f6:	9305      	str	r3, [sp, #20]
 800e7f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e8c4 <_svfiprintf_r+0x1fc>
 800e7fc:	7821      	ldrb	r1, [r4, #0]
 800e7fe:	2203      	movs	r2, #3
 800e800:	4650      	mov	r0, sl
 800e802:	f7f1 fcfd 	bl	8000200 <memchr>
 800e806:	b140      	cbz	r0, 800e81a <_svfiprintf_r+0x152>
 800e808:	2340      	movs	r3, #64	; 0x40
 800e80a:	eba0 000a 	sub.w	r0, r0, sl
 800e80e:	fa03 f000 	lsl.w	r0, r3, r0
 800e812:	9b04      	ldr	r3, [sp, #16]
 800e814:	4303      	orrs	r3, r0
 800e816:	3401      	adds	r4, #1
 800e818:	9304      	str	r3, [sp, #16]
 800e81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e81e:	4826      	ldr	r0, [pc, #152]	; (800e8b8 <_svfiprintf_r+0x1f0>)
 800e820:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e824:	2206      	movs	r2, #6
 800e826:	f7f1 fceb 	bl	8000200 <memchr>
 800e82a:	2800      	cmp	r0, #0
 800e82c:	d038      	beq.n	800e8a0 <_svfiprintf_r+0x1d8>
 800e82e:	4b23      	ldr	r3, [pc, #140]	; (800e8bc <_svfiprintf_r+0x1f4>)
 800e830:	bb1b      	cbnz	r3, 800e87a <_svfiprintf_r+0x1b2>
 800e832:	9b03      	ldr	r3, [sp, #12]
 800e834:	3307      	adds	r3, #7
 800e836:	f023 0307 	bic.w	r3, r3, #7
 800e83a:	3308      	adds	r3, #8
 800e83c:	9303      	str	r3, [sp, #12]
 800e83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e840:	4433      	add	r3, r6
 800e842:	9309      	str	r3, [sp, #36]	; 0x24
 800e844:	e767      	b.n	800e716 <_svfiprintf_r+0x4e>
 800e846:	fb0c 3202 	mla	r2, ip, r2, r3
 800e84a:	460c      	mov	r4, r1
 800e84c:	2001      	movs	r0, #1
 800e84e:	e7a5      	b.n	800e79c <_svfiprintf_r+0xd4>
 800e850:	2300      	movs	r3, #0
 800e852:	3401      	adds	r4, #1
 800e854:	9305      	str	r3, [sp, #20]
 800e856:	4619      	mov	r1, r3
 800e858:	f04f 0c0a 	mov.w	ip, #10
 800e85c:	4620      	mov	r0, r4
 800e85e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e862:	3a30      	subs	r2, #48	; 0x30
 800e864:	2a09      	cmp	r2, #9
 800e866:	d903      	bls.n	800e870 <_svfiprintf_r+0x1a8>
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d0c5      	beq.n	800e7f8 <_svfiprintf_r+0x130>
 800e86c:	9105      	str	r1, [sp, #20]
 800e86e:	e7c3      	b.n	800e7f8 <_svfiprintf_r+0x130>
 800e870:	fb0c 2101 	mla	r1, ip, r1, r2
 800e874:	4604      	mov	r4, r0
 800e876:	2301      	movs	r3, #1
 800e878:	e7f0      	b.n	800e85c <_svfiprintf_r+0x194>
 800e87a:	ab03      	add	r3, sp, #12
 800e87c:	9300      	str	r3, [sp, #0]
 800e87e:	462a      	mov	r2, r5
 800e880:	4b0f      	ldr	r3, [pc, #60]	; (800e8c0 <_svfiprintf_r+0x1f8>)
 800e882:	a904      	add	r1, sp, #16
 800e884:	4638      	mov	r0, r7
 800e886:	f7fc fa07 	bl	800ac98 <_printf_float>
 800e88a:	1c42      	adds	r2, r0, #1
 800e88c:	4606      	mov	r6, r0
 800e88e:	d1d6      	bne.n	800e83e <_svfiprintf_r+0x176>
 800e890:	89ab      	ldrh	r3, [r5, #12]
 800e892:	065b      	lsls	r3, r3, #25
 800e894:	f53f af2c 	bmi.w	800e6f0 <_svfiprintf_r+0x28>
 800e898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e89a:	b01d      	add	sp, #116	; 0x74
 800e89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8a0:	ab03      	add	r3, sp, #12
 800e8a2:	9300      	str	r3, [sp, #0]
 800e8a4:	462a      	mov	r2, r5
 800e8a6:	4b06      	ldr	r3, [pc, #24]	; (800e8c0 <_svfiprintf_r+0x1f8>)
 800e8a8:	a904      	add	r1, sp, #16
 800e8aa:	4638      	mov	r0, r7
 800e8ac:	f7fc fc98 	bl	800b1e0 <_printf_i>
 800e8b0:	e7eb      	b.n	800e88a <_svfiprintf_r+0x1c2>
 800e8b2:	bf00      	nop
 800e8b4:	080100d4 	.word	0x080100d4
 800e8b8:	080100de 	.word	0x080100de
 800e8bc:	0800ac99 	.word	0x0800ac99
 800e8c0:	0800e613 	.word	0x0800e613
 800e8c4:	080100da 	.word	0x080100da

0800e8c8 <__sfputc_r>:
 800e8c8:	6893      	ldr	r3, [r2, #8]
 800e8ca:	3b01      	subs	r3, #1
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	b410      	push	{r4}
 800e8d0:	6093      	str	r3, [r2, #8]
 800e8d2:	da08      	bge.n	800e8e6 <__sfputc_r+0x1e>
 800e8d4:	6994      	ldr	r4, [r2, #24]
 800e8d6:	42a3      	cmp	r3, r4
 800e8d8:	db01      	blt.n	800e8de <__sfputc_r+0x16>
 800e8da:	290a      	cmp	r1, #10
 800e8dc:	d103      	bne.n	800e8e6 <__sfputc_r+0x1e>
 800e8de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8e2:	f000 b9ad 	b.w	800ec40 <__swbuf_r>
 800e8e6:	6813      	ldr	r3, [r2, #0]
 800e8e8:	1c58      	adds	r0, r3, #1
 800e8ea:	6010      	str	r0, [r2, #0]
 800e8ec:	7019      	strb	r1, [r3, #0]
 800e8ee:	4608      	mov	r0, r1
 800e8f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8f4:	4770      	bx	lr

0800e8f6 <__sfputs_r>:
 800e8f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8f8:	4606      	mov	r6, r0
 800e8fa:	460f      	mov	r7, r1
 800e8fc:	4614      	mov	r4, r2
 800e8fe:	18d5      	adds	r5, r2, r3
 800e900:	42ac      	cmp	r4, r5
 800e902:	d101      	bne.n	800e908 <__sfputs_r+0x12>
 800e904:	2000      	movs	r0, #0
 800e906:	e007      	b.n	800e918 <__sfputs_r+0x22>
 800e908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e90c:	463a      	mov	r2, r7
 800e90e:	4630      	mov	r0, r6
 800e910:	f7ff ffda 	bl	800e8c8 <__sfputc_r>
 800e914:	1c43      	adds	r3, r0, #1
 800e916:	d1f3      	bne.n	800e900 <__sfputs_r+0xa>
 800e918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e91c <_vfiprintf_r>:
 800e91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e920:	460d      	mov	r5, r1
 800e922:	b09d      	sub	sp, #116	; 0x74
 800e924:	4614      	mov	r4, r2
 800e926:	4698      	mov	r8, r3
 800e928:	4606      	mov	r6, r0
 800e92a:	b118      	cbz	r0, 800e934 <_vfiprintf_r+0x18>
 800e92c:	6983      	ldr	r3, [r0, #24]
 800e92e:	b90b      	cbnz	r3, 800e934 <_vfiprintf_r+0x18>
 800e930:	f7fe fd58 	bl	800d3e4 <__sinit>
 800e934:	4b89      	ldr	r3, [pc, #548]	; (800eb5c <_vfiprintf_r+0x240>)
 800e936:	429d      	cmp	r5, r3
 800e938:	d11b      	bne.n	800e972 <_vfiprintf_r+0x56>
 800e93a:	6875      	ldr	r5, [r6, #4]
 800e93c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e93e:	07d9      	lsls	r1, r3, #31
 800e940:	d405      	bmi.n	800e94e <_vfiprintf_r+0x32>
 800e942:	89ab      	ldrh	r3, [r5, #12]
 800e944:	059a      	lsls	r2, r3, #22
 800e946:	d402      	bmi.n	800e94e <_vfiprintf_r+0x32>
 800e948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e94a:	f7ff f95c 	bl	800dc06 <__retarget_lock_acquire_recursive>
 800e94e:	89ab      	ldrh	r3, [r5, #12]
 800e950:	071b      	lsls	r3, r3, #28
 800e952:	d501      	bpl.n	800e958 <_vfiprintf_r+0x3c>
 800e954:	692b      	ldr	r3, [r5, #16]
 800e956:	b9eb      	cbnz	r3, 800e994 <_vfiprintf_r+0x78>
 800e958:	4629      	mov	r1, r5
 800e95a:	4630      	mov	r0, r6
 800e95c:	f000 f9e2 	bl	800ed24 <__swsetup_r>
 800e960:	b1c0      	cbz	r0, 800e994 <_vfiprintf_r+0x78>
 800e962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e964:	07dc      	lsls	r4, r3, #31
 800e966:	d50e      	bpl.n	800e986 <_vfiprintf_r+0x6a>
 800e968:	f04f 30ff 	mov.w	r0, #4294967295
 800e96c:	b01d      	add	sp, #116	; 0x74
 800e96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e972:	4b7b      	ldr	r3, [pc, #492]	; (800eb60 <_vfiprintf_r+0x244>)
 800e974:	429d      	cmp	r5, r3
 800e976:	d101      	bne.n	800e97c <_vfiprintf_r+0x60>
 800e978:	68b5      	ldr	r5, [r6, #8]
 800e97a:	e7df      	b.n	800e93c <_vfiprintf_r+0x20>
 800e97c:	4b79      	ldr	r3, [pc, #484]	; (800eb64 <_vfiprintf_r+0x248>)
 800e97e:	429d      	cmp	r5, r3
 800e980:	bf08      	it	eq
 800e982:	68f5      	ldreq	r5, [r6, #12]
 800e984:	e7da      	b.n	800e93c <_vfiprintf_r+0x20>
 800e986:	89ab      	ldrh	r3, [r5, #12]
 800e988:	0598      	lsls	r0, r3, #22
 800e98a:	d4ed      	bmi.n	800e968 <_vfiprintf_r+0x4c>
 800e98c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e98e:	f7ff f93b 	bl	800dc08 <__retarget_lock_release_recursive>
 800e992:	e7e9      	b.n	800e968 <_vfiprintf_r+0x4c>
 800e994:	2300      	movs	r3, #0
 800e996:	9309      	str	r3, [sp, #36]	; 0x24
 800e998:	2320      	movs	r3, #32
 800e99a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e99e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9a2:	2330      	movs	r3, #48	; 0x30
 800e9a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eb68 <_vfiprintf_r+0x24c>
 800e9a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9ac:	f04f 0901 	mov.w	r9, #1
 800e9b0:	4623      	mov	r3, r4
 800e9b2:	469a      	mov	sl, r3
 800e9b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9b8:	b10a      	cbz	r2, 800e9be <_vfiprintf_r+0xa2>
 800e9ba:	2a25      	cmp	r2, #37	; 0x25
 800e9bc:	d1f9      	bne.n	800e9b2 <_vfiprintf_r+0x96>
 800e9be:	ebba 0b04 	subs.w	fp, sl, r4
 800e9c2:	d00b      	beq.n	800e9dc <_vfiprintf_r+0xc0>
 800e9c4:	465b      	mov	r3, fp
 800e9c6:	4622      	mov	r2, r4
 800e9c8:	4629      	mov	r1, r5
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	f7ff ff93 	bl	800e8f6 <__sfputs_r>
 800e9d0:	3001      	adds	r0, #1
 800e9d2:	f000 80aa 	beq.w	800eb2a <_vfiprintf_r+0x20e>
 800e9d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9d8:	445a      	add	r2, fp
 800e9da:	9209      	str	r2, [sp, #36]	; 0x24
 800e9dc:	f89a 3000 	ldrb.w	r3, [sl]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f000 80a2 	beq.w	800eb2a <_vfiprintf_r+0x20e>
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e9ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9f0:	f10a 0a01 	add.w	sl, sl, #1
 800e9f4:	9304      	str	r3, [sp, #16]
 800e9f6:	9307      	str	r3, [sp, #28]
 800e9f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e9fc:	931a      	str	r3, [sp, #104]	; 0x68
 800e9fe:	4654      	mov	r4, sl
 800ea00:	2205      	movs	r2, #5
 800ea02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea06:	4858      	ldr	r0, [pc, #352]	; (800eb68 <_vfiprintf_r+0x24c>)
 800ea08:	f7f1 fbfa 	bl	8000200 <memchr>
 800ea0c:	9a04      	ldr	r2, [sp, #16]
 800ea0e:	b9d8      	cbnz	r0, 800ea48 <_vfiprintf_r+0x12c>
 800ea10:	06d1      	lsls	r1, r2, #27
 800ea12:	bf44      	itt	mi
 800ea14:	2320      	movmi	r3, #32
 800ea16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea1a:	0713      	lsls	r3, r2, #28
 800ea1c:	bf44      	itt	mi
 800ea1e:	232b      	movmi	r3, #43	; 0x2b
 800ea20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea24:	f89a 3000 	ldrb.w	r3, [sl]
 800ea28:	2b2a      	cmp	r3, #42	; 0x2a
 800ea2a:	d015      	beq.n	800ea58 <_vfiprintf_r+0x13c>
 800ea2c:	9a07      	ldr	r2, [sp, #28]
 800ea2e:	4654      	mov	r4, sl
 800ea30:	2000      	movs	r0, #0
 800ea32:	f04f 0c0a 	mov.w	ip, #10
 800ea36:	4621      	mov	r1, r4
 800ea38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea3c:	3b30      	subs	r3, #48	; 0x30
 800ea3e:	2b09      	cmp	r3, #9
 800ea40:	d94e      	bls.n	800eae0 <_vfiprintf_r+0x1c4>
 800ea42:	b1b0      	cbz	r0, 800ea72 <_vfiprintf_r+0x156>
 800ea44:	9207      	str	r2, [sp, #28]
 800ea46:	e014      	b.n	800ea72 <_vfiprintf_r+0x156>
 800ea48:	eba0 0308 	sub.w	r3, r0, r8
 800ea4c:	fa09 f303 	lsl.w	r3, r9, r3
 800ea50:	4313      	orrs	r3, r2
 800ea52:	9304      	str	r3, [sp, #16]
 800ea54:	46a2      	mov	sl, r4
 800ea56:	e7d2      	b.n	800e9fe <_vfiprintf_r+0xe2>
 800ea58:	9b03      	ldr	r3, [sp, #12]
 800ea5a:	1d19      	adds	r1, r3, #4
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	9103      	str	r1, [sp, #12]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	bfbb      	ittet	lt
 800ea64:	425b      	neglt	r3, r3
 800ea66:	f042 0202 	orrlt.w	r2, r2, #2
 800ea6a:	9307      	strge	r3, [sp, #28]
 800ea6c:	9307      	strlt	r3, [sp, #28]
 800ea6e:	bfb8      	it	lt
 800ea70:	9204      	strlt	r2, [sp, #16]
 800ea72:	7823      	ldrb	r3, [r4, #0]
 800ea74:	2b2e      	cmp	r3, #46	; 0x2e
 800ea76:	d10c      	bne.n	800ea92 <_vfiprintf_r+0x176>
 800ea78:	7863      	ldrb	r3, [r4, #1]
 800ea7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ea7c:	d135      	bne.n	800eaea <_vfiprintf_r+0x1ce>
 800ea7e:	9b03      	ldr	r3, [sp, #12]
 800ea80:	1d1a      	adds	r2, r3, #4
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	9203      	str	r2, [sp, #12]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	bfb8      	it	lt
 800ea8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea8e:	3402      	adds	r4, #2
 800ea90:	9305      	str	r3, [sp, #20]
 800ea92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eb78 <_vfiprintf_r+0x25c>
 800ea96:	7821      	ldrb	r1, [r4, #0]
 800ea98:	2203      	movs	r2, #3
 800ea9a:	4650      	mov	r0, sl
 800ea9c:	f7f1 fbb0 	bl	8000200 <memchr>
 800eaa0:	b140      	cbz	r0, 800eab4 <_vfiprintf_r+0x198>
 800eaa2:	2340      	movs	r3, #64	; 0x40
 800eaa4:	eba0 000a 	sub.w	r0, r0, sl
 800eaa8:	fa03 f000 	lsl.w	r0, r3, r0
 800eaac:	9b04      	ldr	r3, [sp, #16]
 800eaae:	4303      	orrs	r3, r0
 800eab0:	3401      	adds	r4, #1
 800eab2:	9304      	str	r3, [sp, #16]
 800eab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eab8:	482c      	ldr	r0, [pc, #176]	; (800eb6c <_vfiprintf_r+0x250>)
 800eaba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eabe:	2206      	movs	r2, #6
 800eac0:	f7f1 fb9e 	bl	8000200 <memchr>
 800eac4:	2800      	cmp	r0, #0
 800eac6:	d03f      	beq.n	800eb48 <_vfiprintf_r+0x22c>
 800eac8:	4b29      	ldr	r3, [pc, #164]	; (800eb70 <_vfiprintf_r+0x254>)
 800eaca:	bb1b      	cbnz	r3, 800eb14 <_vfiprintf_r+0x1f8>
 800eacc:	9b03      	ldr	r3, [sp, #12]
 800eace:	3307      	adds	r3, #7
 800ead0:	f023 0307 	bic.w	r3, r3, #7
 800ead4:	3308      	adds	r3, #8
 800ead6:	9303      	str	r3, [sp, #12]
 800ead8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eada:	443b      	add	r3, r7
 800eadc:	9309      	str	r3, [sp, #36]	; 0x24
 800eade:	e767      	b.n	800e9b0 <_vfiprintf_r+0x94>
 800eae0:	fb0c 3202 	mla	r2, ip, r2, r3
 800eae4:	460c      	mov	r4, r1
 800eae6:	2001      	movs	r0, #1
 800eae8:	e7a5      	b.n	800ea36 <_vfiprintf_r+0x11a>
 800eaea:	2300      	movs	r3, #0
 800eaec:	3401      	adds	r4, #1
 800eaee:	9305      	str	r3, [sp, #20]
 800eaf0:	4619      	mov	r1, r3
 800eaf2:	f04f 0c0a 	mov.w	ip, #10
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eafc:	3a30      	subs	r2, #48	; 0x30
 800eafe:	2a09      	cmp	r2, #9
 800eb00:	d903      	bls.n	800eb0a <_vfiprintf_r+0x1ee>
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d0c5      	beq.n	800ea92 <_vfiprintf_r+0x176>
 800eb06:	9105      	str	r1, [sp, #20]
 800eb08:	e7c3      	b.n	800ea92 <_vfiprintf_r+0x176>
 800eb0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb0e:	4604      	mov	r4, r0
 800eb10:	2301      	movs	r3, #1
 800eb12:	e7f0      	b.n	800eaf6 <_vfiprintf_r+0x1da>
 800eb14:	ab03      	add	r3, sp, #12
 800eb16:	9300      	str	r3, [sp, #0]
 800eb18:	462a      	mov	r2, r5
 800eb1a:	4b16      	ldr	r3, [pc, #88]	; (800eb74 <_vfiprintf_r+0x258>)
 800eb1c:	a904      	add	r1, sp, #16
 800eb1e:	4630      	mov	r0, r6
 800eb20:	f7fc f8ba 	bl	800ac98 <_printf_float>
 800eb24:	4607      	mov	r7, r0
 800eb26:	1c78      	adds	r0, r7, #1
 800eb28:	d1d6      	bne.n	800ead8 <_vfiprintf_r+0x1bc>
 800eb2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb2c:	07d9      	lsls	r1, r3, #31
 800eb2e:	d405      	bmi.n	800eb3c <_vfiprintf_r+0x220>
 800eb30:	89ab      	ldrh	r3, [r5, #12]
 800eb32:	059a      	lsls	r2, r3, #22
 800eb34:	d402      	bmi.n	800eb3c <_vfiprintf_r+0x220>
 800eb36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb38:	f7ff f866 	bl	800dc08 <__retarget_lock_release_recursive>
 800eb3c:	89ab      	ldrh	r3, [r5, #12]
 800eb3e:	065b      	lsls	r3, r3, #25
 800eb40:	f53f af12 	bmi.w	800e968 <_vfiprintf_r+0x4c>
 800eb44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb46:	e711      	b.n	800e96c <_vfiprintf_r+0x50>
 800eb48:	ab03      	add	r3, sp, #12
 800eb4a:	9300      	str	r3, [sp, #0]
 800eb4c:	462a      	mov	r2, r5
 800eb4e:	4b09      	ldr	r3, [pc, #36]	; (800eb74 <_vfiprintf_r+0x258>)
 800eb50:	a904      	add	r1, sp, #16
 800eb52:	4630      	mov	r0, r6
 800eb54:	f7fc fb44 	bl	800b1e0 <_printf_i>
 800eb58:	e7e4      	b.n	800eb24 <_vfiprintf_r+0x208>
 800eb5a:	bf00      	nop
 800eb5c:	0800febc 	.word	0x0800febc
 800eb60:	0800fedc 	.word	0x0800fedc
 800eb64:	0800fe9c 	.word	0x0800fe9c
 800eb68:	080100d4 	.word	0x080100d4
 800eb6c:	080100de 	.word	0x080100de
 800eb70:	0800ac99 	.word	0x0800ac99
 800eb74:	0800e8f7 	.word	0x0800e8f7
 800eb78:	080100da 	.word	0x080100da
 800eb7c:	00000000 	.word	0x00000000

0800eb80 <nan>:
 800eb80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800eb88 <nan+0x8>
 800eb84:	4770      	bx	lr
 800eb86:	bf00      	nop
 800eb88:	00000000 	.word	0x00000000
 800eb8c:	7ff80000 	.word	0x7ff80000

0800eb90 <__sread>:
 800eb90:	b510      	push	{r4, lr}
 800eb92:	460c      	mov	r4, r1
 800eb94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb98:	f000 faf6 	bl	800f188 <_read_r>
 800eb9c:	2800      	cmp	r0, #0
 800eb9e:	bfab      	itete	ge
 800eba0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eba2:	89a3      	ldrhlt	r3, [r4, #12]
 800eba4:	181b      	addge	r3, r3, r0
 800eba6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ebaa:	bfac      	ite	ge
 800ebac:	6563      	strge	r3, [r4, #84]	; 0x54
 800ebae:	81a3      	strhlt	r3, [r4, #12]
 800ebb0:	bd10      	pop	{r4, pc}

0800ebb2 <__swrite>:
 800ebb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebb6:	461f      	mov	r7, r3
 800ebb8:	898b      	ldrh	r3, [r1, #12]
 800ebba:	05db      	lsls	r3, r3, #23
 800ebbc:	4605      	mov	r5, r0
 800ebbe:	460c      	mov	r4, r1
 800ebc0:	4616      	mov	r6, r2
 800ebc2:	d505      	bpl.n	800ebd0 <__swrite+0x1e>
 800ebc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebc8:	2302      	movs	r3, #2
 800ebca:	2200      	movs	r2, #0
 800ebcc:	f000 fa1a 	bl	800f004 <_lseek_r>
 800ebd0:	89a3      	ldrh	r3, [r4, #12]
 800ebd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ebda:	81a3      	strh	r3, [r4, #12]
 800ebdc:	4632      	mov	r2, r6
 800ebde:	463b      	mov	r3, r7
 800ebe0:	4628      	mov	r0, r5
 800ebe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebe6:	f000 b88b 	b.w	800ed00 <_write_r>

0800ebea <__sseek>:
 800ebea:	b510      	push	{r4, lr}
 800ebec:	460c      	mov	r4, r1
 800ebee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebf2:	f000 fa07 	bl	800f004 <_lseek_r>
 800ebf6:	1c43      	adds	r3, r0, #1
 800ebf8:	89a3      	ldrh	r3, [r4, #12]
 800ebfa:	bf15      	itete	ne
 800ebfc:	6560      	strne	r0, [r4, #84]	; 0x54
 800ebfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ec02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ec06:	81a3      	strheq	r3, [r4, #12]
 800ec08:	bf18      	it	ne
 800ec0a:	81a3      	strhne	r3, [r4, #12]
 800ec0c:	bd10      	pop	{r4, pc}

0800ec0e <__sclose>:
 800ec0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec12:	f000 b913 	b.w	800ee3c <_close_r>

0800ec16 <strncmp>:
 800ec16:	b510      	push	{r4, lr}
 800ec18:	b17a      	cbz	r2, 800ec3a <strncmp+0x24>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	3901      	subs	r1, #1
 800ec1e:	1884      	adds	r4, r0, r2
 800ec20:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ec24:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ec28:	4290      	cmp	r0, r2
 800ec2a:	d101      	bne.n	800ec30 <strncmp+0x1a>
 800ec2c:	42a3      	cmp	r3, r4
 800ec2e:	d101      	bne.n	800ec34 <strncmp+0x1e>
 800ec30:	1a80      	subs	r0, r0, r2
 800ec32:	bd10      	pop	{r4, pc}
 800ec34:	2800      	cmp	r0, #0
 800ec36:	d1f3      	bne.n	800ec20 <strncmp+0xa>
 800ec38:	e7fa      	b.n	800ec30 <strncmp+0x1a>
 800ec3a:	4610      	mov	r0, r2
 800ec3c:	e7f9      	b.n	800ec32 <strncmp+0x1c>
	...

0800ec40 <__swbuf_r>:
 800ec40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec42:	460e      	mov	r6, r1
 800ec44:	4614      	mov	r4, r2
 800ec46:	4605      	mov	r5, r0
 800ec48:	b118      	cbz	r0, 800ec52 <__swbuf_r+0x12>
 800ec4a:	6983      	ldr	r3, [r0, #24]
 800ec4c:	b90b      	cbnz	r3, 800ec52 <__swbuf_r+0x12>
 800ec4e:	f7fe fbc9 	bl	800d3e4 <__sinit>
 800ec52:	4b21      	ldr	r3, [pc, #132]	; (800ecd8 <__swbuf_r+0x98>)
 800ec54:	429c      	cmp	r4, r3
 800ec56:	d12b      	bne.n	800ecb0 <__swbuf_r+0x70>
 800ec58:	686c      	ldr	r4, [r5, #4]
 800ec5a:	69a3      	ldr	r3, [r4, #24]
 800ec5c:	60a3      	str	r3, [r4, #8]
 800ec5e:	89a3      	ldrh	r3, [r4, #12]
 800ec60:	071a      	lsls	r2, r3, #28
 800ec62:	d52f      	bpl.n	800ecc4 <__swbuf_r+0x84>
 800ec64:	6923      	ldr	r3, [r4, #16]
 800ec66:	b36b      	cbz	r3, 800ecc4 <__swbuf_r+0x84>
 800ec68:	6923      	ldr	r3, [r4, #16]
 800ec6a:	6820      	ldr	r0, [r4, #0]
 800ec6c:	1ac0      	subs	r0, r0, r3
 800ec6e:	6963      	ldr	r3, [r4, #20]
 800ec70:	b2f6      	uxtb	r6, r6
 800ec72:	4283      	cmp	r3, r0
 800ec74:	4637      	mov	r7, r6
 800ec76:	dc04      	bgt.n	800ec82 <__swbuf_r+0x42>
 800ec78:	4621      	mov	r1, r4
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	f000 f974 	bl	800ef68 <_fflush_r>
 800ec80:	bb30      	cbnz	r0, 800ecd0 <__swbuf_r+0x90>
 800ec82:	68a3      	ldr	r3, [r4, #8]
 800ec84:	3b01      	subs	r3, #1
 800ec86:	60a3      	str	r3, [r4, #8]
 800ec88:	6823      	ldr	r3, [r4, #0]
 800ec8a:	1c5a      	adds	r2, r3, #1
 800ec8c:	6022      	str	r2, [r4, #0]
 800ec8e:	701e      	strb	r6, [r3, #0]
 800ec90:	6963      	ldr	r3, [r4, #20]
 800ec92:	3001      	adds	r0, #1
 800ec94:	4283      	cmp	r3, r0
 800ec96:	d004      	beq.n	800eca2 <__swbuf_r+0x62>
 800ec98:	89a3      	ldrh	r3, [r4, #12]
 800ec9a:	07db      	lsls	r3, r3, #31
 800ec9c:	d506      	bpl.n	800ecac <__swbuf_r+0x6c>
 800ec9e:	2e0a      	cmp	r6, #10
 800eca0:	d104      	bne.n	800ecac <__swbuf_r+0x6c>
 800eca2:	4621      	mov	r1, r4
 800eca4:	4628      	mov	r0, r5
 800eca6:	f000 f95f 	bl	800ef68 <_fflush_r>
 800ecaa:	b988      	cbnz	r0, 800ecd0 <__swbuf_r+0x90>
 800ecac:	4638      	mov	r0, r7
 800ecae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecb0:	4b0a      	ldr	r3, [pc, #40]	; (800ecdc <__swbuf_r+0x9c>)
 800ecb2:	429c      	cmp	r4, r3
 800ecb4:	d101      	bne.n	800ecba <__swbuf_r+0x7a>
 800ecb6:	68ac      	ldr	r4, [r5, #8]
 800ecb8:	e7cf      	b.n	800ec5a <__swbuf_r+0x1a>
 800ecba:	4b09      	ldr	r3, [pc, #36]	; (800ece0 <__swbuf_r+0xa0>)
 800ecbc:	429c      	cmp	r4, r3
 800ecbe:	bf08      	it	eq
 800ecc0:	68ec      	ldreq	r4, [r5, #12]
 800ecc2:	e7ca      	b.n	800ec5a <__swbuf_r+0x1a>
 800ecc4:	4621      	mov	r1, r4
 800ecc6:	4628      	mov	r0, r5
 800ecc8:	f000 f82c 	bl	800ed24 <__swsetup_r>
 800eccc:	2800      	cmp	r0, #0
 800ecce:	d0cb      	beq.n	800ec68 <__swbuf_r+0x28>
 800ecd0:	f04f 37ff 	mov.w	r7, #4294967295
 800ecd4:	e7ea      	b.n	800ecac <__swbuf_r+0x6c>
 800ecd6:	bf00      	nop
 800ecd8:	0800febc 	.word	0x0800febc
 800ecdc:	0800fedc 	.word	0x0800fedc
 800ece0:	0800fe9c 	.word	0x0800fe9c

0800ece4 <__ascii_wctomb>:
 800ece4:	b149      	cbz	r1, 800ecfa <__ascii_wctomb+0x16>
 800ece6:	2aff      	cmp	r2, #255	; 0xff
 800ece8:	bf85      	ittet	hi
 800ecea:	238a      	movhi	r3, #138	; 0x8a
 800ecec:	6003      	strhi	r3, [r0, #0]
 800ecee:	700a      	strbls	r2, [r1, #0]
 800ecf0:	f04f 30ff 	movhi.w	r0, #4294967295
 800ecf4:	bf98      	it	ls
 800ecf6:	2001      	movls	r0, #1
 800ecf8:	4770      	bx	lr
 800ecfa:	4608      	mov	r0, r1
 800ecfc:	4770      	bx	lr
	...

0800ed00 <_write_r>:
 800ed00:	b538      	push	{r3, r4, r5, lr}
 800ed02:	4d07      	ldr	r5, [pc, #28]	; (800ed20 <_write_r+0x20>)
 800ed04:	4604      	mov	r4, r0
 800ed06:	4608      	mov	r0, r1
 800ed08:	4611      	mov	r1, r2
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	602a      	str	r2, [r5, #0]
 800ed0e:	461a      	mov	r2, r3
 800ed10:	f7f3 fb39 	bl	8002386 <_write>
 800ed14:	1c43      	adds	r3, r0, #1
 800ed16:	d102      	bne.n	800ed1e <_write_r+0x1e>
 800ed18:	682b      	ldr	r3, [r5, #0]
 800ed1a:	b103      	cbz	r3, 800ed1e <_write_r+0x1e>
 800ed1c:	6023      	str	r3, [r4, #0]
 800ed1e:	bd38      	pop	{r3, r4, r5, pc}
 800ed20:	20001110 	.word	0x20001110

0800ed24 <__swsetup_r>:
 800ed24:	4b32      	ldr	r3, [pc, #200]	; (800edf0 <__swsetup_r+0xcc>)
 800ed26:	b570      	push	{r4, r5, r6, lr}
 800ed28:	681d      	ldr	r5, [r3, #0]
 800ed2a:	4606      	mov	r6, r0
 800ed2c:	460c      	mov	r4, r1
 800ed2e:	b125      	cbz	r5, 800ed3a <__swsetup_r+0x16>
 800ed30:	69ab      	ldr	r3, [r5, #24]
 800ed32:	b913      	cbnz	r3, 800ed3a <__swsetup_r+0x16>
 800ed34:	4628      	mov	r0, r5
 800ed36:	f7fe fb55 	bl	800d3e4 <__sinit>
 800ed3a:	4b2e      	ldr	r3, [pc, #184]	; (800edf4 <__swsetup_r+0xd0>)
 800ed3c:	429c      	cmp	r4, r3
 800ed3e:	d10f      	bne.n	800ed60 <__swsetup_r+0x3c>
 800ed40:	686c      	ldr	r4, [r5, #4]
 800ed42:	89a3      	ldrh	r3, [r4, #12]
 800ed44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed48:	0719      	lsls	r1, r3, #28
 800ed4a:	d42c      	bmi.n	800eda6 <__swsetup_r+0x82>
 800ed4c:	06dd      	lsls	r5, r3, #27
 800ed4e:	d411      	bmi.n	800ed74 <__swsetup_r+0x50>
 800ed50:	2309      	movs	r3, #9
 800ed52:	6033      	str	r3, [r6, #0]
 800ed54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ed58:	81a3      	strh	r3, [r4, #12]
 800ed5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ed5e:	e03e      	b.n	800edde <__swsetup_r+0xba>
 800ed60:	4b25      	ldr	r3, [pc, #148]	; (800edf8 <__swsetup_r+0xd4>)
 800ed62:	429c      	cmp	r4, r3
 800ed64:	d101      	bne.n	800ed6a <__swsetup_r+0x46>
 800ed66:	68ac      	ldr	r4, [r5, #8]
 800ed68:	e7eb      	b.n	800ed42 <__swsetup_r+0x1e>
 800ed6a:	4b24      	ldr	r3, [pc, #144]	; (800edfc <__swsetup_r+0xd8>)
 800ed6c:	429c      	cmp	r4, r3
 800ed6e:	bf08      	it	eq
 800ed70:	68ec      	ldreq	r4, [r5, #12]
 800ed72:	e7e6      	b.n	800ed42 <__swsetup_r+0x1e>
 800ed74:	0758      	lsls	r0, r3, #29
 800ed76:	d512      	bpl.n	800ed9e <__swsetup_r+0x7a>
 800ed78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed7a:	b141      	cbz	r1, 800ed8e <__swsetup_r+0x6a>
 800ed7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed80:	4299      	cmp	r1, r3
 800ed82:	d002      	beq.n	800ed8a <__swsetup_r+0x66>
 800ed84:	4630      	mov	r0, r6
 800ed86:	f7fb fe07 	bl	800a998 <_free_r>
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	6363      	str	r3, [r4, #52]	; 0x34
 800ed8e:	89a3      	ldrh	r3, [r4, #12]
 800ed90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ed94:	81a3      	strh	r3, [r4, #12]
 800ed96:	2300      	movs	r3, #0
 800ed98:	6063      	str	r3, [r4, #4]
 800ed9a:	6923      	ldr	r3, [r4, #16]
 800ed9c:	6023      	str	r3, [r4, #0]
 800ed9e:	89a3      	ldrh	r3, [r4, #12]
 800eda0:	f043 0308 	orr.w	r3, r3, #8
 800eda4:	81a3      	strh	r3, [r4, #12]
 800eda6:	6923      	ldr	r3, [r4, #16]
 800eda8:	b94b      	cbnz	r3, 800edbe <__swsetup_r+0x9a>
 800edaa:	89a3      	ldrh	r3, [r4, #12]
 800edac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800edb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edb4:	d003      	beq.n	800edbe <__swsetup_r+0x9a>
 800edb6:	4621      	mov	r1, r4
 800edb8:	4630      	mov	r0, r6
 800edba:	f000 f95b 	bl	800f074 <__smakebuf_r>
 800edbe:	89a0      	ldrh	r0, [r4, #12]
 800edc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800edc4:	f010 0301 	ands.w	r3, r0, #1
 800edc8:	d00a      	beq.n	800ede0 <__swsetup_r+0xbc>
 800edca:	2300      	movs	r3, #0
 800edcc:	60a3      	str	r3, [r4, #8]
 800edce:	6963      	ldr	r3, [r4, #20]
 800edd0:	425b      	negs	r3, r3
 800edd2:	61a3      	str	r3, [r4, #24]
 800edd4:	6923      	ldr	r3, [r4, #16]
 800edd6:	b943      	cbnz	r3, 800edea <__swsetup_r+0xc6>
 800edd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eddc:	d1ba      	bne.n	800ed54 <__swsetup_r+0x30>
 800edde:	bd70      	pop	{r4, r5, r6, pc}
 800ede0:	0781      	lsls	r1, r0, #30
 800ede2:	bf58      	it	pl
 800ede4:	6963      	ldrpl	r3, [r4, #20]
 800ede6:	60a3      	str	r3, [r4, #8]
 800ede8:	e7f4      	b.n	800edd4 <__swsetup_r+0xb0>
 800edea:	2000      	movs	r0, #0
 800edec:	e7f7      	b.n	800edde <__swsetup_r+0xba>
 800edee:	bf00      	nop
 800edf0:	2000052c 	.word	0x2000052c
 800edf4:	0800febc 	.word	0x0800febc
 800edf8:	0800fedc 	.word	0x0800fedc
 800edfc:	0800fe9c 	.word	0x0800fe9c

0800ee00 <__assert_func>:
 800ee00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee02:	4614      	mov	r4, r2
 800ee04:	461a      	mov	r2, r3
 800ee06:	4b09      	ldr	r3, [pc, #36]	; (800ee2c <__assert_func+0x2c>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	4605      	mov	r5, r0
 800ee0c:	68d8      	ldr	r0, [r3, #12]
 800ee0e:	b14c      	cbz	r4, 800ee24 <__assert_func+0x24>
 800ee10:	4b07      	ldr	r3, [pc, #28]	; (800ee30 <__assert_func+0x30>)
 800ee12:	9100      	str	r1, [sp, #0]
 800ee14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ee18:	4906      	ldr	r1, [pc, #24]	; (800ee34 <__assert_func+0x34>)
 800ee1a:	462b      	mov	r3, r5
 800ee1c:	f000 f8e0 	bl	800efe0 <fiprintf>
 800ee20:	f000 f9c4 	bl	800f1ac <abort>
 800ee24:	4b04      	ldr	r3, [pc, #16]	; (800ee38 <__assert_func+0x38>)
 800ee26:	461c      	mov	r4, r3
 800ee28:	e7f3      	b.n	800ee12 <__assert_func+0x12>
 800ee2a:	bf00      	nop
 800ee2c:	2000052c 	.word	0x2000052c
 800ee30:	080100e5 	.word	0x080100e5
 800ee34:	080100f2 	.word	0x080100f2
 800ee38:	08010120 	.word	0x08010120

0800ee3c <_close_r>:
 800ee3c:	b538      	push	{r3, r4, r5, lr}
 800ee3e:	4d06      	ldr	r5, [pc, #24]	; (800ee58 <_close_r+0x1c>)
 800ee40:	2300      	movs	r3, #0
 800ee42:	4604      	mov	r4, r0
 800ee44:	4608      	mov	r0, r1
 800ee46:	602b      	str	r3, [r5, #0]
 800ee48:	f7f3 fab9 	bl	80023be <_close>
 800ee4c:	1c43      	adds	r3, r0, #1
 800ee4e:	d102      	bne.n	800ee56 <_close_r+0x1a>
 800ee50:	682b      	ldr	r3, [r5, #0]
 800ee52:	b103      	cbz	r3, 800ee56 <_close_r+0x1a>
 800ee54:	6023      	str	r3, [r4, #0]
 800ee56:	bd38      	pop	{r3, r4, r5, pc}
 800ee58:	20001110 	.word	0x20001110

0800ee5c <__sflush_r>:
 800ee5c:	898a      	ldrh	r2, [r1, #12]
 800ee5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee62:	4605      	mov	r5, r0
 800ee64:	0710      	lsls	r0, r2, #28
 800ee66:	460c      	mov	r4, r1
 800ee68:	d458      	bmi.n	800ef1c <__sflush_r+0xc0>
 800ee6a:	684b      	ldr	r3, [r1, #4]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	dc05      	bgt.n	800ee7c <__sflush_r+0x20>
 800ee70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	dc02      	bgt.n	800ee7c <__sflush_r+0x20>
 800ee76:	2000      	movs	r0, #0
 800ee78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee7e:	2e00      	cmp	r6, #0
 800ee80:	d0f9      	beq.n	800ee76 <__sflush_r+0x1a>
 800ee82:	2300      	movs	r3, #0
 800ee84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ee88:	682f      	ldr	r7, [r5, #0]
 800ee8a:	602b      	str	r3, [r5, #0]
 800ee8c:	d032      	beq.n	800eef4 <__sflush_r+0x98>
 800ee8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ee90:	89a3      	ldrh	r3, [r4, #12]
 800ee92:	075a      	lsls	r2, r3, #29
 800ee94:	d505      	bpl.n	800eea2 <__sflush_r+0x46>
 800ee96:	6863      	ldr	r3, [r4, #4]
 800ee98:	1ac0      	subs	r0, r0, r3
 800ee9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee9c:	b10b      	cbz	r3, 800eea2 <__sflush_r+0x46>
 800ee9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eea0:	1ac0      	subs	r0, r0, r3
 800eea2:	2300      	movs	r3, #0
 800eea4:	4602      	mov	r2, r0
 800eea6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eea8:	6a21      	ldr	r1, [r4, #32]
 800eeaa:	4628      	mov	r0, r5
 800eeac:	47b0      	blx	r6
 800eeae:	1c43      	adds	r3, r0, #1
 800eeb0:	89a3      	ldrh	r3, [r4, #12]
 800eeb2:	d106      	bne.n	800eec2 <__sflush_r+0x66>
 800eeb4:	6829      	ldr	r1, [r5, #0]
 800eeb6:	291d      	cmp	r1, #29
 800eeb8:	d82c      	bhi.n	800ef14 <__sflush_r+0xb8>
 800eeba:	4a2a      	ldr	r2, [pc, #168]	; (800ef64 <__sflush_r+0x108>)
 800eebc:	40ca      	lsrs	r2, r1
 800eebe:	07d6      	lsls	r6, r2, #31
 800eec0:	d528      	bpl.n	800ef14 <__sflush_r+0xb8>
 800eec2:	2200      	movs	r2, #0
 800eec4:	6062      	str	r2, [r4, #4]
 800eec6:	04d9      	lsls	r1, r3, #19
 800eec8:	6922      	ldr	r2, [r4, #16]
 800eeca:	6022      	str	r2, [r4, #0]
 800eecc:	d504      	bpl.n	800eed8 <__sflush_r+0x7c>
 800eece:	1c42      	adds	r2, r0, #1
 800eed0:	d101      	bne.n	800eed6 <__sflush_r+0x7a>
 800eed2:	682b      	ldr	r3, [r5, #0]
 800eed4:	b903      	cbnz	r3, 800eed8 <__sflush_r+0x7c>
 800eed6:	6560      	str	r0, [r4, #84]	; 0x54
 800eed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eeda:	602f      	str	r7, [r5, #0]
 800eedc:	2900      	cmp	r1, #0
 800eede:	d0ca      	beq.n	800ee76 <__sflush_r+0x1a>
 800eee0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eee4:	4299      	cmp	r1, r3
 800eee6:	d002      	beq.n	800eeee <__sflush_r+0x92>
 800eee8:	4628      	mov	r0, r5
 800eeea:	f7fb fd55 	bl	800a998 <_free_r>
 800eeee:	2000      	movs	r0, #0
 800eef0:	6360      	str	r0, [r4, #52]	; 0x34
 800eef2:	e7c1      	b.n	800ee78 <__sflush_r+0x1c>
 800eef4:	6a21      	ldr	r1, [r4, #32]
 800eef6:	2301      	movs	r3, #1
 800eef8:	4628      	mov	r0, r5
 800eefa:	47b0      	blx	r6
 800eefc:	1c41      	adds	r1, r0, #1
 800eefe:	d1c7      	bne.n	800ee90 <__sflush_r+0x34>
 800ef00:	682b      	ldr	r3, [r5, #0]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d0c4      	beq.n	800ee90 <__sflush_r+0x34>
 800ef06:	2b1d      	cmp	r3, #29
 800ef08:	d001      	beq.n	800ef0e <__sflush_r+0xb2>
 800ef0a:	2b16      	cmp	r3, #22
 800ef0c:	d101      	bne.n	800ef12 <__sflush_r+0xb6>
 800ef0e:	602f      	str	r7, [r5, #0]
 800ef10:	e7b1      	b.n	800ee76 <__sflush_r+0x1a>
 800ef12:	89a3      	ldrh	r3, [r4, #12]
 800ef14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef18:	81a3      	strh	r3, [r4, #12]
 800ef1a:	e7ad      	b.n	800ee78 <__sflush_r+0x1c>
 800ef1c:	690f      	ldr	r7, [r1, #16]
 800ef1e:	2f00      	cmp	r7, #0
 800ef20:	d0a9      	beq.n	800ee76 <__sflush_r+0x1a>
 800ef22:	0793      	lsls	r3, r2, #30
 800ef24:	680e      	ldr	r6, [r1, #0]
 800ef26:	bf08      	it	eq
 800ef28:	694b      	ldreq	r3, [r1, #20]
 800ef2a:	600f      	str	r7, [r1, #0]
 800ef2c:	bf18      	it	ne
 800ef2e:	2300      	movne	r3, #0
 800ef30:	eba6 0807 	sub.w	r8, r6, r7
 800ef34:	608b      	str	r3, [r1, #8]
 800ef36:	f1b8 0f00 	cmp.w	r8, #0
 800ef3a:	dd9c      	ble.n	800ee76 <__sflush_r+0x1a>
 800ef3c:	6a21      	ldr	r1, [r4, #32]
 800ef3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ef40:	4643      	mov	r3, r8
 800ef42:	463a      	mov	r2, r7
 800ef44:	4628      	mov	r0, r5
 800ef46:	47b0      	blx	r6
 800ef48:	2800      	cmp	r0, #0
 800ef4a:	dc06      	bgt.n	800ef5a <__sflush_r+0xfe>
 800ef4c:	89a3      	ldrh	r3, [r4, #12]
 800ef4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef52:	81a3      	strh	r3, [r4, #12]
 800ef54:	f04f 30ff 	mov.w	r0, #4294967295
 800ef58:	e78e      	b.n	800ee78 <__sflush_r+0x1c>
 800ef5a:	4407      	add	r7, r0
 800ef5c:	eba8 0800 	sub.w	r8, r8, r0
 800ef60:	e7e9      	b.n	800ef36 <__sflush_r+0xda>
 800ef62:	bf00      	nop
 800ef64:	20400001 	.word	0x20400001

0800ef68 <_fflush_r>:
 800ef68:	b538      	push	{r3, r4, r5, lr}
 800ef6a:	690b      	ldr	r3, [r1, #16]
 800ef6c:	4605      	mov	r5, r0
 800ef6e:	460c      	mov	r4, r1
 800ef70:	b913      	cbnz	r3, 800ef78 <_fflush_r+0x10>
 800ef72:	2500      	movs	r5, #0
 800ef74:	4628      	mov	r0, r5
 800ef76:	bd38      	pop	{r3, r4, r5, pc}
 800ef78:	b118      	cbz	r0, 800ef82 <_fflush_r+0x1a>
 800ef7a:	6983      	ldr	r3, [r0, #24]
 800ef7c:	b90b      	cbnz	r3, 800ef82 <_fflush_r+0x1a>
 800ef7e:	f7fe fa31 	bl	800d3e4 <__sinit>
 800ef82:	4b14      	ldr	r3, [pc, #80]	; (800efd4 <_fflush_r+0x6c>)
 800ef84:	429c      	cmp	r4, r3
 800ef86:	d11b      	bne.n	800efc0 <_fflush_r+0x58>
 800ef88:	686c      	ldr	r4, [r5, #4]
 800ef8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d0ef      	beq.n	800ef72 <_fflush_r+0xa>
 800ef92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ef94:	07d0      	lsls	r0, r2, #31
 800ef96:	d404      	bmi.n	800efa2 <_fflush_r+0x3a>
 800ef98:	0599      	lsls	r1, r3, #22
 800ef9a:	d402      	bmi.n	800efa2 <_fflush_r+0x3a>
 800ef9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef9e:	f7fe fe32 	bl	800dc06 <__retarget_lock_acquire_recursive>
 800efa2:	4628      	mov	r0, r5
 800efa4:	4621      	mov	r1, r4
 800efa6:	f7ff ff59 	bl	800ee5c <__sflush_r>
 800efaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800efac:	07da      	lsls	r2, r3, #31
 800efae:	4605      	mov	r5, r0
 800efb0:	d4e0      	bmi.n	800ef74 <_fflush_r+0xc>
 800efb2:	89a3      	ldrh	r3, [r4, #12]
 800efb4:	059b      	lsls	r3, r3, #22
 800efb6:	d4dd      	bmi.n	800ef74 <_fflush_r+0xc>
 800efb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800efba:	f7fe fe25 	bl	800dc08 <__retarget_lock_release_recursive>
 800efbe:	e7d9      	b.n	800ef74 <_fflush_r+0xc>
 800efc0:	4b05      	ldr	r3, [pc, #20]	; (800efd8 <_fflush_r+0x70>)
 800efc2:	429c      	cmp	r4, r3
 800efc4:	d101      	bne.n	800efca <_fflush_r+0x62>
 800efc6:	68ac      	ldr	r4, [r5, #8]
 800efc8:	e7df      	b.n	800ef8a <_fflush_r+0x22>
 800efca:	4b04      	ldr	r3, [pc, #16]	; (800efdc <_fflush_r+0x74>)
 800efcc:	429c      	cmp	r4, r3
 800efce:	bf08      	it	eq
 800efd0:	68ec      	ldreq	r4, [r5, #12]
 800efd2:	e7da      	b.n	800ef8a <_fflush_r+0x22>
 800efd4:	0800febc 	.word	0x0800febc
 800efd8:	0800fedc 	.word	0x0800fedc
 800efdc:	0800fe9c 	.word	0x0800fe9c

0800efe0 <fiprintf>:
 800efe0:	b40e      	push	{r1, r2, r3}
 800efe2:	b503      	push	{r0, r1, lr}
 800efe4:	4601      	mov	r1, r0
 800efe6:	ab03      	add	r3, sp, #12
 800efe8:	4805      	ldr	r0, [pc, #20]	; (800f000 <fiprintf+0x20>)
 800efea:	f853 2b04 	ldr.w	r2, [r3], #4
 800efee:	6800      	ldr	r0, [r0, #0]
 800eff0:	9301      	str	r3, [sp, #4]
 800eff2:	f7ff fc93 	bl	800e91c <_vfiprintf_r>
 800eff6:	b002      	add	sp, #8
 800eff8:	f85d eb04 	ldr.w	lr, [sp], #4
 800effc:	b003      	add	sp, #12
 800effe:	4770      	bx	lr
 800f000:	2000052c 	.word	0x2000052c

0800f004 <_lseek_r>:
 800f004:	b538      	push	{r3, r4, r5, lr}
 800f006:	4d07      	ldr	r5, [pc, #28]	; (800f024 <_lseek_r+0x20>)
 800f008:	4604      	mov	r4, r0
 800f00a:	4608      	mov	r0, r1
 800f00c:	4611      	mov	r1, r2
 800f00e:	2200      	movs	r2, #0
 800f010:	602a      	str	r2, [r5, #0]
 800f012:	461a      	mov	r2, r3
 800f014:	f7f3 f9fa 	bl	800240c <_lseek>
 800f018:	1c43      	adds	r3, r0, #1
 800f01a:	d102      	bne.n	800f022 <_lseek_r+0x1e>
 800f01c:	682b      	ldr	r3, [r5, #0]
 800f01e:	b103      	cbz	r3, 800f022 <_lseek_r+0x1e>
 800f020:	6023      	str	r3, [r4, #0]
 800f022:	bd38      	pop	{r3, r4, r5, pc}
 800f024:	20001110 	.word	0x20001110

0800f028 <__swhatbuf_r>:
 800f028:	b570      	push	{r4, r5, r6, lr}
 800f02a:	460e      	mov	r6, r1
 800f02c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f030:	2900      	cmp	r1, #0
 800f032:	b096      	sub	sp, #88	; 0x58
 800f034:	4614      	mov	r4, r2
 800f036:	461d      	mov	r5, r3
 800f038:	da08      	bge.n	800f04c <__swhatbuf_r+0x24>
 800f03a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f03e:	2200      	movs	r2, #0
 800f040:	602a      	str	r2, [r5, #0]
 800f042:	061a      	lsls	r2, r3, #24
 800f044:	d410      	bmi.n	800f068 <__swhatbuf_r+0x40>
 800f046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f04a:	e00e      	b.n	800f06a <__swhatbuf_r+0x42>
 800f04c:	466a      	mov	r2, sp
 800f04e:	f000 f8b5 	bl	800f1bc <_fstat_r>
 800f052:	2800      	cmp	r0, #0
 800f054:	dbf1      	blt.n	800f03a <__swhatbuf_r+0x12>
 800f056:	9a01      	ldr	r2, [sp, #4]
 800f058:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f05c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f060:	425a      	negs	r2, r3
 800f062:	415a      	adcs	r2, r3
 800f064:	602a      	str	r2, [r5, #0]
 800f066:	e7ee      	b.n	800f046 <__swhatbuf_r+0x1e>
 800f068:	2340      	movs	r3, #64	; 0x40
 800f06a:	2000      	movs	r0, #0
 800f06c:	6023      	str	r3, [r4, #0]
 800f06e:	b016      	add	sp, #88	; 0x58
 800f070:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f074 <__smakebuf_r>:
 800f074:	898b      	ldrh	r3, [r1, #12]
 800f076:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f078:	079d      	lsls	r5, r3, #30
 800f07a:	4606      	mov	r6, r0
 800f07c:	460c      	mov	r4, r1
 800f07e:	d507      	bpl.n	800f090 <__smakebuf_r+0x1c>
 800f080:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f084:	6023      	str	r3, [r4, #0]
 800f086:	6123      	str	r3, [r4, #16]
 800f088:	2301      	movs	r3, #1
 800f08a:	6163      	str	r3, [r4, #20]
 800f08c:	b002      	add	sp, #8
 800f08e:	bd70      	pop	{r4, r5, r6, pc}
 800f090:	ab01      	add	r3, sp, #4
 800f092:	466a      	mov	r2, sp
 800f094:	f7ff ffc8 	bl	800f028 <__swhatbuf_r>
 800f098:	9900      	ldr	r1, [sp, #0]
 800f09a:	4605      	mov	r5, r0
 800f09c:	4630      	mov	r0, r6
 800f09e:	f7fb fce7 	bl	800aa70 <_malloc_r>
 800f0a2:	b948      	cbnz	r0, 800f0b8 <__smakebuf_r+0x44>
 800f0a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0a8:	059a      	lsls	r2, r3, #22
 800f0aa:	d4ef      	bmi.n	800f08c <__smakebuf_r+0x18>
 800f0ac:	f023 0303 	bic.w	r3, r3, #3
 800f0b0:	f043 0302 	orr.w	r3, r3, #2
 800f0b4:	81a3      	strh	r3, [r4, #12]
 800f0b6:	e7e3      	b.n	800f080 <__smakebuf_r+0xc>
 800f0b8:	4b0d      	ldr	r3, [pc, #52]	; (800f0f0 <__smakebuf_r+0x7c>)
 800f0ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800f0bc:	89a3      	ldrh	r3, [r4, #12]
 800f0be:	6020      	str	r0, [r4, #0]
 800f0c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0c4:	81a3      	strh	r3, [r4, #12]
 800f0c6:	9b00      	ldr	r3, [sp, #0]
 800f0c8:	6163      	str	r3, [r4, #20]
 800f0ca:	9b01      	ldr	r3, [sp, #4]
 800f0cc:	6120      	str	r0, [r4, #16]
 800f0ce:	b15b      	cbz	r3, 800f0e8 <__smakebuf_r+0x74>
 800f0d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0d4:	4630      	mov	r0, r6
 800f0d6:	f000 f883 	bl	800f1e0 <_isatty_r>
 800f0da:	b128      	cbz	r0, 800f0e8 <__smakebuf_r+0x74>
 800f0dc:	89a3      	ldrh	r3, [r4, #12]
 800f0de:	f023 0303 	bic.w	r3, r3, #3
 800f0e2:	f043 0301 	orr.w	r3, r3, #1
 800f0e6:	81a3      	strh	r3, [r4, #12]
 800f0e8:	89a0      	ldrh	r0, [r4, #12]
 800f0ea:	4305      	orrs	r5, r0
 800f0ec:	81a5      	strh	r5, [r4, #12]
 800f0ee:	e7cd      	b.n	800f08c <__smakebuf_r+0x18>
 800f0f0:	0800d37d 	.word	0x0800d37d

0800f0f4 <memmove>:
 800f0f4:	4288      	cmp	r0, r1
 800f0f6:	b510      	push	{r4, lr}
 800f0f8:	eb01 0402 	add.w	r4, r1, r2
 800f0fc:	d902      	bls.n	800f104 <memmove+0x10>
 800f0fe:	4284      	cmp	r4, r0
 800f100:	4623      	mov	r3, r4
 800f102:	d807      	bhi.n	800f114 <memmove+0x20>
 800f104:	1e43      	subs	r3, r0, #1
 800f106:	42a1      	cmp	r1, r4
 800f108:	d008      	beq.n	800f11c <memmove+0x28>
 800f10a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f10e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f112:	e7f8      	b.n	800f106 <memmove+0x12>
 800f114:	4402      	add	r2, r0
 800f116:	4601      	mov	r1, r0
 800f118:	428a      	cmp	r2, r1
 800f11a:	d100      	bne.n	800f11e <memmove+0x2a>
 800f11c:	bd10      	pop	{r4, pc}
 800f11e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f126:	e7f7      	b.n	800f118 <memmove+0x24>

0800f128 <_realloc_r>:
 800f128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f12c:	4680      	mov	r8, r0
 800f12e:	4614      	mov	r4, r2
 800f130:	460e      	mov	r6, r1
 800f132:	b921      	cbnz	r1, 800f13e <_realloc_r+0x16>
 800f134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f138:	4611      	mov	r1, r2
 800f13a:	f7fb bc99 	b.w	800aa70 <_malloc_r>
 800f13e:	b92a      	cbnz	r2, 800f14c <_realloc_r+0x24>
 800f140:	f7fb fc2a 	bl	800a998 <_free_r>
 800f144:	4625      	mov	r5, r4
 800f146:	4628      	mov	r0, r5
 800f148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f14c:	f000 f858 	bl	800f200 <_malloc_usable_size_r>
 800f150:	4284      	cmp	r4, r0
 800f152:	4607      	mov	r7, r0
 800f154:	d802      	bhi.n	800f15c <_realloc_r+0x34>
 800f156:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f15a:	d812      	bhi.n	800f182 <_realloc_r+0x5a>
 800f15c:	4621      	mov	r1, r4
 800f15e:	4640      	mov	r0, r8
 800f160:	f7fb fc86 	bl	800aa70 <_malloc_r>
 800f164:	4605      	mov	r5, r0
 800f166:	2800      	cmp	r0, #0
 800f168:	d0ed      	beq.n	800f146 <_realloc_r+0x1e>
 800f16a:	42bc      	cmp	r4, r7
 800f16c:	4622      	mov	r2, r4
 800f16e:	4631      	mov	r1, r6
 800f170:	bf28      	it	cs
 800f172:	463a      	movcs	r2, r7
 800f174:	f7fe fd5b 	bl	800dc2e <memcpy>
 800f178:	4631      	mov	r1, r6
 800f17a:	4640      	mov	r0, r8
 800f17c:	f7fb fc0c 	bl	800a998 <_free_r>
 800f180:	e7e1      	b.n	800f146 <_realloc_r+0x1e>
 800f182:	4635      	mov	r5, r6
 800f184:	e7df      	b.n	800f146 <_realloc_r+0x1e>
	...

0800f188 <_read_r>:
 800f188:	b538      	push	{r3, r4, r5, lr}
 800f18a:	4d07      	ldr	r5, [pc, #28]	; (800f1a8 <_read_r+0x20>)
 800f18c:	4604      	mov	r4, r0
 800f18e:	4608      	mov	r0, r1
 800f190:	4611      	mov	r1, r2
 800f192:	2200      	movs	r2, #0
 800f194:	602a      	str	r2, [r5, #0]
 800f196:	461a      	mov	r2, r3
 800f198:	f7f3 f8d8 	bl	800234c <_read>
 800f19c:	1c43      	adds	r3, r0, #1
 800f19e:	d102      	bne.n	800f1a6 <_read_r+0x1e>
 800f1a0:	682b      	ldr	r3, [r5, #0]
 800f1a2:	b103      	cbz	r3, 800f1a6 <_read_r+0x1e>
 800f1a4:	6023      	str	r3, [r4, #0]
 800f1a6:	bd38      	pop	{r3, r4, r5, pc}
 800f1a8:	20001110 	.word	0x20001110

0800f1ac <abort>:
 800f1ac:	b508      	push	{r3, lr}
 800f1ae:	2006      	movs	r0, #6
 800f1b0:	f000 f856 	bl	800f260 <raise>
 800f1b4:	2001      	movs	r0, #1
 800f1b6:	f7f3 f8bf 	bl	8002338 <_exit>
	...

0800f1bc <_fstat_r>:
 800f1bc:	b538      	push	{r3, r4, r5, lr}
 800f1be:	4d07      	ldr	r5, [pc, #28]	; (800f1dc <_fstat_r+0x20>)
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	4604      	mov	r4, r0
 800f1c4:	4608      	mov	r0, r1
 800f1c6:	4611      	mov	r1, r2
 800f1c8:	602b      	str	r3, [r5, #0]
 800f1ca:	f7f3 f904 	bl	80023d6 <_fstat>
 800f1ce:	1c43      	adds	r3, r0, #1
 800f1d0:	d102      	bne.n	800f1d8 <_fstat_r+0x1c>
 800f1d2:	682b      	ldr	r3, [r5, #0]
 800f1d4:	b103      	cbz	r3, 800f1d8 <_fstat_r+0x1c>
 800f1d6:	6023      	str	r3, [r4, #0]
 800f1d8:	bd38      	pop	{r3, r4, r5, pc}
 800f1da:	bf00      	nop
 800f1dc:	20001110 	.word	0x20001110

0800f1e0 <_isatty_r>:
 800f1e0:	b538      	push	{r3, r4, r5, lr}
 800f1e2:	4d06      	ldr	r5, [pc, #24]	; (800f1fc <_isatty_r+0x1c>)
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	4608      	mov	r0, r1
 800f1ea:	602b      	str	r3, [r5, #0]
 800f1ec:	f7f3 f903 	bl	80023f6 <_isatty>
 800f1f0:	1c43      	adds	r3, r0, #1
 800f1f2:	d102      	bne.n	800f1fa <_isatty_r+0x1a>
 800f1f4:	682b      	ldr	r3, [r5, #0]
 800f1f6:	b103      	cbz	r3, 800f1fa <_isatty_r+0x1a>
 800f1f8:	6023      	str	r3, [r4, #0]
 800f1fa:	bd38      	pop	{r3, r4, r5, pc}
 800f1fc:	20001110 	.word	0x20001110

0800f200 <_malloc_usable_size_r>:
 800f200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f204:	1f18      	subs	r0, r3, #4
 800f206:	2b00      	cmp	r3, #0
 800f208:	bfbc      	itt	lt
 800f20a:	580b      	ldrlt	r3, [r1, r0]
 800f20c:	18c0      	addlt	r0, r0, r3
 800f20e:	4770      	bx	lr

0800f210 <_raise_r>:
 800f210:	291f      	cmp	r1, #31
 800f212:	b538      	push	{r3, r4, r5, lr}
 800f214:	4604      	mov	r4, r0
 800f216:	460d      	mov	r5, r1
 800f218:	d904      	bls.n	800f224 <_raise_r+0x14>
 800f21a:	2316      	movs	r3, #22
 800f21c:	6003      	str	r3, [r0, #0]
 800f21e:	f04f 30ff 	mov.w	r0, #4294967295
 800f222:	bd38      	pop	{r3, r4, r5, pc}
 800f224:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f226:	b112      	cbz	r2, 800f22e <_raise_r+0x1e>
 800f228:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f22c:	b94b      	cbnz	r3, 800f242 <_raise_r+0x32>
 800f22e:	4620      	mov	r0, r4
 800f230:	f000 f830 	bl	800f294 <_getpid_r>
 800f234:	462a      	mov	r2, r5
 800f236:	4601      	mov	r1, r0
 800f238:	4620      	mov	r0, r4
 800f23a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f23e:	f000 b817 	b.w	800f270 <_kill_r>
 800f242:	2b01      	cmp	r3, #1
 800f244:	d00a      	beq.n	800f25c <_raise_r+0x4c>
 800f246:	1c59      	adds	r1, r3, #1
 800f248:	d103      	bne.n	800f252 <_raise_r+0x42>
 800f24a:	2316      	movs	r3, #22
 800f24c:	6003      	str	r3, [r0, #0]
 800f24e:	2001      	movs	r0, #1
 800f250:	e7e7      	b.n	800f222 <_raise_r+0x12>
 800f252:	2400      	movs	r4, #0
 800f254:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f258:	4628      	mov	r0, r5
 800f25a:	4798      	blx	r3
 800f25c:	2000      	movs	r0, #0
 800f25e:	e7e0      	b.n	800f222 <_raise_r+0x12>

0800f260 <raise>:
 800f260:	4b02      	ldr	r3, [pc, #8]	; (800f26c <raise+0xc>)
 800f262:	4601      	mov	r1, r0
 800f264:	6818      	ldr	r0, [r3, #0]
 800f266:	f7ff bfd3 	b.w	800f210 <_raise_r>
 800f26a:	bf00      	nop
 800f26c:	2000052c 	.word	0x2000052c

0800f270 <_kill_r>:
 800f270:	b538      	push	{r3, r4, r5, lr}
 800f272:	4d07      	ldr	r5, [pc, #28]	; (800f290 <_kill_r+0x20>)
 800f274:	2300      	movs	r3, #0
 800f276:	4604      	mov	r4, r0
 800f278:	4608      	mov	r0, r1
 800f27a:	4611      	mov	r1, r2
 800f27c:	602b      	str	r3, [r5, #0]
 800f27e:	f7f3 f84b 	bl	8002318 <_kill>
 800f282:	1c43      	adds	r3, r0, #1
 800f284:	d102      	bne.n	800f28c <_kill_r+0x1c>
 800f286:	682b      	ldr	r3, [r5, #0]
 800f288:	b103      	cbz	r3, 800f28c <_kill_r+0x1c>
 800f28a:	6023      	str	r3, [r4, #0]
 800f28c:	bd38      	pop	{r3, r4, r5, pc}
 800f28e:	bf00      	nop
 800f290:	20001110 	.word	0x20001110

0800f294 <_getpid_r>:
 800f294:	f7f3 b838 	b.w	8002308 <_getpid>

0800f298 <sqrt>:
 800f298:	b538      	push	{r3, r4, r5, lr}
 800f29a:	ed2d 8b02 	vpush	{d8}
 800f29e:	ec55 4b10 	vmov	r4, r5, d0
 800f2a2:	f000 f89b 	bl	800f3dc <__ieee754_sqrt>
 800f2a6:	4622      	mov	r2, r4
 800f2a8:	462b      	mov	r3, r5
 800f2aa:	4620      	mov	r0, r4
 800f2ac:	4629      	mov	r1, r5
 800f2ae:	eeb0 8a40 	vmov.f32	s16, s0
 800f2b2:	eef0 8a60 	vmov.f32	s17, s1
 800f2b6:	f7f1 fc49 	bl	8000b4c <__aeabi_dcmpun>
 800f2ba:	b990      	cbnz	r0, 800f2e2 <sqrt+0x4a>
 800f2bc:	2200      	movs	r2, #0
 800f2be:	2300      	movs	r3, #0
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	4629      	mov	r1, r5
 800f2c4:	f7f1 fc1a 	bl	8000afc <__aeabi_dcmplt>
 800f2c8:	b158      	cbz	r0, 800f2e2 <sqrt+0x4a>
 800f2ca:	f7fb fb23 	bl	800a914 <__errno>
 800f2ce:	2321      	movs	r3, #33	; 0x21
 800f2d0:	6003      	str	r3, [r0, #0]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	4610      	mov	r0, r2
 800f2d8:	4619      	mov	r1, r3
 800f2da:	f7f1 fac7 	bl	800086c <__aeabi_ddiv>
 800f2de:	ec41 0b18 	vmov	d8, r0, r1
 800f2e2:	eeb0 0a48 	vmov.f32	s0, s16
 800f2e6:	eef0 0a68 	vmov.f32	s1, s17
 800f2ea:	ecbd 8b02 	vpop	{d8}
 800f2ee:	bd38      	pop	{r3, r4, r5, pc}

0800f2f0 <powf>:
 800f2f0:	b508      	push	{r3, lr}
 800f2f2:	ed2d 8b04 	vpush	{d8-d9}
 800f2f6:	eeb0 8a60 	vmov.f32	s16, s1
 800f2fa:	eeb0 9a40 	vmov.f32	s18, s0
 800f2fe:	f000 f91f 	bl	800f540 <__ieee754_powf>
 800f302:	eeb4 8a48 	vcmp.f32	s16, s16
 800f306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f30a:	eef0 8a40 	vmov.f32	s17, s0
 800f30e:	d63e      	bvs.n	800f38e <powf+0x9e>
 800f310:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f318:	d112      	bne.n	800f340 <powf+0x50>
 800f31a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f322:	d039      	beq.n	800f398 <powf+0xa8>
 800f324:	eeb0 0a48 	vmov.f32	s0, s16
 800f328:	f000 fc05 	bl	800fb36 <finitef>
 800f32c:	b378      	cbz	r0, 800f38e <powf+0x9e>
 800f32e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f336:	d52a      	bpl.n	800f38e <powf+0x9e>
 800f338:	f7fb faec 	bl	800a914 <__errno>
 800f33c:	2322      	movs	r3, #34	; 0x22
 800f33e:	e014      	b.n	800f36a <powf+0x7a>
 800f340:	f000 fbf9 	bl	800fb36 <finitef>
 800f344:	b998      	cbnz	r0, 800f36e <powf+0x7e>
 800f346:	eeb0 0a49 	vmov.f32	s0, s18
 800f34a:	f000 fbf4 	bl	800fb36 <finitef>
 800f34e:	b170      	cbz	r0, 800f36e <powf+0x7e>
 800f350:	eeb0 0a48 	vmov.f32	s0, s16
 800f354:	f000 fbef 	bl	800fb36 <finitef>
 800f358:	b148      	cbz	r0, 800f36e <powf+0x7e>
 800f35a:	eef4 8a68 	vcmp.f32	s17, s17
 800f35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f362:	d7e9      	bvc.n	800f338 <powf+0x48>
 800f364:	f7fb fad6 	bl	800a914 <__errno>
 800f368:	2321      	movs	r3, #33	; 0x21
 800f36a:	6003      	str	r3, [r0, #0]
 800f36c:	e00f      	b.n	800f38e <powf+0x9e>
 800f36e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f376:	d10a      	bne.n	800f38e <powf+0x9e>
 800f378:	eeb0 0a49 	vmov.f32	s0, s18
 800f37c:	f000 fbdb 	bl	800fb36 <finitef>
 800f380:	b128      	cbz	r0, 800f38e <powf+0x9e>
 800f382:	eeb0 0a48 	vmov.f32	s0, s16
 800f386:	f000 fbd6 	bl	800fb36 <finitef>
 800f38a:	2800      	cmp	r0, #0
 800f38c:	d1d4      	bne.n	800f338 <powf+0x48>
 800f38e:	eeb0 0a68 	vmov.f32	s0, s17
 800f392:	ecbd 8b04 	vpop	{d8-d9}
 800f396:	bd08      	pop	{r3, pc}
 800f398:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800f39c:	e7f7      	b.n	800f38e <powf+0x9e>
	...

0800f3a0 <sqrtf>:
 800f3a0:	b508      	push	{r3, lr}
 800f3a2:	ed2d 8b02 	vpush	{d8}
 800f3a6:	eeb0 8a40 	vmov.f32	s16, s0
 800f3aa:	f000 fb97 	bl	800fadc <__ieee754_sqrtf>
 800f3ae:	eeb4 8a48 	vcmp.f32	s16, s16
 800f3b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b6:	d60c      	bvs.n	800f3d2 <sqrtf+0x32>
 800f3b8:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f3d8 <sqrtf+0x38>
 800f3bc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3c4:	d505      	bpl.n	800f3d2 <sqrtf+0x32>
 800f3c6:	f7fb faa5 	bl	800a914 <__errno>
 800f3ca:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f3ce:	2321      	movs	r3, #33	; 0x21
 800f3d0:	6003      	str	r3, [r0, #0]
 800f3d2:	ecbd 8b02 	vpop	{d8}
 800f3d6:	bd08      	pop	{r3, pc}
 800f3d8:	00000000 	.word	0x00000000

0800f3dc <__ieee754_sqrt>:
 800f3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3e0:	ec55 4b10 	vmov	r4, r5, d0
 800f3e4:	4e55      	ldr	r6, [pc, #340]	; (800f53c <__ieee754_sqrt+0x160>)
 800f3e6:	43ae      	bics	r6, r5
 800f3e8:	ee10 0a10 	vmov	r0, s0
 800f3ec:	ee10 3a10 	vmov	r3, s0
 800f3f0:	462a      	mov	r2, r5
 800f3f2:	4629      	mov	r1, r5
 800f3f4:	d110      	bne.n	800f418 <__ieee754_sqrt+0x3c>
 800f3f6:	ee10 2a10 	vmov	r2, s0
 800f3fa:	462b      	mov	r3, r5
 800f3fc:	f7f1 f90c 	bl	8000618 <__aeabi_dmul>
 800f400:	4602      	mov	r2, r0
 800f402:	460b      	mov	r3, r1
 800f404:	4620      	mov	r0, r4
 800f406:	4629      	mov	r1, r5
 800f408:	f7f0 ff50 	bl	80002ac <__adddf3>
 800f40c:	4604      	mov	r4, r0
 800f40e:	460d      	mov	r5, r1
 800f410:	ec45 4b10 	vmov	d0, r4, r5
 800f414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f418:	2d00      	cmp	r5, #0
 800f41a:	dc10      	bgt.n	800f43e <__ieee754_sqrt+0x62>
 800f41c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f420:	4330      	orrs	r0, r6
 800f422:	d0f5      	beq.n	800f410 <__ieee754_sqrt+0x34>
 800f424:	b15d      	cbz	r5, 800f43e <__ieee754_sqrt+0x62>
 800f426:	ee10 2a10 	vmov	r2, s0
 800f42a:	462b      	mov	r3, r5
 800f42c:	ee10 0a10 	vmov	r0, s0
 800f430:	f7f0 ff3a 	bl	80002a8 <__aeabi_dsub>
 800f434:	4602      	mov	r2, r0
 800f436:	460b      	mov	r3, r1
 800f438:	f7f1 fa18 	bl	800086c <__aeabi_ddiv>
 800f43c:	e7e6      	b.n	800f40c <__ieee754_sqrt+0x30>
 800f43e:	1512      	asrs	r2, r2, #20
 800f440:	d074      	beq.n	800f52c <__ieee754_sqrt+0x150>
 800f442:	07d4      	lsls	r4, r2, #31
 800f444:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f448:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f44c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f450:	bf5e      	ittt	pl
 800f452:	0fda      	lsrpl	r2, r3, #31
 800f454:	005b      	lslpl	r3, r3, #1
 800f456:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f45a:	2400      	movs	r4, #0
 800f45c:	0fda      	lsrs	r2, r3, #31
 800f45e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f462:	107f      	asrs	r7, r7, #1
 800f464:	005b      	lsls	r3, r3, #1
 800f466:	2516      	movs	r5, #22
 800f468:	4620      	mov	r0, r4
 800f46a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f46e:	1886      	adds	r6, r0, r2
 800f470:	428e      	cmp	r6, r1
 800f472:	bfde      	ittt	le
 800f474:	1b89      	suble	r1, r1, r6
 800f476:	18b0      	addle	r0, r6, r2
 800f478:	18a4      	addle	r4, r4, r2
 800f47a:	0049      	lsls	r1, r1, #1
 800f47c:	3d01      	subs	r5, #1
 800f47e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f482:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f486:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f48a:	d1f0      	bne.n	800f46e <__ieee754_sqrt+0x92>
 800f48c:	462a      	mov	r2, r5
 800f48e:	f04f 0e20 	mov.w	lr, #32
 800f492:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f496:	4281      	cmp	r1, r0
 800f498:	eb06 0c05 	add.w	ip, r6, r5
 800f49c:	dc02      	bgt.n	800f4a4 <__ieee754_sqrt+0xc8>
 800f49e:	d113      	bne.n	800f4c8 <__ieee754_sqrt+0xec>
 800f4a0:	459c      	cmp	ip, r3
 800f4a2:	d811      	bhi.n	800f4c8 <__ieee754_sqrt+0xec>
 800f4a4:	f1bc 0f00 	cmp.w	ip, #0
 800f4a8:	eb0c 0506 	add.w	r5, ip, r6
 800f4ac:	da43      	bge.n	800f536 <__ieee754_sqrt+0x15a>
 800f4ae:	2d00      	cmp	r5, #0
 800f4b0:	db41      	blt.n	800f536 <__ieee754_sqrt+0x15a>
 800f4b2:	f100 0801 	add.w	r8, r0, #1
 800f4b6:	1a09      	subs	r1, r1, r0
 800f4b8:	459c      	cmp	ip, r3
 800f4ba:	bf88      	it	hi
 800f4bc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f4c0:	eba3 030c 	sub.w	r3, r3, ip
 800f4c4:	4432      	add	r2, r6
 800f4c6:	4640      	mov	r0, r8
 800f4c8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f4cc:	f1be 0e01 	subs.w	lr, lr, #1
 800f4d0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f4d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f4d8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f4dc:	d1db      	bne.n	800f496 <__ieee754_sqrt+0xba>
 800f4de:	430b      	orrs	r3, r1
 800f4e0:	d006      	beq.n	800f4f0 <__ieee754_sqrt+0x114>
 800f4e2:	1c50      	adds	r0, r2, #1
 800f4e4:	bf13      	iteet	ne
 800f4e6:	3201      	addne	r2, #1
 800f4e8:	3401      	addeq	r4, #1
 800f4ea:	4672      	moveq	r2, lr
 800f4ec:	f022 0201 	bicne.w	r2, r2, #1
 800f4f0:	1063      	asrs	r3, r4, #1
 800f4f2:	0852      	lsrs	r2, r2, #1
 800f4f4:	07e1      	lsls	r1, r4, #31
 800f4f6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f4fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f4fe:	bf48      	it	mi
 800f500:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f504:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f508:	4614      	mov	r4, r2
 800f50a:	e781      	b.n	800f410 <__ieee754_sqrt+0x34>
 800f50c:	0ad9      	lsrs	r1, r3, #11
 800f50e:	3815      	subs	r0, #21
 800f510:	055b      	lsls	r3, r3, #21
 800f512:	2900      	cmp	r1, #0
 800f514:	d0fa      	beq.n	800f50c <__ieee754_sqrt+0x130>
 800f516:	02cd      	lsls	r5, r1, #11
 800f518:	d50a      	bpl.n	800f530 <__ieee754_sqrt+0x154>
 800f51a:	f1c2 0420 	rsb	r4, r2, #32
 800f51e:	fa23 f404 	lsr.w	r4, r3, r4
 800f522:	1e55      	subs	r5, r2, #1
 800f524:	4093      	lsls	r3, r2
 800f526:	4321      	orrs	r1, r4
 800f528:	1b42      	subs	r2, r0, r5
 800f52a:	e78a      	b.n	800f442 <__ieee754_sqrt+0x66>
 800f52c:	4610      	mov	r0, r2
 800f52e:	e7f0      	b.n	800f512 <__ieee754_sqrt+0x136>
 800f530:	0049      	lsls	r1, r1, #1
 800f532:	3201      	adds	r2, #1
 800f534:	e7ef      	b.n	800f516 <__ieee754_sqrt+0x13a>
 800f536:	4680      	mov	r8, r0
 800f538:	e7bd      	b.n	800f4b6 <__ieee754_sqrt+0xda>
 800f53a:	bf00      	nop
 800f53c:	7ff00000 	.word	0x7ff00000

0800f540 <__ieee754_powf>:
 800f540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f544:	ee10 4a90 	vmov	r4, s1
 800f548:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800f54c:	ed2d 8b02 	vpush	{d8}
 800f550:	ee10 6a10 	vmov	r6, s0
 800f554:	eeb0 8a40 	vmov.f32	s16, s0
 800f558:	eef0 8a60 	vmov.f32	s17, s1
 800f55c:	d10c      	bne.n	800f578 <__ieee754_powf+0x38>
 800f55e:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800f562:	0076      	lsls	r6, r6, #1
 800f564:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800f568:	f240 8296 	bls.w	800fa98 <__ieee754_powf+0x558>
 800f56c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800f570:	ecbd 8b02 	vpop	{d8}
 800f574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f578:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800f57c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800f580:	dcf4      	bgt.n	800f56c <__ieee754_powf+0x2c>
 800f582:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800f586:	dd08      	ble.n	800f59a <__ieee754_powf+0x5a>
 800f588:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800f58c:	d1ee      	bne.n	800f56c <__ieee754_powf+0x2c>
 800f58e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800f592:	0064      	lsls	r4, r4, #1
 800f594:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800f598:	e7e6      	b.n	800f568 <__ieee754_powf+0x28>
 800f59a:	2e00      	cmp	r6, #0
 800f59c:	da20      	bge.n	800f5e0 <__ieee754_powf+0xa0>
 800f59e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800f5a2:	da2d      	bge.n	800f600 <__ieee754_powf+0xc0>
 800f5a4:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800f5a8:	f2c0 827f 	blt.w	800faaa <__ieee754_powf+0x56a>
 800f5ac:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800f5b0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800f5b4:	fa48 f703 	asr.w	r7, r8, r3
 800f5b8:	fa07 f303 	lsl.w	r3, r7, r3
 800f5bc:	4543      	cmp	r3, r8
 800f5be:	f040 8274 	bne.w	800faaa <__ieee754_powf+0x56a>
 800f5c2:	f007 0701 	and.w	r7, r7, #1
 800f5c6:	f1c7 0702 	rsb	r7, r7, #2
 800f5ca:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800f5ce:	d11f      	bne.n	800f610 <__ieee754_powf+0xd0>
 800f5d0:	2c00      	cmp	r4, #0
 800f5d2:	f280 8267 	bge.w	800faa4 <__ieee754_powf+0x564>
 800f5d6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f5da:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f5de:	e7c7      	b.n	800f570 <__ieee754_powf+0x30>
 800f5e0:	2700      	movs	r7, #0
 800f5e2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800f5e6:	d1f0      	bne.n	800f5ca <__ieee754_powf+0x8a>
 800f5e8:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800f5ec:	f000 8254 	beq.w	800fa98 <__ieee754_powf+0x558>
 800f5f0:	dd08      	ble.n	800f604 <__ieee754_powf+0xc4>
 800f5f2:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800f8fc <__ieee754_powf+0x3bc>
 800f5f6:	2c00      	cmp	r4, #0
 800f5f8:	bfa8      	it	ge
 800f5fa:	eeb0 0a68 	vmovge.f32	s0, s17
 800f5fe:	e7b7      	b.n	800f570 <__ieee754_powf+0x30>
 800f600:	2702      	movs	r7, #2
 800f602:	e7ee      	b.n	800f5e2 <__ieee754_powf+0xa2>
 800f604:	2c00      	cmp	r4, #0
 800f606:	f280 824a 	bge.w	800fa9e <__ieee754_powf+0x55e>
 800f60a:	eeb1 0a68 	vneg.f32	s0, s17
 800f60e:	e7af      	b.n	800f570 <__ieee754_powf+0x30>
 800f610:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800f614:	d102      	bne.n	800f61c <__ieee754_powf+0xdc>
 800f616:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f61a:	e7a9      	b.n	800f570 <__ieee754_powf+0x30>
 800f61c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800f620:	eeb0 0a48 	vmov.f32	s0, s16
 800f624:	d107      	bne.n	800f636 <__ieee754_powf+0xf6>
 800f626:	2e00      	cmp	r6, #0
 800f628:	db05      	blt.n	800f636 <__ieee754_powf+0xf6>
 800f62a:	ecbd 8b02 	vpop	{d8}
 800f62e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f632:	f000 ba53 	b.w	800fadc <__ieee754_sqrtf>
 800f636:	f000 fa77 	bl	800fb28 <fabsf>
 800f63a:	b125      	cbz	r5, 800f646 <__ieee754_powf+0x106>
 800f63c:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800f640:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800f644:	d116      	bne.n	800f674 <__ieee754_powf+0x134>
 800f646:	2c00      	cmp	r4, #0
 800f648:	bfbc      	itt	lt
 800f64a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800f64e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f652:	2e00      	cmp	r6, #0
 800f654:	da8c      	bge.n	800f570 <__ieee754_powf+0x30>
 800f656:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800f65a:	ea55 0307 	orrs.w	r3, r5, r7
 800f65e:	d104      	bne.n	800f66a <__ieee754_powf+0x12a>
 800f660:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f664:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f668:	e782      	b.n	800f570 <__ieee754_powf+0x30>
 800f66a:	2f01      	cmp	r7, #1
 800f66c:	d180      	bne.n	800f570 <__ieee754_powf+0x30>
 800f66e:	eeb1 0a40 	vneg.f32	s0, s0
 800f672:	e77d      	b.n	800f570 <__ieee754_powf+0x30>
 800f674:	0ff0      	lsrs	r0, r6, #31
 800f676:	3801      	subs	r0, #1
 800f678:	ea57 0300 	orrs.w	r3, r7, r0
 800f67c:	d104      	bne.n	800f688 <__ieee754_powf+0x148>
 800f67e:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f682:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f686:	e773      	b.n	800f570 <__ieee754_powf+0x30>
 800f688:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800f68c:	dd74      	ble.n	800f778 <__ieee754_powf+0x238>
 800f68e:	4b9c      	ldr	r3, [pc, #624]	; (800f900 <__ieee754_powf+0x3c0>)
 800f690:	429d      	cmp	r5, r3
 800f692:	dc08      	bgt.n	800f6a6 <__ieee754_powf+0x166>
 800f694:	2c00      	cmp	r4, #0
 800f696:	da0b      	bge.n	800f6b0 <__ieee754_powf+0x170>
 800f698:	2000      	movs	r0, #0
 800f69a:	ecbd 8b02 	vpop	{d8}
 800f69e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6a2:	f000 ba3b 	b.w	800fb1c <__math_oflowf>
 800f6a6:	4b97      	ldr	r3, [pc, #604]	; (800f904 <__ieee754_powf+0x3c4>)
 800f6a8:	429d      	cmp	r5, r3
 800f6aa:	dd08      	ble.n	800f6be <__ieee754_powf+0x17e>
 800f6ac:	2c00      	cmp	r4, #0
 800f6ae:	dcf3      	bgt.n	800f698 <__ieee754_powf+0x158>
 800f6b0:	2000      	movs	r0, #0
 800f6b2:	ecbd 8b02 	vpop	{d8}
 800f6b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ba:	f000 ba29 	b.w	800fb10 <__math_uflowf>
 800f6be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f6c2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f6c6:	eddf 6a90 	vldr	s13, [pc, #576]	; 800f908 <__ieee754_powf+0x3c8>
 800f6ca:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800f6ce:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f6d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f6d6:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f6da:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f6de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6e2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800f90c <__ieee754_powf+0x3cc>
 800f6e6:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800f6ea:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800f910 <__ieee754_powf+0x3d0>
 800f6ee:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f6f2:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800f914 <__ieee754_powf+0x3d4>
 800f6f6:	eef0 6a67 	vmov.f32	s13, s15
 800f6fa:	eee0 6a07 	vfma.f32	s13, s0, s14
 800f6fe:	ee16 3a90 	vmov	r3, s13
 800f702:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f706:	f023 030f 	bic.w	r3, r3, #15
 800f70a:	ee00 3a90 	vmov	s1, r3
 800f70e:	eee0 0a47 	vfms.f32	s1, s0, s14
 800f712:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f716:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800f71a:	f024 040f 	bic.w	r4, r4, #15
 800f71e:	ee07 4a10 	vmov	s14, r4
 800f722:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f726:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f72a:	ee07 3a90 	vmov	s15, r3
 800f72e:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f732:	3f01      	subs	r7, #1
 800f734:	ea57 0200 	orrs.w	r2, r7, r0
 800f738:	ee07 4a10 	vmov	s14, r4
 800f73c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f740:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f744:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f748:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800f74c:	ee17 4a10 	vmov	r4, s14
 800f750:	bf08      	it	eq
 800f752:	eeb0 8a40 	vmoveq.f32	s16, s0
 800f756:	2c00      	cmp	r4, #0
 800f758:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f75c:	f340 817e 	ble.w	800fa5c <__ieee754_powf+0x51c>
 800f760:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800f764:	f340 80f8 	ble.w	800f958 <__ieee754_powf+0x418>
 800f768:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f770:	bf4c      	ite	mi
 800f772:	2001      	movmi	r0, #1
 800f774:	2000      	movpl	r0, #0
 800f776:	e790      	b.n	800f69a <__ieee754_powf+0x15a>
 800f778:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800f77c:	bf01      	itttt	eq
 800f77e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800f918 <__ieee754_powf+0x3d8>
 800f782:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f786:	f06f 0217 	mvneq.w	r2, #23
 800f78a:	ee17 5a90 	vmoveq	r5, s15
 800f78e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800f792:	bf18      	it	ne
 800f794:	2200      	movne	r2, #0
 800f796:	3b7f      	subs	r3, #127	; 0x7f
 800f798:	4413      	add	r3, r2
 800f79a:	4a60      	ldr	r2, [pc, #384]	; (800f91c <__ieee754_powf+0x3dc>)
 800f79c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800f7a0:	4295      	cmp	r5, r2
 800f7a2:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800f7a6:	dd06      	ble.n	800f7b6 <__ieee754_powf+0x276>
 800f7a8:	4a5d      	ldr	r2, [pc, #372]	; (800f920 <__ieee754_powf+0x3e0>)
 800f7aa:	4295      	cmp	r5, r2
 800f7ac:	f340 80a4 	ble.w	800f8f8 <__ieee754_powf+0x3b8>
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f7b6:	2500      	movs	r5, #0
 800f7b8:	4a5a      	ldr	r2, [pc, #360]	; (800f924 <__ieee754_powf+0x3e4>)
 800f7ba:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800f7be:	ee07 1a90 	vmov	s15, r1
 800f7c2:	ed92 7a00 	vldr	s14, [r2]
 800f7c6:	4a58      	ldr	r2, [pc, #352]	; (800f928 <__ieee754_powf+0x3e8>)
 800f7c8:	ee37 6a27 	vadd.f32	s12, s14, s15
 800f7cc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f7d0:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800f7d4:	1049      	asrs	r1, r1, #1
 800f7d6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800f7da:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800f7de:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800f7e2:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800f7e6:	ee06 1a10 	vmov	s12, r1
 800f7ea:	ee65 4a26 	vmul.f32	s9, s10, s13
 800f7ee:	ee36 7a47 	vsub.f32	s14, s12, s14
 800f7f2:	ee14 6a90 	vmov	r6, s9
 800f7f6:	4016      	ands	r6, r2
 800f7f8:	ee05 6a90 	vmov	s11, r6
 800f7fc:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800f800:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f804:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800f92c <__ieee754_powf+0x3ec>
 800f808:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800f80c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800f810:	ee25 6a26 	vmul.f32	s12, s10, s13
 800f814:	eddf 6a46 	vldr	s13, [pc, #280]	; 800f930 <__ieee754_powf+0x3f0>
 800f818:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f81c:	eddf 6a45 	vldr	s13, [pc, #276]	; 800f934 <__ieee754_powf+0x3f4>
 800f820:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f824:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800f908 <__ieee754_powf+0x3c8>
 800f828:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f82c:	eddf 6a42 	vldr	s13, [pc, #264]	; 800f938 <__ieee754_powf+0x3f8>
 800f830:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f834:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800f93c <__ieee754_powf+0x3fc>
 800f838:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f83c:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800f840:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800f844:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f848:	eee5 6a07 	vfma.f32	s13, s10, s14
 800f84c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800f850:	eef0 7a45 	vmov.f32	s15, s10
 800f854:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800f858:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f85c:	ee17 1a90 	vmov	r1, s15
 800f860:	4011      	ands	r1, r2
 800f862:	ee07 1a90 	vmov	s15, r1
 800f866:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800f86a:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800f86e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f872:	ee27 7a24 	vmul.f32	s14, s14, s9
 800f876:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f87a:	eeb0 6a47 	vmov.f32	s12, s14
 800f87e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800f882:	ee16 1a10 	vmov	r1, s12
 800f886:	4011      	ands	r1, r2
 800f888:	ee06 1a90 	vmov	s13, r1
 800f88c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800f890:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f940 <__ieee754_powf+0x400>
 800f894:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800f944 <__ieee754_powf+0x404>
 800f898:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f89c:	ee06 1a10 	vmov	s12, r1
 800f8a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f8a4:	eddf 7a28 	vldr	s15, [pc, #160]	; 800f948 <__ieee754_powf+0x408>
 800f8a8:	4928      	ldr	r1, [pc, #160]	; (800f94c <__ieee754_powf+0x40c>)
 800f8aa:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f8ae:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800f8b2:	edd1 7a00 	vldr	s15, [r1]
 800f8b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f8ba:	ee07 3a90 	vmov	s15, r3
 800f8be:	4b24      	ldr	r3, [pc, #144]	; (800f950 <__ieee754_powf+0x410>)
 800f8c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f8c4:	eef0 7a47 	vmov.f32	s15, s14
 800f8c8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f8cc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800f8d0:	edd5 0a00 	vldr	s1, [r5]
 800f8d4:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f8d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f8dc:	ee17 3a90 	vmov	r3, s15
 800f8e0:	4013      	ands	r3, r2
 800f8e2:	ee07 3a90 	vmov	s15, r3
 800f8e6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800f8ea:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800f8ee:	eee6 6a65 	vfms.f32	s13, s12, s11
 800f8f2:	ee77 7a66 	vsub.f32	s15, s14, s13
 800f8f6:	e70e      	b.n	800f716 <__ieee754_powf+0x1d6>
 800f8f8:	2501      	movs	r5, #1
 800f8fa:	e75d      	b.n	800f7b8 <__ieee754_powf+0x278>
 800f8fc:	00000000 	.word	0x00000000
 800f900:	3f7ffff3 	.word	0x3f7ffff3
 800f904:	3f800007 	.word	0x3f800007
 800f908:	3eaaaaab 	.word	0x3eaaaaab
 800f90c:	3fb8aa3b 	.word	0x3fb8aa3b
 800f910:	36eca570 	.word	0x36eca570
 800f914:	3fb8aa00 	.word	0x3fb8aa00
 800f918:	4b800000 	.word	0x4b800000
 800f91c:	001cc471 	.word	0x001cc471
 800f920:	005db3d6 	.word	0x005db3d6
 800f924:	08010124 	.word	0x08010124
 800f928:	fffff000 	.word	0xfffff000
 800f92c:	3e6c3255 	.word	0x3e6c3255
 800f930:	3e53f142 	.word	0x3e53f142
 800f934:	3e8ba305 	.word	0x3e8ba305
 800f938:	3edb6db7 	.word	0x3edb6db7
 800f93c:	3f19999a 	.word	0x3f19999a
 800f940:	3f76384f 	.word	0x3f76384f
 800f944:	3f763800 	.word	0x3f763800
 800f948:	369dc3a0 	.word	0x369dc3a0
 800f94c:	08010134 	.word	0x08010134
 800f950:	0801012c 	.word	0x0801012c
 800f954:	3338aa3c 	.word	0x3338aa3c
 800f958:	f040 8095 	bne.w	800fa86 <__ieee754_powf+0x546>
 800f95c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800f954 <__ieee754_powf+0x414>
 800f960:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f964:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800f968:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f970:	f73f aefa 	bgt.w	800f768 <__ieee754_powf+0x228>
 800f974:	15db      	asrs	r3, r3, #23
 800f976:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800f97a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f97e:	4103      	asrs	r3, r0
 800f980:	4423      	add	r3, r4
 800f982:	494b      	ldr	r1, [pc, #300]	; (800fab0 <__ieee754_powf+0x570>)
 800f984:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f988:	3a7f      	subs	r2, #127	; 0x7f
 800f98a:	4111      	asrs	r1, r2
 800f98c:	ea23 0101 	bic.w	r1, r3, r1
 800f990:	ee07 1a10 	vmov	s14, r1
 800f994:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800f998:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800f99c:	f1c2 0217 	rsb	r2, r2, #23
 800f9a0:	4110      	asrs	r0, r2
 800f9a2:	2c00      	cmp	r4, #0
 800f9a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f9a8:	bfb8      	it	lt
 800f9aa:	4240      	neglt	r0, r0
 800f9ac:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800f9b0:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800fab4 <__ieee754_powf+0x574>
 800f9b4:	eddf 6a40 	vldr	s13, [pc, #256]	; 800fab8 <__ieee754_powf+0x578>
 800f9b8:	ee17 3a10 	vmov	r3, s14
 800f9bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f9c0:	f023 030f 	bic.w	r3, r3, #15
 800f9c4:	ee07 3a10 	vmov	s14, r3
 800f9c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f9cc:	ee27 0a00 	vmul.f32	s0, s14, s0
 800f9d0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f9d4:	eddf 7a39 	vldr	s15, [pc, #228]	; 800fabc <__ieee754_powf+0x57c>
 800f9d8:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800f9dc:	eef0 7a40 	vmov.f32	s15, s0
 800f9e0:	eee7 7a26 	vfma.f32	s15, s14, s13
 800f9e4:	eeb0 6a67 	vmov.f32	s12, s15
 800f9e8:	eea7 6a66 	vfms.f32	s12, s14, s13
 800f9ec:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800f9f0:	ee30 0a46 	vsub.f32	s0, s0, s12
 800f9f4:	eddf 6a32 	vldr	s13, [pc, #200]	; 800fac0 <__ieee754_powf+0x580>
 800f9f8:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800fac4 <__ieee754_powf+0x584>
 800f9fc:	eee7 6a06 	vfma.f32	s13, s14, s12
 800fa00:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800fac8 <__ieee754_powf+0x588>
 800fa04:	eea6 6a87 	vfma.f32	s12, s13, s14
 800fa08:	eddf 6a30 	vldr	s13, [pc, #192]	; 800facc <__ieee754_powf+0x58c>
 800fa0c:	eee6 6a07 	vfma.f32	s13, s12, s14
 800fa10:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800fad0 <__ieee754_powf+0x590>
 800fa14:	eea6 6a87 	vfma.f32	s12, s13, s14
 800fa18:	eef0 6a67 	vmov.f32	s13, s15
 800fa1c:	eee6 6a47 	vfms.f32	s13, s12, s14
 800fa20:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800fa24:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800fa28:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800fa2c:	eea7 0a80 	vfma.f32	s0, s15, s0
 800fa30:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800fa34:	ee37 0a40 	vsub.f32	s0, s14, s0
 800fa38:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fa3c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fa40:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fa44:	ee10 3a10 	vmov	r3, s0
 800fa48:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800fa4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fa50:	da1f      	bge.n	800fa92 <__ieee754_powf+0x552>
 800fa52:	f000 f87d 	bl	800fb50 <scalbnf>
 800fa56:	ee20 0a08 	vmul.f32	s0, s0, s16
 800fa5a:	e589      	b.n	800f570 <__ieee754_powf+0x30>
 800fa5c:	4a1d      	ldr	r2, [pc, #116]	; (800fad4 <__ieee754_powf+0x594>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	dd07      	ble.n	800fa72 <__ieee754_powf+0x532>
 800fa62:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fa66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa6a:	bf4c      	ite	mi
 800fa6c:	2001      	movmi	r0, #1
 800fa6e:	2000      	movpl	r0, #0
 800fa70:	e61f      	b.n	800f6b2 <__ieee754_powf+0x172>
 800fa72:	d108      	bne.n	800fa86 <__ieee754_powf+0x546>
 800fa74:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fa78:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800fa7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa80:	f6ff af78 	blt.w	800f974 <__ieee754_powf+0x434>
 800fa84:	e7ed      	b.n	800fa62 <__ieee754_powf+0x522>
 800fa86:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800fa8a:	f73f af73 	bgt.w	800f974 <__ieee754_powf+0x434>
 800fa8e:	2000      	movs	r0, #0
 800fa90:	e78c      	b.n	800f9ac <__ieee754_powf+0x46c>
 800fa92:	ee00 3a10 	vmov	s0, r3
 800fa96:	e7de      	b.n	800fa56 <__ieee754_powf+0x516>
 800fa98:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fa9c:	e568      	b.n	800f570 <__ieee754_powf+0x30>
 800fa9e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800fad8 <__ieee754_powf+0x598>
 800faa2:	e565      	b.n	800f570 <__ieee754_powf+0x30>
 800faa4:	eeb0 0a48 	vmov.f32	s0, s16
 800faa8:	e562      	b.n	800f570 <__ieee754_powf+0x30>
 800faaa:	2700      	movs	r7, #0
 800faac:	e58d      	b.n	800f5ca <__ieee754_powf+0x8a>
 800faae:	bf00      	nop
 800fab0:	007fffff 	.word	0x007fffff
 800fab4:	35bfbe8c 	.word	0x35bfbe8c
 800fab8:	3f317200 	.word	0x3f317200
 800fabc:	3f317218 	.word	0x3f317218
 800fac0:	b5ddea0e 	.word	0xb5ddea0e
 800fac4:	3331bb4c 	.word	0x3331bb4c
 800fac8:	388ab355 	.word	0x388ab355
 800facc:	bb360b61 	.word	0xbb360b61
 800fad0:	3e2aaaab 	.word	0x3e2aaaab
 800fad4:	43160000 	.word	0x43160000
 800fad8:	00000000 	.word	0x00000000

0800fadc <__ieee754_sqrtf>:
 800fadc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fae0:	4770      	bx	lr

0800fae2 <with_errnof>:
 800fae2:	b513      	push	{r0, r1, r4, lr}
 800fae4:	4604      	mov	r4, r0
 800fae6:	ed8d 0a01 	vstr	s0, [sp, #4]
 800faea:	f7fa ff13 	bl	800a914 <__errno>
 800faee:	ed9d 0a01 	vldr	s0, [sp, #4]
 800faf2:	6004      	str	r4, [r0, #0]
 800faf4:	b002      	add	sp, #8
 800faf6:	bd10      	pop	{r4, pc}

0800faf8 <xflowf>:
 800faf8:	b130      	cbz	r0, 800fb08 <xflowf+0x10>
 800fafa:	eef1 7a40 	vneg.f32	s15, s0
 800fafe:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fb02:	2022      	movs	r0, #34	; 0x22
 800fb04:	f7ff bfed 	b.w	800fae2 <with_errnof>
 800fb08:	eef0 7a40 	vmov.f32	s15, s0
 800fb0c:	e7f7      	b.n	800fafe <xflowf+0x6>
	...

0800fb10 <__math_uflowf>:
 800fb10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fb18 <__math_uflowf+0x8>
 800fb14:	f7ff bff0 	b.w	800faf8 <xflowf>
 800fb18:	10000000 	.word	0x10000000

0800fb1c <__math_oflowf>:
 800fb1c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fb24 <__math_oflowf+0x8>
 800fb20:	f7ff bfea 	b.w	800faf8 <xflowf>
 800fb24:	70000000 	.word	0x70000000

0800fb28 <fabsf>:
 800fb28:	ee10 3a10 	vmov	r3, s0
 800fb2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb30:	ee00 3a10 	vmov	s0, r3
 800fb34:	4770      	bx	lr

0800fb36 <finitef>:
 800fb36:	b082      	sub	sp, #8
 800fb38:	ed8d 0a01 	vstr	s0, [sp, #4]
 800fb3c:	9801      	ldr	r0, [sp, #4]
 800fb3e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fb42:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800fb46:	bfac      	ite	ge
 800fb48:	2000      	movge	r0, #0
 800fb4a:	2001      	movlt	r0, #1
 800fb4c:	b002      	add	sp, #8
 800fb4e:	4770      	bx	lr

0800fb50 <scalbnf>:
 800fb50:	ee10 3a10 	vmov	r3, s0
 800fb54:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800fb58:	d025      	beq.n	800fba6 <scalbnf+0x56>
 800fb5a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800fb5e:	d302      	bcc.n	800fb66 <scalbnf+0x16>
 800fb60:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fb64:	4770      	bx	lr
 800fb66:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800fb6a:	d122      	bne.n	800fbb2 <scalbnf+0x62>
 800fb6c:	4b2a      	ldr	r3, [pc, #168]	; (800fc18 <scalbnf+0xc8>)
 800fb6e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800fc1c <scalbnf+0xcc>
 800fb72:	4298      	cmp	r0, r3
 800fb74:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fb78:	db16      	blt.n	800fba8 <scalbnf+0x58>
 800fb7a:	ee10 3a10 	vmov	r3, s0
 800fb7e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fb82:	3a19      	subs	r2, #25
 800fb84:	4402      	add	r2, r0
 800fb86:	2afe      	cmp	r2, #254	; 0xfe
 800fb88:	dd15      	ble.n	800fbb6 <scalbnf+0x66>
 800fb8a:	ee10 3a10 	vmov	r3, s0
 800fb8e:	eddf 7a24 	vldr	s15, [pc, #144]	; 800fc20 <scalbnf+0xd0>
 800fb92:	eddf 6a24 	vldr	s13, [pc, #144]	; 800fc24 <scalbnf+0xd4>
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	eeb0 7a67 	vmov.f32	s14, s15
 800fb9c:	bfb8      	it	lt
 800fb9e:	eef0 7a66 	vmovlt.f32	s15, s13
 800fba2:	ee27 0a27 	vmul.f32	s0, s14, s15
 800fba6:	4770      	bx	lr
 800fba8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800fc28 <scalbnf+0xd8>
 800fbac:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fbb0:	4770      	bx	lr
 800fbb2:	0dd2      	lsrs	r2, r2, #23
 800fbb4:	e7e6      	b.n	800fb84 <scalbnf+0x34>
 800fbb6:	2a00      	cmp	r2, #0
 800fbb8:	dd06      	ble.n	800fbc8 <scalbnf+0x78>
 800fbba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fbbe:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800fbc2:	ee00 3a10 	vmov	s0, r3
 800fbc6:	4770      	bx	lr
 800fbc8:	f112 0f16 	cmn.w	r2, #22
 800fbcc:	da1a      	bge.n	800fc04 <scalbnf+0xb4>
 800fbce:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fbd2:	4298      	cmp	r0, r3
 800fbd4:	ee10 3a10 	vmov	r3, s0
 800fbd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fbdc:	dd0a      	ble.n	800fbf4 <scalbnf+0xa4>
 800fbde:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800fc20 <scalbnf+0xd0>
 800fbe2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800fc24 <scalbnf+0xd4>
 800fbe6:	eef0 7a40 	vmov.f32	s15, s0
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	bf18      	it	ne
 800fbee:	eeb0 0a47 	vmovne.f32	s0, s14
 800fbf2:	e7db      	b.n	800fbac <scalbnf+0x5c>
 800fbf4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800fc28 <scalbnf+0xd8>
 800fbf8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800fc2c <scalbnf+0xdc>
 800fbfc:	eef0 7a40 	vmov.f32	s15, s0
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	e7f3      	b.n	800fbec <scalbnf+0x9c>
 800fc04:	3219      	adds	r2, #25
 800fc06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fc0a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800fc0e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800fc30 <scalbnf+0xe0>
 800fc12:	ee07 3a10 	vmov	s14, r3
 800fc16:	e7c4      	b.n	800fba2 <scalbnf+0x52>
 800fc18:	ffff3cb0 	.word	0xffff3cb0
 800fc1c:	4c000000 	.word	0x4c000000
 800fc20:	7149f2ca 	.word	0x7149f2ca
 800fc24:	f149f2ca 	.word	0xf149f2ca
 800fc28:	0da24260 	.word	0x0da24260
 800fc2c:	8da24260 	.word	0x8da24260
 800fc30:	33000000 	.word	0x33000000

0800fc34 <_init>:
 800fc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc36:	bf00      	nop
 800fc38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc3a:	bc08      	pop	{r3}
 800fc3c:	469e      	mov	lr, r3
 800fc3e:	4770      	bx	lr

0800fc40 <_fini>:
 800fc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc42:	bf00      	nop
 800fc44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc46:	bc08      	pop	{r3}
 800fc48:	469e      	mov	lr, r3
 800fc4a:	4770      	bx	lr
