
00_DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097dc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009988  08009988  00019988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099a4  080099a4  00020544  2**0
                  CONTENTS
  4 .ARM          00000008  080099a4  080099a4  000199a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099ac  080099ac  00020544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099ac  080099ac  000199ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099b0  080099b0  000199b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000544  20000000  080099b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020544  2**0
                  CONTENTS
 10 .bss          000009c0  20000544  20000544  00020544  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000f04  20000f04  00020544  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020544  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023cde  00000000  00000000  00020574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048c2  00000000  00000000  00044252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c90  00000000  00000000  00048b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029250  00000000  00000000  0004a7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023a88  00000000  00000000  000739f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebbdd  00000000  00000000  00097480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018305d  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00001ab8  00000000  00000000  001830b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007bec  00000000  00000000  00184b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000544 	.word	0x20000544
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08009970 	.word	0x08009970

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000548 	.word	0x20000548
 80001e8:	08009970 	.word	0x08009970

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <SWV_PlotSignal>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SWV_PlotSignal(float Signal[] ,uint16_t Len)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	460b      	mov	r3, r1
 80004fa:	807b      	strh	r3, [r7, #2]
	uint16_t index = 0 ;
 80004fc:	2300      	movs	r3, #0
 80004fe:	81fb      	strh	r3, [r7, #14]
	for (index = 0 ; index < Len ; index ++)
 8000500:	2300      	movs	r3, #0
 8000502:	81fb      	strh	r3, [r7, #14]
 8000504:	e00d      	b.n	8000522 <SWV_PlotSignal+0x32>
	{
		Signal_Sample_gf = Signal[index] ;
 8000506:	89fb      	ldrh	r3, [r7, #14]
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	4413      	add	r3, r2
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a08      	ldr	r2, [pc, #32]	; (8000534 <SWV_PlotSignal+0x44>)
 8000512:	6013      	str	r3, [r2, #0]
		HAL_Delay(300);
 8000514:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000518:	f001 f8b2 	bl	8001680 <HAL_Delay>
	for (index = 0 ; index < Len ; index ++)
 800051c:	89fb      	ldrh	r3, [r7, #14]
 800051e:	3301      	adds	r3, #1
 8000520:	81fb      	strh	r3, [r7, #14]
 8000522:	89fa      	ldrh	r2, [r7, #14]
 8000524:	887b      	ldrh	r3, [r7, #2]
 8000526:	429a      	cmp	r2, r3
 8000528:	d3ed      	bcc.n	8000506 <SWV_PlotSignal+0x16>
	}
}
 800052a:	bf00      	nop
 800052c:	bf00      	nop
 800052e:	3710      	adds	r7, #16
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	200007bc 	.word	0x200007bc

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f001 f85e 	bl	80015fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f828 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 fa96 	bl	8000a74 <MX_GPIO_Init>
  MX_CRC_Init();
 8000548:	f000 f88e 	bl	8000668 <MX_CRC_Init>
  MX_DMA2D_Init();
 800054c:	f000 f8a0 	bl	8000690 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000550:	f000 fa40 	bl	80009d4 <MX_FMC_Init>
  MX_I2C3_Init();
 8000554:	f000 f8ce 	bl	80006f4 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000558:	f000 f90c 	bl	8000774 <MX_LTDC_Init>
  MX_SPI5_Init();
 800055c:	f000 f98a 	bl	8000874 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000560:	f000 f9be 	bl	80008e0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000564:	f000 fa0c 	bl	8000980 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8000568:	f008 fdb4 	bl	80090d4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  // enable floating point  full access
  SCB->CPACR |= (0xF << 20) ;
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <main+0x54>)
 800056e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000572:	4a06      	ldr	r2, [pc, #24]	; (800058c <main+0x54>)
 8000574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800057c:	f008 fdd0 	bl	8009120 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

	  SWV_PlotSignal(_5hz_signal , _5_HZ_SIGNAL_LEN);
 8000580:	f240 112d 	movw	r1, #301	; 0x12d
 8000584:	4802      	ldr	r0, [pc, #8]	; (8000590 <main+0x58>)
 8000586:	f7ff ffb3 	bl	80004f0 <SWV_PlotSignal>
    MX_USB_HOST_Process();
 800058a:	e7f7      	b.n	800057c <main+0x44>
 800058c:	e000ed00 	.word	0xe000ed00
 8000590:	20000000 	.word	0x20000000

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	; 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f009 f8de 	bl	8009764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a27      	ldr	r2, [pc, #156]	; (8000660 <SystemClock_Config+0xcc>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
 80005c8:	4b25      	ldr	r3, [pc, #148]	; (8000660 <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b22      	ldr	r3, [pc, #136]	; (8000664 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a21      	ldr	r2, [pc, #132]	; (8000664 <SystemClock_Config+0xd0>)
 80005de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000604:	2308      	movs	r3, #8
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000608:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800060c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000612:	2307      	movs	r3, #7
 8000614:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fe36 	bl	800428c <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000626:	f000 fb47 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2302      	movs	r3, #2
 8000630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000636:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800063a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000640:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2105      	movs	r1, #5
 8000648:	4618      	mov	r0, r3
 800064a:	f004 f897 	bl	800477c <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000654:	f000 fb30 	bl	8000cb8 <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3750      	adds	r7, #80	; 0x50
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_CRC_Init+0x20>)
 800066e:	4a07      	ldr	r2, [pc, #28]	; (800068c <MX_CRC_Init+0x24>)
 8000670:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_CRC_Init+0x20>)
 8000674:	f001 f90a 	bl	800188c <HAL_CRC_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800067e:	f000 fb1b 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000560 	.word	0x20000560
 800068c:	40023000 	.word	0x40023000

08000690 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_DMA2D_Init+0x5c>)
 8000696:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <MX_DMA2D_Init+0x60>)
 8000698:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_DMA2D_Init+0x5c>)
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006c6:	f001 f8fd 	bl	80018c4 <HAL_DMA2D_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006d0:	f000 faf2 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006d4:	2101      	movs	r1, #1
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_DMA2D_Init+0x5c>)
 80006d8:	f001 fa4e 	bl	8001b78 <HAL_DMA2D_ConfigLayer>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006e2:	f000 fae9 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000568 	.word	0x20000568
 80006f0:	4002b000 	.word	0x4002b000

080006f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_I2C3_Init+0x74>)
 80006fa:	4a1c      	ldr	r2, [pc, #112]	; (800076c <MX_I2C3_Init+0x78>)
 80006fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_I2C3_Init+0x74>)
 8000700:	4a1b      	ldr	r2, [pc, #108]	; (8000770 <MX_I2C3_Init+0x7c>)
 8000702:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_I2C3_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_I2C3_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_I2C3_Init+0x74>)
 8000712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000716:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000718:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_I2C3_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_I2C3_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_I2C3_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_I2C3_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000730:	480d      	ldr	r0, [pc, #52]	; (8000768 <MX_I2C3_Init+0x74>)
 8000732:	f003 f883 	bl	800383c <HAL_I2C_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800073c:	f000 fabc 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000740:	2100      	movs	r1, #0
 8000742:	4809      	ldr	r0, [pc, #36]	; (8000768 <MX_I2C3_Init+0x74>)
 8000744:	f003 f9be 	bl	8003ac4 <HAL_I2CEx_ConfigAnalogFilter>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800074e:	f000 fab3 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000752:	2100      	movs	r1, #0
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_I2C3_Init+0x74>)
 8000756:	f003 f9f1 	bl	8003b3c <HAL_I2CEx_ConfigDigitalFilter>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000760:	f000 faaa 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200005a8 	.word	0x200005a8
 800076c:	40005c00 	.word	0x40005c00
 8000770:	000186a0 	.word	0x000186a0

08000774 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08e      	sub	sp, #56	; 0x38
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2234      	movs	r2, #52	; 0x34
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f008 ffef 	bl	8009764 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <MX_LTDC_Init+0xf8>)
 8000788:	4a39      	ldr	r2, [pc, #228]	; (8000870 <MX_LTDC_Init+0xfc>)
 800078a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800078c:	4b37      	ldr	r3, [pc, #220]	; (800086c <MX_LTDC_Init+0xf8>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000792:	4b36      	ldr	r3, [pc, #216]	; (800086c <MX_LTDC_Init+0xf8>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000798:	4b34      	ldr	r3, [pc, #208]	; (800086c <MX_LTDC_Init+0xf8>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800079e:	4b33      	ldr	r3, [pc, #204]	; (800086c <MX_LTDC_Init+0xf8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007a4:	4b31      	ldr	r3, [pc, #196]	; (800086c <MX_LTDC_Init+0xf8>)
 80007a6:	2209      	movs	r2, #9
 80007a8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007aa:	4b30      	ldr	r3, [pc, #192]	; (800086c <MX_LTDC_Init+0xf8>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007b0:	4b2e      	ldr	r3, [pc, #184]	; (800086c <MX_LTDC_Init+0xf8>)
 80007b2:	221d      	movs	r2, #29
 80007b4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007b6:	4b2d      	ldr	r3, [pc, #180]	; (800086c <MX_LTDC_Init+0xf8>)
 80007b8:	2203      	movs	r2, #3
 80007ba:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007bc:	4b2b      	ldr	r3, [pc, #172]	; (800086c <MX_LTDC_Init+0xf8>)
 80007be:	f240 120d 	movw	r2, #269	; 0x10d
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80007c4:	4b29      	ldr	r3, [pc, #164]	; (800086c <MX_LTDC_Init+0xf8>)
 80007c6:	f240 1243 	movw	r2, #323	; 0x143
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80007cc:	4b27      	ldr	r3, [pc, #156]	; (800086c <MX_LTDC_Init+0xf8>)
 80007ce:	f240 1217 	movw	r2, #279	; 0x117
 80007d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80007d4:	4b25      	ldr	r3, [pc, #148]	; (800086c <MX_LTDC_Init+0xf8>)
 80007d6:	f240 1247 	movw	r2, #327	; 0x147
 80007da:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007dc:	4b23      	ldr	r3, [pc, #140]	; (800086c <MX_LTDC_Init+0xf8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <MX_LTDC_Init+0xf8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_LTDC_Init+0xf8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007f4:	481d      	ldr	r0, [pc, #116]	; (800086c <MX_LTDC_Init+0xf8>)
 80007f6:	f003 f9e1 	bl	8003bbc <HAL_LTDC_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000800:	f000 fa5a 	bl	8000cb8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000808:	23f0      	movs	r3, #240	; 0xf0
 800080a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000810:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000814:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000816:	2302      	movs	r3, #2
 8000818:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800081a:	23ff      	movs	r3, #255	; 0xff
 800081c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000822:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000826:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000828:	2307      	movs	r3, #7
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800082c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000832:	23f0      	movs	r3, #240	; 0xf0
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000836:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_LTDC_Init+0xf8>)
 8000856:	f003 fb43 	bl	8003ee0 <HAL_LTDC_ConfigLayer>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000860:	f000 fa2a 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3738      	adds	r7, #56	; 0x38
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200005fc 	.word	0x200005fc
 8000870:	40016800 	.word	0x40016800

08000874 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_SPI5_Init+0x64>)
 800087a:	4a18      	ldr	r2, [pc, #96]	; (80008dc <MX_SPI5_Init+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_SPI5_Init+0x64>)
 8000880:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000884:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_SPI5_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_SPI5_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_SPI5_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_SPI5_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008a8:	2218      	movs	r2, #24
 80008aa:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008c0:	220a      	movs	r2, #10
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_SPI5_Init+0x64>)
 80008c6:	f004 fb9f 	bl	8005008 <HAL_SPI_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80008d0:	f000 f9f2 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200006a4 	.word	0x200006a4
 80008dc:	40015000 	.word	0x40015000

080008e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f4:	463b      	mov	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_TIM1_Init+0x98>)
 80008fe:	4a1f      	ldr	r2, [pc, #124]	; (800097c <MX_TIM1_Init+0x9c>)
 8000900:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_TIM1_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_TIM1_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_TIM1_Init+0x98>)
 8000910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000914:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_TIM1_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_TIM1_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_TIM1_Init+0x98>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000928:	4813      	ldr	r0, [pc, #76]	; (8000978 <MX_TIM1_Init+0x98>)
 800092a:	f004 fbf6 	bl	800511a <HAL_TIM_Base_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000934:	f000 f9c0 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	4619      	mov	r1, r3
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <MX_TIM1_Init+0x98>)
 8000946:	f004 fdaf 	bl	80054a8 <HAL_TIM_ConfigClockSource>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000950:	f000 f9b2 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000954:	2300      	movs	r3, #0
 8000956:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800095c:	463b      	mov	r3, r7
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_TIM1_Init+0x98>)
 8000962:	f004 ffcb 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800096c:	f000 f9a4 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200006fc 	.word	0x200006fc
 800097c:	40010000 	.word	0x40010000

08000980 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_USART1_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009b8:	f005 f830 	bl	8005a1c <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009c2:	f000 f979 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000744 	.word	0x20000744
 80009d0:	40011000 	.word	0x40011000

080009d4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
 80009e8:	615a      	str	r2, [r3, #20]
 80009ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <MX_FMC_Init+0x98>)
 80009ee:	4a20      	ldr	r2, [pc, #128]	; (8000a70 <MX_FMC_Init+0x9c>)
 80009f0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80009f2:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <MX_FMC_Init+0x98>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_FMC_Init+0x98>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a00:	2204      	movs	r2, #4
 8000a02:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a06:	2210      	movs	r2, #16
 8000a08:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a0c:	2240      	movs	r2, #64	; 0x40
 8000a0e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a12:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a16:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a24:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a40:	2307      	movs	r3, #7
 8000a42:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a44:	2303      	movs	r3, #3
 8000a46:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_FMC_Init+0x98>)
 8000a56:	f004 faa3 	bl	8004fa0 <HAL_SDRAM_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a60:	f000 f92a 	bl	8000cb8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a64:	bf00      	nop
 8000a66:	3720      	adds	r7, #32
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000788 	.word	0x20000788
 8000a70:	a0000140 	.word	0xa0000140

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	; 0x38
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
 8000a8e:	4b7b      	ldr	r3, [pc, #492]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a7a      	ldr	r2, [pc, #488]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b78      	ldr	r3, [pc, #480]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	623b      	str	r3, [r7, #32]
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
 8000aaa:	4b74      	ldr	r3, [pc, #464]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a73      	ldr	r2, [pc, #460]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000ab0:	f043 0320 	orr.w	r3, r3, #32
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b71      	ldr	r3, [pc, #452]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0320 	and.w	r3, r3, #32
 8000abe:	61fb      	str	r3, [r7, #28]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
 8000ac6:	4b6d      	ldr	r3, [pc, #436]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a6c      	ldr	r2, [pc, #432]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b6a      	ldr	r3, [pc, #424]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ada:	61bb      	str	r3, [r7, #24]
 8000adc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	4b66      	ldr	r3, [pc, #408]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a65      	ldr	r2, [pc, #404]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b63      	ldr	r3, [pc, #396]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b5f      	ldr	r3, [pc, #380]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a5e      	ldr	r2, [pc, #376]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b5c      	ldr	r3, [pc, #368]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b58      	ldr	r3, [pc, #352]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a57      	ldr	r2, [pc, #348]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b55      	ldr	r3, [pc, #340]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	4b51      	ldr	r3, [pc, #324]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a50      	ldr	r2, [pc, #320]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b3c:	f043 0310 	orr.w	r3, r3, #16
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b4e      	ldr	r3, [pc, #312]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0310 	and.w	r3, r3, #16
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b4a      	ldr	r3, [pc, #296]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a49      	ldr	r2, [pc, #292]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b47      	ldr	r3, [pc, #284]	; (8000c7c <MX_GPIO_Init+0x208>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2116      	movs	r1, #22
 8000b6e:	4844      	ldr	r0, [pc, #272]	; (8000c80 <MX_GPIO_Init+0x20c>)
 8000b70:	f001 fa40 	bl	8001ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	4842      	ldr	r0, [pc, #264]	; (8000c84 <MX_GPIO_Init+0x210>)
 8000b7a:	f001 fa3b 	bl	8001ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b84:	4840      	ldr	r0, [pc, #256]	; (8000c88 <MX_GPIO_Init+0x214>)
 8000b86:	f001 fa35 	bl	8001ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000b90:	483e      	ldr	r0, [pc, #248]	; (8000c8c <MX_GPIO_Init+0x218>)
 8000b92:	f001 fa2f 	bl	8001ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000b96:	2316      	movs	r3, #22
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	4619      	mov	r1, r3
 8000bac:	4834      	ldr	r0, [pc, #208]	; (8000c80 <MX_GPIO_Init+0x20c>)
 8000bae:	f001 f875 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000bb2:	f248 0307 	movw	r3, #32775	; 0x8007
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bb8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	482e      	ldr	r0, [pc, #184]	; (8000c84 <MX_GPIO_Init+0x210>)
 8000bca:	f001 f867 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000bce:	2380      	movs	r3, #128	; 0x80
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be2:	4619      	mov	r1, r3
 8000be4:	4827      	ldr	r0, [pc, #156]	; (8000c84 <MX_GPIO_Init+0x210>)
 8000be6:	f001 f859 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000bea:	2320      	movs	r3, #32
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bee:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4820      	ldr	r0, [pc, #128]	; (8000c80 <MX_GPIO_Init+0x20c>)
 8000c00:	f001 f84c 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c04:	2304      	movs	r3, #4
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	481e      	ldr	r0, [pc, #120]	; (8000c90 <MX_GPIO_Init+0x21c>)
 8000c18:	f001 f840 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4815      	ldr	r0, [pc, #84]	; (8000c88 <MX_GPIO_Init+0x214>)
 8000c32:	f001 f833 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c36:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480e      	ldr	r0, [pc, #56]	; (8000c88 <MX_GPIO_Init+0x214>)
 8000c50:	f001 f824 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c54:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4807      	ldr	r0, [pc, #28]	; (8000c8c <MX_GPIO_Init+0x218>)
 8000c6e:	f001 f815 	bl	8001c9c <HAL_GPIO_Init>

}
 8000c72:	bf00      	nop
 8000c74:	3738      	adds	r7, #56	; 0x38
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020800 	.word	0x40020800
 8000c84:	40020000 	.word	0x40020000
 8000c88:	40020c00 	.word	0x40020c00
 8000c8c:	40021800 	.word	0x40021800
 8000c90:	40020400 	.word	0x40020400

08000c94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d101      	bne.n	8000caa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ca6:	f000 fccb 	bl	8001640 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40001000 	.word	0x40001000

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <Error_Handler+0x8>
	...

08000cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	4a0f      	ldr	r2, [pc, #60]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800

08000d14 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <HAL_CRC_MspInit+0x3c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d10d      	bne.n	8000d42 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_CRC_MspInit+0x40>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a09      	ldr	r2, [pc, #36]	; (8000d54 <HAL_CRC_MspInit+0x40>)
 8000d30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <HAL_CRC_MspInit+0x40>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d42:	bf00      	nop
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40023000 	.word	0x40023000
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <HAL_DMA2D_MspInit+0x48>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d115      	bne.n	8000d96 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <HAL_DMA2D_MspInit+0x4c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a0c      	ldr	r2, [pc, #48]	; (8000da4 <HAL_DMA2D_MspInit+0x4c>)
 8000d74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_DMA2D_MspInit+0x4c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2105      	movs	r1, #5
 8000d8a:	205a      	movs	r0, #90	; 0x5a
 8000d8c:	f000 fd54 	bl	8001838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000d90:	205a      	movs	r0, #90	; 0x5a
 8000d92:	f000 fd6d 	bl	8001870 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	4002b000 	.word	0x4002b000
 8000da4:	40023800 	.word	0x40023800

08000da8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a29      	ldr	r2, [pc, #164]	; (8000e6c <HAL_I2C_MspInit+0xc4>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d14b      	bne.n	8000e62 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <HAL_I2C_MspInit+0xc8>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a27      	ldr	r2, [pc, #156]	; (8000e70 <HAL_I2C_MspInit+0xc8>)
 8000dd4:	f043 0304 	orr.w	r3, r3, #4
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <HAL_I2C_MspInit+0xc8>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <HAL_I2C_MspInit+0xc8>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a20      	ldr	r2, [pc, #128]	; (8000e70 <HAL_I2C_MspInit+0xc8>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <HAL_I2C_MspInit+0xc8>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000e02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e08:	2312      	movs	r3, #18
 8000e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e14:	2304      	movs	r3, #4
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4815      	ldr	r0, [pc, #84]	; (8000e74 <HAL_I2C_MspInit+0xcc>)
 8000e20:	f000 ff3c 	bl	8001c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e2a:	2312      	movs	r3, #18
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e36:	2304      	movs	r3, #4
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480d      	ldr	r0, [pc, #52]	; (8000e78 <HAL_I2C_MspInit+0xd0>)
 8000e42:	f000 ff2b 	bl	8001c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_I2C_MspInit+0xc8>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <HAL_I2C_MspInit+0xc8>)
 8000e50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_I2C_MspInit+0xc8>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000e62:	bf00      	nop
 8000e64:	3728      	adds	r7, #40	; 0x28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40005c00 	.word	0x40005c00
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020800 	.word	0x40020800
 8000e78:	40020000 	.word	0x40020000

08000e7c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b09a      	sub	sp, #104	; 0x68
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e98:	2230      	movs	r2, #48	; 0x30
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f008 fc61 	bl	8009764 <memset>
  if(hltdc->Instance==LTDC)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a85      	ldr	r2, [pc, #532]	; (80010bc <HAL_LTDC_MspInit+0x240>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	f040 8102 	bne.w	80010b2 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000eae:	2308      	movs	r3, #8
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8000eb2:	2364      	movs	r3, #100	; 0x64
 8000eb4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 feac 	bl	8004c20 <HAL_RCCEx_PeriphCLKConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000ece:	f7ff fef3 	bl	8000cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
 8000ed6:	4b7a      	ldr	r3, [pc, #488]	; (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	4a79      	ldr	r2, [pc, #484]	; (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000edc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee2:	4b77      	ldr	r3, [pc, #476]	; (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000eea:	623b      	str	r3, [r7, #32]
 8000eec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	4b73      	ldr	r3, [pc, #460]	; (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a72      	ldr	r2, [pc, #456]	; (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000ef8:	f043 0320 	orr.w	r3, r3, #32
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b70      	ldr	r3, [pc, #448]	; (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0320 	and.w	r3, r3, #32
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
 8000f0e:	4b6c      	ldr	r3, [pc, #432]	; (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a6b      	ldr	r2, [pc, #428]	; (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b69      	ldr	r3, [pc, #420]	; (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	61bb      	str	r3, [r7, #24]
 8000f24:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	4b65      	ldr	r3, [pc, #404]	; (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a64      	ldr	r2, [pc, #400]	; (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b62      	ldr	r3, [pc, #392]	; (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	4b5e      	ldr	r3, [pc, #376]	; (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a5d      	ldr	r2, [pc, #372]	; (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b5b      	ldr	r3, [pc, #364]	; (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b57      	ldr	r3, [pc, #348]	; (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a56      	ldr	r2, [pc, #344]	; (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b54      	ldr	r3, [pc, #336]	; (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4b50      	ldr	r3, [pc, #320]	; (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a4f      	ldr	r2, [pc, #316]	; (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f84:	f043 0308 	orr.w	r3, r3, #8
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b4d      	ldr	r3, [pc, #308]	; (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0308 	and.w	r3, r3, #8
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f9a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fa8:	230e      	movs	r3, #14
 8000faa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000fac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4844      	ldr	r0, [pc, #272]	; (80010c4 <HAL_LTDC_MspInit+0x248>)
 8000fb4:	f000 fe72 	bl	8001c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000fb8:	f641 0358 	movw	r3, #6232	; 0x1858
 8000fbc:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fca:	230e      	movs	r3, #14
 8000fcc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	483c      	ldr	r0, [pc, #240]	; (80010c8 <HAL_LTDC_MspInit+0x24c>)
 8000fd6:	f000 fe61 	bl	8001c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fea:	2309      	movs	r3, #9
 8000fec:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4835      	ldr	r0, [pc, #212]	; (80010cc <HAL_LTDC_MspInit+0x250>)
 8000ff6:	f000 fe51 	bl	8001c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000ffa:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000ffe:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800100c:	230e      	movs	r3, #14
 800100e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001010:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001014:	4619      	mov	r1, r3
 8001016:	482d      	ldr	r0, [pc, #180]	; (80010cc <HAL_LTDC_MspInit+0x250>)
 8001018:	f000 fe40 	bl	8001c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800101c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001020:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800102e:	230e      	movs	r3, #14
 8001030:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001032:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001036:	4619      	mov	r1, r3
 8001038:	4825      	ldr	r0, [pc, #148]	; (80010d0 <HAL_LTDC_MspInit+0x254>)
 800103a:	f000 fe2f 	bl	8001c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800103e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001042:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001050:	230e      	movs	r3, #14
 8001052:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001054:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001058:	4619      	mov	r1, r3
 800105a:	481e      	ldr	r0, [pc, #120]	; (80010d4 <HAL_LTDC_MspInit+0x258>)
 800105c:	f000 fe1e 	bl	8001c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001060:	2348      	movs	r3, #72	; 0x48
 8001062:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001070:	230e      	movs	r3, #14
 8001072:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001074:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001078:	4619      	mov	r1, r3
 800107a:	4817      	ldr	r0, [pc, #92]	; (80010d8 <HAL_LTDC_MspInit+0x25c>)
 800107c:	f000 fe0e 	bl	8001c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001080:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001084:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001092:	2309      	movs	r3, #9
 8001094:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001096:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800109a:	4619      	mov	r1, r3
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <HAL_LTDC_MspInit+0x254>)
 800109e:	f000 fdfd 	bl	8001c9c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2105      	movs	r1, #5
 80010a6:	2058      	movs	r0, #88	; 0x58
 80010a8:	f000 fbc6 	bl	8001838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80010ac:	2058      	movs	r0, #88	; 0x58
 80010ae:	f000 fbdf 	bl	8001870 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80010b2:	bf00      	nop
 80010b4:	3768      	adds	r7, #104	; 0x68
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40016800 	.word	0x40016800
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40021400 	.word	0x40021400
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40020400 	.word	0x40020400
 80010d0:	40021800 	.word	0x40021800
 80010d4:	40020800 	.word	0x40020800
 80010d8:	40020c00 	.word	0x40020c00

080010dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a19      	ldr	r2, [pc, #100]	; (8001160 <HAL_SPI_MspInit+0x84>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d12c      	bne.n	8001158 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <HAL_SPI_MspInit+0x88>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a17      	ldr	r2, [pc, #92]	; (8001164 <HAL_SPI_MspInit+0x88>)
 8001108:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_SPI_MspInit+0x88>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HAL_SPI_MspInit+0x88>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a10      	ldr	r2, [pc, #64]	; (8001164 <HAL_SPI_MspInit+0x88>)
 8001124:	f043 0320 	orr.w	r3, r3, #32
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_SPI_MspInit+0x88>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0320 	and.w	r3, r3, #32
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001136:	f44f 7360 	mov.w	r3, #896	; 0x380
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001148:	2305      	movs	r3, #5
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <HAL_SPI_MspInit+0x8c>)
 8001154:	f000 fda2 	bl	8001c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	; 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40015000 	.word	0x40015000
 8001164:	40023800 	.word	0x40023800
 8001168:	40021400 	.word	0x40021400

0800116c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <HAL_TIM_Base_MspInit+0x3c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d10d      	bne.n	800119a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_TIM_Base_MspInit+0x40>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a09      	ldr	r2, [pc, #36]	; (80011ac <HAL_TIM_Base_MspInit+0x40>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <HAL_TIM_Base_MspInit+0x40>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40010000 	.word	0x40010000
 80011ac:	40023800 	.word	0x40023800

080011b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a19      	ldr	r2, [pc, #100]	; (8001234 <HAL_UART_MspInit+0x84>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d12c      	bne.n	800122c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <HAL_UART_MspInit+0x88>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a17      	ldr	r2, [pc, #92]	; (8001238 <HAL_UART_MspInit+0x88>)
 80011dc:	f043 0310 	orr.w	r3, r3, #16
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_UART_MspInit+0x88>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <HAL_UART_MspInit+0x88>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a10      	ldr	r2, [pc, #64]	; (8001238 <HAL_UART_MspInit+0x88>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <HAL_UART_MspInit+0x88>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800120a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800121c:	2307      	movs	r3, #7
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <HAL_UART_MspInit+0x8c>)
 8001228:	f000 fd38 	bl	8001c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	; 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40011000 	.word	0x40011000
 8001238:	40023800 	.word	0x40023800
 800123c:	40020000 	.word	0x40020000

08001240 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001254:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <HAL_FMC_MspInit+0x104>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d16f      	bne.n	800133c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800125c:	4b39      	ldr	r3, [pc, #228]	; (8001344 <HAL_FMC_MspInit+0x104>)
 800125e:	2201      	movs	r2, #1
 8001260:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	4b38      	ldr	r3, [pc, #224]	; (8001348 <HAL_FMC_MspInit+0x108>)
 8001268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800126a:	4a37      	ldr	r2, [pc, #220]	; (8001348 <HAL_FMC_MspInit+0x108>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6393      	str	r3, [r2, #56]	; 0x38
 8001272:	4b35      	ldr	r3, [pc, #212]	; (8001348 <HAL_FMC_MspInit+0x108>)
 8001274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800127e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001282:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001290:	230c      	movs	r3, #12
 8001292:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	4619      	mov	r1, r3
 8001298:	482c      	ldr	r0, [pc, #176]	; (800134c <HAL_FMC_MspInit+0x10c>)
 800129a:	f000 fcff 	bl	8001c9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800129e:	2301      	movs	r3, #1
 80012a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012ae:	230c      	movs	r3, #12
 80012b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4826      	ldr	r0, [pc, #152]	; (8001350 <HAL_FMC_MspInit+0x110>)
 80012b8:	f000 fcf0 	bl	8001c9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80012bc:	f248 1333 	movw	r3, #33075	; 0x8133
 80012c0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012ce:	230c      	movs	r3, #12
 80012d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	4619      	mov	r1, r3
 80012d6:	481f      	ldr	r0, [pc, #124]	; (8001354 <HAL_FMC_MspInit+0x114>)
 80012d8:	f000 fce0 	bl	8001c9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80012dc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80012e0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012ee:	230c      	movs	r3, #12
 80012f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	4619      	mov	r1, r3
 80012f6:	4818      	ldr	r0, [pc, #96]	; (8001358 <HAL_FMC_MspInit+0x118>)
 80012f8:	f000 fcd0 	bl	8001c9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80012fc:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001300:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800130e:	230c      	movs	r3, #12
 8001310:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4619      	mov	r1, r3
 8001316:	4811      	ldr	r0, [pc, #68]	; (800135c <HAL_FMC_MspInit+0x11c>)
 8001318:	f000 fcc0 	bl	8001c9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800131c:	2360      	movs	r3, #96	; 0x60
 800131e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800132c:	230c      	movs	r3, #12
 800132e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	4619      	mov	r1, r3
 8001334:	480a      	ldr	r0, [pc, #40]	; (8001360 <HAL_FMC_MspInit+0x120>)
 8001336:	f000 fcb1 	bl	8001c9c <HAL_GPIO_Init>
 800133a:	e000      	b.n	800133e <HAL_FMC_MspInit+0xfe>
    return;
 800133c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200007c0 	.word	0x200007c0
 8001348:	40023800 	.word	0x40023800
 800134c:	40021400 	.word	0x40021400
 8001350:	40020800 	.word	0x40020800
 8001354:	40021800 	.word	0x40021800
 8001358:	40021000 	.word	0x40021000
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40020400 	.word	0x40020400

08001364 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800136c:	f7ff ff68 	bl	8001240 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08e      	sub	sp, #56	; 0x38
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	4b33      	ldr	r3, [pc, #204]	; (800145c <HAL_InitTick+0xe4>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	4a32      	ldr	r2, [pc, #200]	; (800145c <HAL_InitTick+0xe4>)
 8001392:	f043 0310 	orr.w	r3, r3, #16
 8001396:	6413      	str	r3, [r2, #64]	; 0x40
 8001398:	4b30      	ldr	r3, [pc, #192]	; (800145c <HAL_InitTick+0xe4>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f003 0310 	and.w	r3, r3, #16
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013a4:	f107 0210 	add.w	r2, r7, #16
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4611      	mov	r1, r2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f003 fc04 	bl	8004bbc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013b4:	6a3b      	ldr	r3, [r7, #32]
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d103      	bne.n	80013c6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013be:	f003 fbd5 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 80013c2:	6378      	str	r0, [r7, #52]	; 0x34
 80013c4:	e004      	b.n	80013d0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013c6:	f003 fbd1 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 80013ca:	4603      	mov	r3, r0
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013d2:	4a23      	ldr	r2, [pc, #140]	; (8001460 <HAL_InitTick+0xe8>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	0c9b      	lsrs	r3, r3, #18
 80013da:	3b01      	subs	r3, #1
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013de:	4b21      	ldr	r3, [pc, #132]	; (8001464 <HAL_InitTick+0xec>)
 80013e0:	4a21      	ldr	r2, [pc, #132]	; (8001468 <HAL_InitTick+0xf0>)
 80013e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <HAL_InitTick+0xec>)
 80013e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013ec:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <HAL_InitTick+0xec>)
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <HAL_InitTick+0xec>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <HAL_InitTick+0xec>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_InitTick+0xec>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001404:	4817      	ldr	r0, [pc, #92]	; (8001464 <HAL_InitTick+0xec>)
 8001406:	f003 fe88 	bl	800511a <HAL_TIM_Base_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001410:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001414:	2b00      	cmp	r3, #0
 8001416:	d11b      	bne.n	8001450 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001418:	4812      	ldr	r0, [pc, #72]	; (8001464 <HAL_InitTick+0xec>)
 800141a:	f003 fecd 	bl	80051b8 <HAL_TIM_Base_Start_IT>
 800141e:	4603      	mov	r3, r0
 8001420:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001424:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001428:	2b00      	cmp	r3, #0
 800142a:	d111      	bne.n	8001450 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800142c:	2036      	movs	r0, #54	; 0x36
 800142e:	f000 fa1f 	bl	8001870 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b0f      	cmp	r3, #15
 8001436:	d808      	bhi.n	800144a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001438:	2200      	movs	r2, #0
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	2036      	movs	r0, #54	; 0x36
 800143e:	f000 f9fb 	bl	8001838 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <HAL_InitTick+0xf4>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	e002      	b.n	8001450 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001450:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001454:	4618      	mov	r0, r3
 8001456:	3738      	adds	r7, #56	; 0x38
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800
 8001460:	431bde83 	.word	0x431bde83
 8001464:	200007c4 	.word	0x200007c4
 8001468:	40001000 	.word	0x40001000
 800146c:	200004b8 	.word	0x200004b8

08001470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <NMI_Handler+0x4>

08001476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <HardFault_Handler+0x4>

0800147c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <MemManage_Handler+0x4>

08001482 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <BusFault_Handler+0x4>

08001488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <UsageFault_Handler+0x4>

0800148e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <TIM6_DAC_IRQHandler+0x10>)
 80014ce:	f003 fee3 	bl	8005298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200007c4 	.word	0x200007c4

080014dc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <OTG_HS_IRQHandler+0x10>)
 80014e2:	f001 f80b 	bl	80024fc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000bf0 	.word	0x20000bf0

080014f0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <LTDC_IRQHandler+0x10>)
 80014f6:	f002 fc31 	bl	8003d5c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200005fc 	.word	0x200005fc

08001504 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <DMA2D_IRQHandler+0x10>)
 800150a:	f000 fa24 	bl	8001956 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000568 	.word	0x20000568

08001518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001520:	4a14      	ldr	r2, [pc, #80]	; (8001574 <_sbrk+0x5c>)
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <_sbrk+0x60>)
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <_sbrk+0x64>)
 8001536:	4a12      	ldr	r2, [pc, #72]	; (8001580 <_sbrk+0x68>)
 8001538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	429a      	cmp	r2, r3
 8001546:	d207      	bcs.n	8001558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001548:	f008 f8d2 	bl	80096f0 <__errno>
 800154c:	4603      	mov	r3, r0
 800154e:	220c      	movs	r2, #12
 8001550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	e009      	b.n	800156c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <_sbrk+0x64>)
 8001568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20030000 	.word	0x20030000
 8001578:	00000400 	.word	0x00000400
 800157c:	2000080c 	.word	0x2000080c
 8001580:	20000f08 	.word	0x20000f08

08001584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <SystemInit+0x20>)
 800158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158e:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <SystemInit+0x20>)
 8001590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015ac:	480d      	ldr	r0, [pc, #52]	; (80015e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ae:	490e      	ldr	r1, [pc, #56]	; (80015e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015b0:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b4:	e002      	b.n	80015bc <LoopCopyDataInit>

080015b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ba:	3304      	adds	r3, #4

080015bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c0:	d3f9      	bcc.n	80015b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c2:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015c4:	4c0b      	ldr	r4, [pc, #44]	; (80015f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c8:	e001      	b.n	80015ce <LoopFillZerobss>

080015ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015cc:	3204      	adds	r2, #4

080015ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d0:	d3fb      	bcc.n	80015ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015d2:	f7ff ffd7 	bl	8001584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015d6:	f008 f891 	bl	80096fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015da:	f7fe ffad 	bl	8000538 <main>
  bx  lr    
 80015de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80015e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e8:	20000544 	.word	0x20000544
  ldr r2, =_sidata
 80015ec:	080099b4 	.word	0x080099b4
  ldr r2, =_sbss
 80015f0:	20000544 	.word	0x20000544
  ldr r4, =_ebss
 80015f4:	20000f04 	.word	0x20000f04

080015f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC_IRQHandler>
	...

080015fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_Init+0x40>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <HAL_Init+0x40>)
 8001606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800160a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_Init+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_Init+0x40>)
 8001612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001616:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <HAL_Init+0x40>)
 800161e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001624:	2003      	movs	r0, #3
 8001626:	f000 f8fc 	bl	8001822 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162a:	200f      	movs	r0, #15
 800162c:	f7ff fea4 	bl	8001378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001630:	f7ff fb48 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023c00 	.word	0x40023c00

08001640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x20>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_IncTick+0x24>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_IncTick+0x24>)
 8001652:	6013      	str	r3, [r2, #0]
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	200004bc 	.word	0x200004bc
 8001664:	20000810 	.word	0x20000810

08001668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <HAL_GetTick+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000810 	.word	0x20000810

08001680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001688:	f7ff ffee 	bl	8001668 <HAL_GetTick>
 800168c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001698:	d005      	beq.n	80016a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_Delay+0x44>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016a6:	bf00      	nop
 80016a8:	f7ff ffde 	bl	8001668 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d8f7      	bhi.n	80016a8 <HAL_Delay+0x28>
  {
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200004bc 	.word	0x200004bc

080016c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fa:	4a04      	ldr	r2, [pc, #16]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	60d3      	str	r3, [r2, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	2b00      	cmp	r3, #0
 800173c:	db0b      	blt.n	8001756 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	f003 021f 	and.w	r2, r3, #31
 8001744:	4907      	ldr	r1, [pc, #28]	; (8001764 <__NVIC_EnableIRQ+0x38>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	2001      	movs	r0, #1
 800174e:	fa00 f202 	lsl.w	r2, r0, r2
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e100 	.word	0xe000e100

08001768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	2b00      	cmp	r3, #0
 800177a:	db0a      	blt.n	8001792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	490c      	ldr	r1, [pc, #48]	; (80017b4 <__NVIC_SetPriority+0x4c>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	0112      	lsls	r2, r2, #4
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	440b      	add	r3, r1
 800178c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001790:	e00a      	b.n	80017a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4908      	ldr	r1, [pc, #32]	; (80017b8 <__NVIC_SetPriority+0x50>)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	3b04      	subs	r3, #4
 80017a0:	0112      	lsls	r2, r2, #4
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	440b      	add	r3, r1
 80017a6:	761a      	strb	r2, [r3, #24]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000e100 	.word	0xe000e100
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b089      	sub	sp, #36	; 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f1c3 0307 	rsb	r3, r3, #7
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	bf28      	it	cs
 80017da:	2304      	movcs	r3, #4
 80017dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3304      	adds	r3, #4
 80017e2:	2b06      	cmp	r3, #6
 80017e4:	d902      	bls.n	80017ec <NVIC_EncodePriority+0x30>
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3b03      	subs	r3, #3
 80017ea:	e000      	b.n	80017ee <NVIC_EncodePriority+0x32>
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	f04f 32ff 	mov.w	r2, #4294967295
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43da      	mvns	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	401a      	ands	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001804:	f04f 31ff 	mov.w	r1, #4294967295
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43d9      	mvns	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	4313      	orrs	r3, r2
         );
}
 8001816:	4618      	mov	r0, r3
 8001818:	3724      	adds	r7, #36	; 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ff4c 	bl	80016c8 <__NVIC_SetPriorityGrouping>
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800184a:	f7ff ff61 	bl	8001710 <__NVIC_GetPriorityGrouping>
 800184e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	68b9      	ldr	r1, [r7, #8]
 8001854:	6978      	ldr	r0, [r7, #20]
 8001856:	f7ff ffb1 	bl	80017bc <NVIC_EncodePriority>
 800185a:	4602      	mov	r2, r0
 800185c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff80 	bl	8001768 <__NVIC_SetPriority>
}
 8001868:	bf00      	nop
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff54 	bl	800172c <__NVIC_EnableIRQ>
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e00e      	b.n	80018bc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	795b      	ldrb	r3, [r3, #5]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d105      	bne.n	80018b4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff fa30 	bl	8000d14 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e03b      	b.n	800194e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d106      	bne.n	80018f0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff fa34 	bl	8000d58 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2202      	movs	r2, #2
 80018f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001914:	f023 0107 	bic.w	r1, r3, #7
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800192e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68d1      	ldr	r1, [r2, #12]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6812      	ldr	r2, [r2, #0]
 800193a:	430b      	orrs	r3, r1
 800193c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d026      	beq.n	80019c6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d021      	beq.n	80019c6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001990:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001996:	f043 0201 	orr.w	r2, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2201      	movs	r2, #1
 80019a4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2204      	movs	r2, #4
 80019aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f003 0320 	and.w	r3, r3, #32
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d026      	beq.n	8001a1e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d021      	beq.n	8001a1e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019e8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2220      	movs	r2, #32
 80019f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f6:	f043 0202 	orr.w	r2, r3, #2
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2204      	movs	r2, #4
 8001a02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d026      	beq.n	8001a76 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d021      	beq.n	8001a76 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a40:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2208      	movs	r2, #8
 8001a48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4e:	f043 0204 	orr.w	r2, r3, #4
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2204      	movs	r2, #4
 8001a5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d013      	beq.n	8001aa8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00e      	beq.n	8001aa8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a98:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f853 	bl	8001b4e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d024      	beq.n	8001afc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d01f      	beq.n	8001afc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001aca:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d01f      	beq.n	8001b46 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01a      	beq.n	8001b46 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b1e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2210      	movs	r2, #16
 8001b26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f80e 	bl	8001b62 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_DMA2D_ConfigLayer+0x20>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e079      	b.n	8001c8c <HAL_DMA2D_ConfigLayer+0x114>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	3318      	adds	r3, #24
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	041b      	lsls	r3, r3, #16
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001bc2:	4b35      	ldr	r3, [pc, #212]	; (8001c98 <HAL_DMA2D_ConfigLayer+0x120>)
 8001bc4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b0a      	cmp	r3, #10
 8001bcc:	d003      	beq.n	8001bd6 <HAL_DMA2D_ConfigLayer+0x5e>
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b09      	cmp	r3, #9
 8001bd4:	d107      	bne.n	8001be6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e005      	b.n	8001bf2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	061b      	lsls	r3, r3, #24
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d120      	bne.n	8001c3a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	ea02 0103 	and.w	r1, r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b0a      	cmp	r3, #10
 8001c20:	d003      	beq.n	8001c2a <HAL_DMA2D_ConfigLayer+0xb2>
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b09      	cmp	r3, #9
 8001c28:	d127      	bne.n	8001c7a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
 8001c38:	e01f      	b.n	8001c7a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	69da      	ldr	r2, [r3, #28]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	ea02 0103 	and.w	r1, r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b0a      	cmp	r3, #10
 8001c62:	d003      	beq.n	8001c6c <HAL_DMA2D_ConfigLayer+0xf4>
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b09      	cmp	r3, #9
 8001c6a:	d106      	bne.n	8001c7a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001c78:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	371c      	adds	r7, #28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	ff03000f 	.word	0xff03000f

08001c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	e177      	b.n	8001fa8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cb8:	2201      	movs	r2, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	f040 8166 	bne.w	8001fa2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d005      	beq.n	8001cee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d130      	bne.n	8001d50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d24:	2201      	movs	r2, #1
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 0201 	and.w	r2, r3, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d017      	beq.n	8001d8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d123      	bne.n	8001de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	08da      	lsrs	r2, r3, #3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3208      	adds	r2, #8
 8001da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	220f      	movs	r2, #15
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	08da      	lsrs	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3208      	adds	r2, #8
 8001dda:	69b9      	ldr	r1, [r7, #24]
 8001ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	2203      	movs	r2, #3
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0203 	and.w	r2, r3, #3
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80c0 	beq.w	8001fa2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	4b66      	ldr	r3, [pc, #408]	; (8001fc0 <HAL_GPIO_Init+0x324>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	4a65      	ldr	r2, [pc, #404]	; (8001fc0 <HAL_GPIO_Init+0x324>)
 8001e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e30:	6453      	str	r3, [r2, #68]	; 0x44
 8001e32:	4b63      	ldr	r3, [pc, #396]	; (8001fc0 <HAL_GPIO_Init+0x324>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e3e:	4a61      	ldr	r2, [pc, #388]	; (8001fc4 <HAL_GPIO_Init+0x328>)
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	089b      	lsrs	r3, r3, #2
 8001e44:	3302      	adds	r3, #2
 8001e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	220f      	movs	r2, #15
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a58      	ldr	r2, [pc, #352]	; (8001fc8 <HAL_GPIO_Init+0x32c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d037      	beq.n	8001eda <HAL_GPIO_Init+0x23e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a57      	ldr	r2, [pc, #348]	; (8001fcc <HAL_GPIO_Init+0x330>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d031      	beq.n	8001ed6 <HAL_GPIO_Init+0x23a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a56      	ldr	r2, [pc, #344]	; (8001fd0 <HAL_GPIO_Init+0x334>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d02b      	beq.n	8001ed2 <HAL_GPIO_Init+0x236>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a55      	ldr	r2, [pc, #340]	; (8001fd4 <HAL_GPIO_Init+0x338>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d025      	beq.n	8001ece <HAL_GPIO_Init+0x232>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a54      	ldr	r2, [pc, #336]	; (8001fd8 <HAL_GPIO_Init+0x33c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01f      	beq.n	8001eca <HAL_GPIO_Init+0x22e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a53      	ldr	r2, [pc, #332]	; (8001fdc <HAL_GPIO_Init+0x340>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d019      	beq.n	8001ec6 <HAL_GPIO_Init+0x22a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a52      	ldr	r2, [pc, #328]	; (8001fe0 <HAL_GPIO_Init+0x344>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d013      	beq.n	8001ec2 <HAL_GPIO_Init+0x226>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a51      	ldr	r2, [pc, #324]	; (8001fe4 <HAL_GPIO_Init+0x348>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00d      	beq.n	8001ebe <HAL_GPIO_Init+0x222>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a50      	ldr	r2, [pc, #320]	; (8001fe8 <HAL_GPIO_Init+0x34c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d007      	beq.n	8001eba <HAL_GPIO_Init+0x21e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4f      	ldr	r2, [pc, #316]	; (8001fec <HAL_GPIO_Init+0x350>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d101      	bne.n	8001eb6 <HAL_GPIO_Init+0x21a>
 8001eb2:	2309      	movs	r3, #9
 8001eb4:	e012      	b.n	8001edc <HAL_GPIO_Init+0x240>
 8001eb6:	230a      	movs	r3, #10
 8001eb8:	e010      	b.n	8001edc <HAL_GPIO_Init+0x240>
 8001eba:	2308      	movs	r3, #8
 8001ebc:	e00e      	b.n	8001edc <HAL_GPIO_Init+0x240>
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	e00c      	b.n	8001edc <HAL_GPIO_Init+0x240>
 8001ec2:	2306      	movs	r3, #6
 8001ec4:	e00a      	b.n	8001edc <HAL_GPIO_Init+0x240>
 8001ec6:	2305      	movs	r3, #5
 8001ec8:	e008      	b.n	8001edc <HAL_GPIO_Init+0x240>
 8001eca:	2304      	movs	r3, #4
 8001ecc:	e006      	b.n	8001edc <HAL_GPIO_Init+0x240>
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e004      	b.n	8001edc <HAL_GPIO_Init+0x240>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e002      	b.n	8001edc <HAL_GPIO_Init+0x240>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <HAL_GPIO_Init+0x240>
 8001eda:	2300      	movs	r3, #0
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	f002 0203 	and.w	r2, r2, #3
 8001ee2:	0092      	lsls	r2, r2, #2
 8001ee4:	4093      	lsls	r3, r2
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eec:	4935      	ldr	r1, [pc, #212]	; (8001fc4 <HAL_GPIO_Init+0x328>)
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001efa:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <HAL_GPIO_Init+0x354>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f1e:	4a34      	ldr	r2, [pc, #208]	; (8001ff0 <HAL_GPIO_Init+0x354>)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f24:	4b32      	ldr	r3, [pc, #200]	; (8001ff0 <HAL_GPIO_Init+0x354>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f48:	4a29      	ldr	r2, [pc, #164]	; (8001ff0 <HAL_GPIO_Init+0x354>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f4e:	4b28      	ldr	r3, [pc, #160]	; (8001ff0 <HAL_GPIO_Init+0x354>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f72:	4a1f      	ldr	r2, [pc, #124]	; (8001ff0 <HAL_GPIO_Init+0x354>)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f78:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <HAL_GPIO_Init+0x354>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f9c:	4a14      	ldr	r2, [pc, #80]	; (8001ff0 <HAL_GPIO_Init+0x354>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	61fb      	str	r3, [r7, #28]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	2b0f      	cmp	r3, #15
 8001fac:	f67f ae84 	bls.w	8001cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3724      	adds	r7, #36	; 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40013800 	.word	0x40013800
 8001fc8:	40020000 	.word	0x40020000
 8001fcc:	40020400 	.word	0x40020400
 8001fd0:	40020800 	.word	0x40020800
 8001fd4:	40020c00 	.word	0x40020c00
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40021400 	.word	0x40021400
 8001fe0:	40021800 	.word	0x40021800
 8001fe4:	40021c00 	.word	0x40021c00
 8001fe8:	40022000 	.word	0x40022000
 8001fec:	40022400 	.word	0x40022400
 8001ff0:	40013c00 	.word	0x40013c00

08001ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	807b      	strh	r3, [r7, #2]
 8002000:	4613      	mov	r3, r2
 8002002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002004:	787b      	ldrb	r3, [r7, #1]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800200a:	887a      	ldrh	r2, [r7, #2]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002010:	e003      	b.n	800201a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002012:	887b      	ldrh	r3, [r7, #2]
 8002014:	041a      	lsls	r2, r3, #16
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	619a      	str	r2, [r3, #24]
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002026:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002028:	b08f      	sub	sp, #60	; 0x3c
 800202a:	af0a      	add	r7, sp, #40	; 0x28
 800202c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e054      	b.n	80020e2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d106      	bne.n	8002058 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f007 f89c 	bl	8009190 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2203      	movs	r2, #3
 800205c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d102      	bne.n	8002072 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f004 f8ca 	bl	8006210 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	603b      	str	r3, [r7, #0]
 8002082:	687e      	ldr	r6, [r7, #4]
 8002084:	466d      	mov	r5, sp
 8002086:	f106 0410 	add.w	r4, r6, #16
 800208a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800208c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800208e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002090:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002092:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002096:	e885 0003 	stmia.w	r5, {r0, r1}
 800209a:	1d33      	adds	r3, r6, #4
 800209c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800209e:	6838      	ldr	r0, [r7, #0]
 80020a0:	f004 f844 	bl	800612c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2101      	movs	r1, #1
 80020aa:	4618      	mov	r0, r3
 80020ac:	f004 f8c1 	bl	8006232 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	687e      	ldr	r6, [r7, #4]
 80020b8:	466d      	mov	r5, sp
 80020ba:	f106 0410 	add.w	r4, r6, #16
 80020be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80020ce:	1d33      	adds	r3, r6, #4
 80020d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020d2:	6838      	ldr	r0, [r7, #0]
 80020d4:	f004 fa4a 	bl	800656c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020ea <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80020ea:	b590      	push	{r4, r7, lr}
 80020ec:	b089      	sub	sp, #36	; 0x24
 80020ee:	af04      	add	r7, sp, #16
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	4608      	mov	r0, r1
 80020f4:	4611      	mov	r1, r2
 80020f6:	461a      	mov	r2, r3
 80020f8:	4603      	mov	r3, r0
 80020fa:	70fb      	strb	r3, [r7, #3]
 80020fc:	460b      	mov	r3, r1
 80020fe:	70bb      	strb	r3, [r7, #2]
 8002100:	4613      	mov	r3, r2
 8002102:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_HCD_HC_Init+0x28>
 800210e:	2302      	movs	r3, #2
 8002110:	e076      	b.n	8002200 <HAL_HCD_HC_Init+0x116>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800211a:	78fb      	ldrb	r3, [r7, #3]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	212c      	movs	r1, #44	; 0x2c
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	333d      	adds	r3, #61	; 0x3d
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	212c      	movs	r1, #44	; 0x2c
 8002132:	fb01 f303 	mul.w	r3, r1, r3
 8002136:	4413      	add	r3, r2
 8002138:	3338      	adds	r3, #56	; 0x38
 800213a:	787a      	ldrb	r2, [r7, #1]
 800213c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	212c      	movs	r1, #44	; 0x2c
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	4413      	add	r3, r2
 800214a:	3340      	adds	r3, #64	; 0x40
 800214c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800214e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	212c      	movs	r1, #44	; 0x2c
 8002156:	fb01 f303 	mul.w	r3, r1, r3
 800215a:	4413      	add	r3, r2
 800215c:	3339      	adds	r3, #57	; 0x39
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	212c      	movs	r1, #44	; 0x2c
 8002168:	fb01 f303 	mul.w	r3, r1, r3
 800216c:	4413      	add	r3, r2
 800216e:	333f      	adds	r3, #63	; 0x3f
 8002170:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002174:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	78ba      	ldrb	r2, [r7, #2]
 800217a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800217e:	b2d0      	uxtb	r0, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	212c      	movs	r1, #44	; 0x2c
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	4413      	add	r3, r2
 800218a:	333a      	adds	r3, #58	; 0x3a
 800218c:	4602      	mov	r2, r0
 800218e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002190:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002194:	2b00      	cmp	r3, #0
 8002196:	da09      	bge.n	80021ac <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	212c      	movs	r1, #44	; 0x2c
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	333b      	adds	r3, #59	; 0x3b
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
 80021aa:	e008      	b.n	80021be <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	212c      	movs	r1, #44	; 0x2c
 80021b2:	fb01 f303 	mul.w	r3, r1, r3
 80021b6:	4413      	add	r3, r2
 80021b8:	333b      	adds	r3, #59	; 0x3b
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	212c      	movs	r1, #44	; 0x2c
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	333c      	adds	r3, #60	; 0x3c
 80021cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021d0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	787c      	ldrb	r4, [r7, #1]
 80021d8:	78ba      	ldrb	r2, [r7, #2]
 80021da:	78f9      	ldrb	r1, [r7, #3]
 80021dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021de:	9302      	str	r3, [sp, #8]
 80021e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021e4:	9301      	str	r3, [sp, #4]
 80021e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	4623      	mov	r3, r4
 80021ee:	f004 fb43 	bl	8006878 <USB_HC_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	bd90      	pop	{r4, r7, pc}

08002208 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800221e:	2b01      	cmp	r3, #1
 8002220:	d101      	bne.n	8002226 <HAL_HCD_HC_Halt+0x1e>
 8002222:	2302      	movs	r3, #2
 8002224:	e00f      	b.n	8002246 <HAL_HCD_HC_Halt+0x3e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	78fa      	ldrb	r2, [r7, #3]
 8002234:	4611      	mov	r1, r2
 8002236:	4618      	mov	r0, r3
 8002238:	f004 fd93 	bl	8006d62 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002244:	7bfb      	ldrb	r3, [r7, #15]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	4608      	mov	r0, r1
 800225a:	4611      	mov	r1, r2
 800225c:	461a      	mov	r2, r3
 800225e:	4603      	mov	r3, r0
 8002260:	70fb      	strb	r3, [r7, #3]
 8002262:	460b      	mov	r3, r1
 8002264:	70bb      	strb	r3, [r7, #2]
 8002266:	4613      	mov	r3, r2
 8002268:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800226a:	78fb      	ldrb	r3, [r7, #3]
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	212c      	movs	r1, #44	; 0x2c
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	4413      	add	r3, r2
 8002276:	333b      	adds	r3, #59	; 0x3b
 8002278:	78ba      	ldrb	r2, [r7, #2]
 800227a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	212c      	movs	r1, #44	; 0x2c
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	4413      	add	r3, r2
 8002288:	333f      	adds	r3, #63	; 0x3f
 800228a:	787a      	ldrb	r2, [r7, #1]
 800228c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800228e:	7c3b      	ldrb	r3, [r7, #16]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d112      	bne.n	80022ba <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	212c      	movs	r1, #44	; 0x2c
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4413      	add	r3, r2
 80022a0:	3342      	adds	r3, #66	; 0x42
 80022a2:	2203      	movs	r2, #3
 80022a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	333d      	adds	r3, #61	; 0x3d
 80022b4:	7f3a      	ldrb	r2, [r7, #28]
 80022b6:	701a      	strb	r2, [r3, #0]
 80022b8:	e008      	b.n	80022cc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	212c      	movs	r1, #44	; 0x2c
 80022c0:	fb01 f303 	mul.w	r3, r1, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	3342      	adds	r3, #66	; 0x42
 80022c8:	2202      	movs	r2, #2
 80022ca:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80022cc:	787b      	ldrb	r3, [r7, #1]
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	f200 80c6 	bhi.w	8002460 <HAL_HCD_HC_SubmitRequest+0x210>
 80022d4:	a201      	add	r2, pc, #4	; (adr r2, 80022dc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80022d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022da:	bf00      	nop
 80022dc:	080022ed 	.word	0x080022ed
 80022e0:	0800244d 	.word	0x0800244d
 80022e4:	08002351 	.word	0x08002351
 80022e8:	080023cf 	.word	0x080023cf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80022ec:	7c3b      	ldrb	r3, [r7, #16]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	f040 80b8 	bne.w	8002464 <HAL_HCD_HC_SubmitRequest+0x214>
 80022f4:	78bb      	ldrb	r3, [r7, #2]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f040 80b4 	bne.w	8002464 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80022fc:	8b3b      	ldrh	r3, [r7, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d108      	bne.n	8002314 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	212c      	movs	r1, #44	; 0x2c
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	4413      	add	r3, r2
 800230e:	3355      	adds	r3, #85	; 0x55
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	212c      	movs	r1, #44	; 0x2c
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	4413      	add	r3, r2
 8002320:	3355      	adds	r3, #85	; 0x55
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d109      	bne.n	800233c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	212c      	movs	r1, #44	; 0x2c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	3342      	adds	r3, #66	; 0x42
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800233a:	e093      	b.n	8002464 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	212c      	movs	r1, #44	; 0x2c
 8002342:	fb01 f303 	mul.w	r3, r1, r3
 8002346:	4413      	add	r3, r2
 8002348:	3342      	adds	r3, #66	; 0x42
 800234a:	2202      	movs	r2, #2
 800234c:	701a      	strb	r2, [r3, #0]
      break;
 800234e:	e089      	b.n	8002464 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002350:	78bb      	ldrb	r3, [r7, #2]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d11d      	bne.n	8002392 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	212c      	movs	r1, #44	; 0x2c
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	4413      	add	r3, r2
 8002362:	3355      	adds	r3, #85	; 0x55
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d109      	bne.n	800237e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	212c      	movs	r1, #44	; 0x2c
 8002370:	fb01 f303 	mul.w	r3, r1, r3
 8002374:	4413      	add	r3, r2
 8002376:	3342      	adds	r3, #66	; 0x42
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800237c:	e073      	b.n	8002466 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	212c      	movs	r1, #44	; 0x2c
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	4413      	add	r3, r2
 800238a:	3342      	adds	r3, #66	; 0x42
 800238c:	2202      	movs	r2, #2
 800238e:	701a      	strb	r2, [r3, #0]
      break;
 8002390:	e069      	b.n	8002466 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	212c      	movs	r1, #44	; 0x2c
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	4413      	add	r3, r2
 800239e:	3354      	adds	r3, #84	; 0x54
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023a6:	78fb      	ldrb	r3, [r7, #3]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	212c      	movs	r1, #44	; 0x2c
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	3342      	adds	r3, #66	; 0x42
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
      break;
 80023b8:	e055      	b.n	8002466 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023ba:	78fb      	ldrb	r3, [r7, #3]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	212c      	movs	r1, #44	; 0x2c
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	3342      	adds	r3, #66	; 0x42
 80023c8:	2202      	movs	r2, #2
 80023ca:	701a      	strb	r2, [r3, #0]
      break;
 80023cc:	e04b      	b.n	8002466 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023ce:	78bb      	ldrb	r3, [r7, #2]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d11d      	bne.n	8002410 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	212c      	movs	r1, #44	; 0x2c
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	4413      	add	r3, r2
 80023e0:	3355      	adds	r3, #85	; 0x55
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d109      	bne.n	80023fc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	212c      	movs	r1, #44	; 0x2c
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	3342      	adds	r3, #66	; 0x42
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023fa:	e034      	b.n	8002466 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	3342      	adds	r3, #66	; 0x42
 800240a:	2202      	movs	r2, #2
 800240c:	701a      	strb	r2, [r3, #0]
      break;
 800240e:	e02a      	b.n	8002466 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	212c      	movs	r1, #44	; 0x2c
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	3354      	adds	r3, #84	; 0x54
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d109      	bne.n	8002438 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	3342      	adds	r3, #66	; 0x42
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
      break;
 8002436:	e016      	b.n	8002466 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	212c      	movs	r1, #44	; 0x2c
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	4413      	add	r3, r2
 8002444:	3342      	adds	r3, #66	; 0x42
 8002446:	2202      	movs	r2, #2
 8002448:	701a      	strb	r2, [r3, #0]
      break;
 800244a:	e00c      	b.n	8002466 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	212c      	movs	r1, #44	; 0x2c
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	4413      	add	r3, r2
 8002458:	3342      	adds	r3, #66	; 0x42
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
      break;
 800245e:	e002      	b.n	8002466 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002460:	bf00      	nop
 8002462:	e000      	b.n	8002466 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002464:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	212c      	movs	r1, #44	; 0x2c
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	4413      	add	r3, r2
 8002472:	3344      	adds	r3, #68	; 0x44
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	8b3a      	ldrh	r2, [r7, #24]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	202c      	movs	r0, #44	; 0x2c
 8002480:	fb00 f303 	mul.w	r3, r0, r3
 8002484:	440b      	add	r3, r1
 8002486:	334c      	adds	r3, #76	; 0x4c
 8002488:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	212c      	movs	r1, #44	; 0x2c
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	4413      	add	r3, r2
 8002496:	3360      	adds	r3, #96	; 0x60
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	212c      	movs	r1, #44	; 0x2c
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	3350      	adds	r3, #80	; 0x50
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	212c      	movs	r1, #44	; 0x2c
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	3339      	adds	r3, #57	; 0x39
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	212c      	movs	r1, #44	; 0x2c
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	3361      	adds	r3, #97	; 0x61
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	222c      	movs	r2, #44	; 0x2c
 80024da:	fb02 f303 	mul.w	r3, r2, r3
 80024de:	3338      	adds	r3, #56	; 0x38
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	18d1      	adds	r1, r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	461a      	mov	r2, r3
 80024ec:	f004 fae6 	bl	8006abc <USB_HC_StartXfer>
 80024f0:	4603      	mov	r3, r0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop

080024fc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f003 ffe7 	bl	80064e6 <USB_GetMode>
 8002518:	4603      	mov	r3, r0
 800251a:	2b01      	cmp	r3, #1
 800251c:	f040 80f6 	bne.w	800270c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f003 ffcb 	bl	80064c0 <USB_ReadInterrupts>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80ec 	beq.w	800270a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f003 ffc2 	bl	80064c0 <USB_ReadInterrupts>
 800253c:	4603      	mov	r3, r0
 800253e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002546:	d104      	bne.n	8002552 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002550:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f003 ffb2 	bl	80064c0 <USB_ReadInterrupts>
 800255c:	4603      	mov	r3, r0
 800255e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002566:	d104      	bne.n	8002572 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002570:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f003 ffa2 	bl	80064c0 <USB_ReadInterrupts>
 800257c:	4603      	mov	r3, r0
 800257e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002582:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002586:	d104      	bne.n	8002592 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002590:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f003 ff92 	bl	80064c0 <USB_ReadInterrupts>
 800259c:	4603      	mov	r3, r0
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d103      	bne.n	80025ae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2202      	movs	r2, #2
 80025ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f003 ff84 	bl	80064c0 <USB_ReadInterrupts>
 80025b8:	4603      	mov	r3, r0
 80025ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025c2:	d11c      	bne.n	80025fe <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025cc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10f      	bne.n	80025fe <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80025de:	2110      	movs	r1, #16
 80025e0:	6938      	ldr	r0, [r7, #16]
 80025e2:	f003 fe73 	bl	80062cc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80025e6:	6938      	ldr	r0, [r7, #16]
 80025e8:	f003 fea4 	bl	8006334 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2101      	movs	r1, #1
 80025f2:	4618      	mov	r0, r3
 80025f4:	f004 f87a 	bl	80066ec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f006 fe43 	bl	8009284 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f003 ff5c 	bl	80064c0 <USB_ReadInterrupts>
 8002608:	4603      	mov	r3, r0
 800260a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800260e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002612:	d102      	bne.n	800261a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f001 f89e 	bl	8003756 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f003 ff4e 	bl	80064c0 <USB_ReadInterrupts>
 8002624:	4603      	mov	r3, r0
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b08      	cmp	r3, #8
 800262c:	d106      	bne.n	800263c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f006 fe0c 	bl	800924c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2208      	movs	r2, #8
 800263a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f003 ff3d 	bl	80064c0 <USB_ReadInterrupts>
 8002646:	4603      	mov	r3, r0
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	2b10      	cmp	r3, #16
 800264e:	d101      	bne.n	8002654 <HAL_HCD_IRQHandler+0x158>
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <HAL_HCD_IRQHandler+0x15a>
 8002654:	2300      	movs	r3, #0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d012      	beq.n	8002680 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	699a      	ldr	r2, [r3, #24]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0210 	bic.w	r2, r2, #16
 8002668:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 ffa1 	bl	80035b2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0210 	orr.w	r2, r2, #16
 800267e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f003 ff1b 	bl	80064c0 <USB_ReadInterrupts>
 800268a:	4603      	mov	r3, r0
 800268c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002690:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002694:	d13a      	bne.n	800270c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f004 fb50 	bl	8006d40 <USB_HC_ReadInterrupt>
 80026a0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	e025      	b.n	80026f4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d018      	beq.n	80026ee <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026d2:	d106      	bne.n	80026e2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	4619      	mov	r1, r3
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f8ab 	bl	8002836 <HCD_HC_IN_IRQHandler>
 80026e0:	e005      	b.n	80026ee <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	4619      	mov	r1, r3
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 fbf9 	bl	8002ee0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3301      	adds	r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d3d4      	bcc.n	80026a8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002706:	615a      	str	r2, [r3, #20]
 8002708:	e000      	b.n	800270c <HAL_HCD_IRQHandler+0x210>
      return;
 800270a:	bf00      	nop
    }
  }
}
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_HCD_Start+0x16>
 8002724:	2302      	movs	r3, #2
 8002726:	e013      	b.n	8002750 <HAL_HCD_Start+0x3e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2101      	movs	r1, #1
 8002736:	4618      	mov	r0, r3
 8002738:	f004 f83c 	bl	80067b4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f003 fd54 	bl	80061ee <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_HCD_Stop+0x16>
 800276a:	2302      	movs	r3, #2
 800276c:	e00d      	b.n	800278a <HAL_HCD_Stop+0x32>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f004 fc2a 	bl	8006fd4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f003 ffde 	bl	8006760 <USB_ResetPort>
 80027a4:	4603      	mov	r3, r0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	460b      	mov	r3, r1
 80027b8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027ba:	78fb      	ldrb	r3, [r7, #3]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	3360      	adds	r3, #96	; 0x60
 80027c8:	781b      	ldrb	r3, [r3, #0]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	460b      	mov	r3, r1
 80027e0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80027e2:	78fb      	ldrb	r3, [r7, #3]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	212c      	movs	r1, #44	; 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	3350      	adds	r3, #80	; 0x50
 80027f0:	681b      	ldr	r3, [r3, #0]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f004 f822 	bl	8006854 <USB_GetCurrentFrame>
 8002810:	4603      	mov	r3, r0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f003 fffd 	bl	8006826 <USB_GetHostSpeed>
 800282c:	4603      	mov	r3, r0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b086      	sub	sp, #24
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	460b      	mov	r3, r1
 8002840:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800284c:	78fb      	ldrb	r3, [r7, #3]
 800284e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b04      	cmp	r3, #4
 8002864:	d11a      	bne.n	800289c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4413      	add	r3, r2
 800286e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002872:	461a      	mov	r2, r3
 8002874:	2304      	movs	r3, #4
 8002876:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	212c      	movs	r1, #44	; 0x2c
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	4413      	add	r3, r2
 8002884:	3361      	adds	r3, #97	; 0x61
 8002886:	2206      	movs	r2, #6
 8002888:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f004 fa64 	bl	8006d62 <USB_HC_Halt>
 800289a:	e0af      	b.n	80029fc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028b2:	d11b      	bne.n	80028ec <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c0:	461a      	mov	r2, r3
 80028c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	212c      	movs	r1, #44	; 0x2c
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	3361      	adds	r3, #97	; 0x61
 80028d6:	2207      	movs	r2, #7
 80028d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f004 fa3c 	bl	8006d62 <USB_HC_Halt>
 80028ea:	e087      	b.n	80029fc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	2b20      	cmp	r3, #32
 8002900:	d109      	bne.n	8002916 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4413      	add	r3, r2
 800290a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290e:	461a      	mov	r2, r3
 8002910:	2320      	movs	r3, #32
 8002912:	6093      	str	r3, [r2, #8]
 8002914:	e072      	b.n	80029fc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4413      	add	r3, r2
 800291e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b08      	cmp	r3, #8
 800292a:	d11a      	bne.n	8002962 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	015a      	lsls	r2, r3, #5
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4413      	add	r3, r2
 8002934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002938:	461a      	mov	r2, r3
 800293a:	2308      	movs	r3, #8
 800293c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	212c      	movs	r1, #44	; 0x2c
 8002944:	fb01 f303 	mul.w	r3, r1, r3
 8002948:	4413      	add	r3, r2
 800294a:	3361      	adds	r3, #97	; 0x61
 800294c:	2205      	movs	r2, #5
 800294e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f004 fa01 	bl	8006d62 <USB_HC_Halt>
 8002960:	e04c      	b.n	80029fc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	015a      	lsls	r2, r3, #5
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4413      	add	r3, r2
 800296a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002978:	d11b      	bne.n	80029b2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4413      	add	r3, r2
 8002982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002986:	461a      	mov	r2, r3
 8002988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800298c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	212c      	movs	r1, #44	; 0x2c
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	4413      	add	r3, r2
 800299a:	3361      	adds	r3, #97	; 0x61
 800299c:	2208      	movs	r2, #8
 800299e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f004 f9d9 	bl	8006d62 <USB_HC_Halt>
 80029b0:	e024      	b.n	80029fc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c4:	2b80      	cmp	r3, #128	; 0x80
 80029c6:	d119      	bne.n	80029fc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d4:	461a      	mov	r2, r3
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	212c      	movs	r1, #44	; 0x2c
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	3361      	adds	r3, #97	; 0x61
 80029e8:	2206      	movs	r2, #6
 80029ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f004 f9b3 	bl	8006d62 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a12:	d112      	bne.n	8002a3a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f004 f99f 	bl	8006d62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a30:	461a      	mov	r2, r3
 8002a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a36:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a38:	e24e      	b.n	8002ed8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	f040 80df 	bne.w	8002c10 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d019      	beq.n	8002a8e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	3348      	adds	r3, #72	; 0x48
 8002a68:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	0159      	lsls	r1, r3, #5
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	440b      	add	r3, r1
 8002a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a7c:	1ad2      	subs	r2, r2, r3
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	202c      	movs	r0, #44	; 0x2c
 8002a84:	fb00 f303 	mul.w	r3, r0, r3
 8002a88:	440b      	add	r3, r1
 8002a8a:	3350      	adds	r3, #80	; 0x50
 8002a8c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	212c      	movs	r1, #44	; 0x2c
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	3361      	adds	r3, #97	; 0x61
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	335c      	adds	r3, #92	; 0x5c
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	333f      	adds	r3, #63	; 0x3f
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d009      	beq.n	8002aec <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	333f      	adds	r3, #63	; 0x3f
 8002ae6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d111      	bne.n	8002b10 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	4611      	mov	r1, r2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f004 f933 	bl	8006d62 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2310      	movs	r3, #16
 8002b0c:	6093      	str	r3, [r2, #8]
 8002b0e:	e03a      	b.n	8002b86 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	333f      	adds	r3, #63	; 0x3f
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d009      	beq.n	8002b38 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	212c      	movs	r1, #44	; 0x2c
 8002b2a:	fb01 f303 	mul.w	r3, r1, r3
 8002b2e:	4413      	add	r3, r2
 8002b30:	333f      	adds	r3, #63	; 0x3f
 8002b32:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d126      	bne.n	8002b86 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	0151      	lsls	r1, r2, #5
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	440a      	add	r2, r1
 8002b4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b56:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	212c      	movs	r1, #44	; 0x2c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	3360      	adds	r3, #96	; 0x60
 8002b66:	2201      	movs	r2, #1
 8002b68:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	b2d9      	uxtb	r1, r3
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	202c      	movs	r0, #44	; 0x2c
 8002b74:	fb00 f303 	mul.w	r3, r0, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	3360      	adds	r3, #96	; 0x60
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f006 fb8d 	bl	80092a0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d12b      	bne.n	8002be6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	212c      	movs	r1, #44	; 0x2c
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	3348      	adds	r3, #72	; 0x48
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	202c      	movs	r0, #44	; 0x2c
 8002ba4:	fb00 f202 	mul.w	r2, r0, r2
 8002ba8:	440a      	add	r2, r1
 8002baa:	3240      	adds	r2, #64	; 0x40
 8002bac:	8812      	ldrh	r2, [r2, #0]
 8002bae:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 818e 	beq.w	8002ed8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	212c      	movs	r1, #44	; 0x2c
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3354      	adds	r3, #84	; 0x54
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	f083 0301 	eor.w	r3, r3, #1
 8002bd0:	b2d8      	uxtb	r0, r3
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	212c      	movs	r1, #44	; 0x2c
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	3354      	adds	r3, #84	; 0x54
 8002be0:	4602      	mov	r2, r0
 8002be2:	701a      	strb	r2, [r3, #0]
}
 8002be4:	e178      	b.n	8002ed8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3354      	adds	r3, #84	; 0x54
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	f083 0301 	eor.w	r3, r3, #1
 8002bfa:	b2d8      	uxtb	r0, r3
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	3354      	adds	r3, #84	; 0x54
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	701a      	strb	r2, [r3, #0]
}
 8002c0e:	e163      	b.n	8002ed8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	f040 80f6 	bne.w	8002e14 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	212c      	movs	r1, #44	; 0x2c
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	3361      	adds	r3, #97	; 0x61
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d109      	bne.n	8002c50 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	212c      	movs	r1, #44	; 0x2c
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	3360      	adds	r3, #96	; 0x60
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	e0c9      	b.n	8002de4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	212c      	movs	r1, #44	; 0x2c
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3361      	adds	r3, #97	; 0x61
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b05      	cmp	r3, #5
 8002c62:	d109      	bne.n	8002c78 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	3360      	adds	r3, #96	; 0x60
 8002c72:	2205      	movs	r2, #5
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	e0b5      	b.n	8002de4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	3361      	adds	r3, #97	; 0x61
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b06      	cmp	r3, #6
 8002c8a:	d009      	beq.n	8002ca0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	3361      	adds	r3, #97	; 0x61
 8002c9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d150      	bne.n	8002d42 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	212c      	movs	r1, #44	; 0x2c
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	335c      	adds	r3, #92	; 0x5c
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	202c      	movs	r0, #44	; 0x2c
 8002cb8:	fb00 f303 	mul.w	r3, r0, r3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	335c      	adds	r3, #92	; 0x5c
 8002cc0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	212c      	movs	r1, #44	; 0x2c
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	335c      	adds	r3, #92	; 0x5c
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d912      	bls.n	8002cfc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	212c      	movs	r1, #44	; 0x2c
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	335c      	adds	r3, #92	; 0x5c
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	212c      	movs	r1, #44	; 0x2c
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3360      	adds	r3, #96	; 0x60
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cfa:	e073      	b.n	8002de4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	3360      	adds	r3, #96	; 0x60
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d24:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d2c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d40:	e050      	b.n	8002de4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3361      	adds	r3, #97	; 0x61
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d122      	bne.n	8002d9c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	212c      	movs	r1, #44	; 0x2c
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	3360      	adds	r3, #96	; 0x60
 8002d64:	2202      	movs	r2, #2
 8002d66:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d7e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d86:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d94:	461a      	mov	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	e023      	b.n	8002de4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3361      	adds	r3, #97	; 0x61
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b07      	cmp	r3, #7
 8002dae:	d119      	bne.n	8002de4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	212c      	movs	r1, #44	; 0x2c
 8002db6:	fb01 f303 	mul.w	r3, r1, r3
 8002dba:	4413      	add	r3, r2
 8002dbc:	335c      	adds	r3, #92	; 0x5c
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	202c      	movs	r0, #44	; 0x2c
 8002dc8:	fb00 f303 	mul.w	r3, r0, r3
 8002dcc:	440b      	add	r3, r1
 8002dce:	335c      	adds	r3, #92	; 0x5c
 8002dd0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	212c      	movs	r1, #44	; 0x2c
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	3360      	adds	r3, #96	; 0x60
 8002de0:	2204      	movs	r2, #4
 8002de2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df0:	461a      	mov	r2, r3
 8002df2:	2302      	movs	r3, #2
 8002df4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	b2d9      	uxtb	r1, r3
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	202c      	movs	r0, #44	; 0x2c
 8002e00:	fb00 f303 	mul.w	r3, r0, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	3360      	adds	r3, #96	; 0x60
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f006 fa47 	bl	80092a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e12:	e061      	b.n	8002ed8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b10      	cmp	r3, #16
 8002e28:	d156      	bne.n	8002ed8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	212c      	movs	r1, #44	; 0x2c
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	333f      	adds	r3, #63	; 0x3f
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d111      	bne.n	8002e62 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	212c      	movs	r1, #44	; 0x2c
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	335c      	adds	r3, #92	; 0x5c
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f003 ff81 	bl	8006d62 <USB_HC_Halt>
 8002e60:	e031      	b.n	8002ec6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	212c      	movs	r1, #44	; 0x2c
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	333f      	adds	r3, #63	; 0x3f
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	212c      	movs	r1, #44	; 0x2c
 8002e7c:	fb01 f303 	mul.w	r3, r1, r3
 8002e80:	4413      	add	r3, r2
 8002e82:	333f      	adds	r3, #63	; 0x3f
 8002e84:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d11d      	bne.n	8002ec6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	212c      	movs	r1, #44	; 0x2c
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	4413      	add	r3, r2
 8002e96:	335c      	adds	r3, #92	; 0x5c
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d110      	bne.n	8002ec6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	212c      	movs	r1, #44	; 0x2c
 8002eaa:	fb01 f303 	mul.w	r3, r1, r3
 8002eae:	4413      	add	r3, r2
 8002eb0:	3361      	adds	r3, #97	; 0x61
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f003 ff4e 	bl	8006d62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2310      	movs	r3, #16
 8002ed6:	6093      	str	r3, [r2, #8]
}
 8002ed8:	bf00      	nop
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d11a      	bne.n	8002f46 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2304      	movs	r3, #4
 8002f20:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	212c      	movs	r1, #44	; 0x2c
 8002f28:	fb01 f303 	mul.w	r3, r1, r3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3361      	adds	r3, #97	; 0x61
 8002f30:	2206      	movs	r2, #6
 8002f32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f003 ff0f 	bl	8006d62 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002f44:	e331      	b.n	80035aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0320 	and.w	r3, r3, #32
 8002f58:	2b20      	cmp	r3, #32
 8002f5a:	d12e      	bne.n	8002fba <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f68:	461a      	mov	r2, r3
 8002f6a:	2320      	movs	r3, #32
 8002f6c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	212c      	movs	r1, #44	; 0x2c
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	333d      	adds	r3, #61	; 0x3d
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	f040 8313 	bne.w	80035aa <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	212c      	movs	r1, #44	; 0x2c
 8002f8a:	fb01 f303 	mul.w	r3, r1, r3
 8002f8e:	4413      	add	r3, r2
 8002f90:	333d      	adds	r3, #61	; 0x3d
 8002f92:	2200      	movs	r2, #0
 8002f94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	212c      	movs	r1, #44	; 0x2c
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3360      	adds	r3, #96	; 0x60
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f003 fed5 	bl	8006d62 <USB_HC_Halt>
}
 8002fb8:	e2f7      	b.n	80035aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd0:	d112      	bne.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fe4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f003 feb6 	bl	8006d62 <USB_HC_Halt>
}
 8002ff6:	e2d8      	b.n	80035aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b01      	cmp	r3, #1
 800300c:	d140      	bne.n	8003090 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	335c      	adds	r3, #92	; 0x5c
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	4413      	add	r3, r2
 8003028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003032:	2b40      	cmp	r3, #64	; 0x40
 8003034:	d111      	bne.n	800305a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	212c      	movs	r1, #44	; 0x2c
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	4413      	add	r3, r2
 8003042:	333d      	adds	r3, #61	; 0x3d
 8003044:	2201      	movs	r2, #1
 8003046:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	4413      	add	r3, r2
 8003050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003054:	461a      	mov	r2, r3
 8003056:	2340      	movs	r3, #64	; 0x40
 8003058:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	4413      	add	r3, r2
 8003062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003066:	461a      	mov	r2, r3
 8003068:	2301      	movs	r3, #1
 800306a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	212c      	movs	r1, #44	; 0x2c
 8003072:	fb01 f303 	mul.w	r3, r1, r3
 8003076:	4413      	add	r3, r2
 8003078:	3361      	adds	r3, #97	; 0x61
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f003 fe6a 	bl	8006d62 <USB_HC_Halt>
}
 800308e:	e28c      	b.n	80035aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	4413      	add	r3, r2
 8003098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a2:	2b40      	cmp	r3, #64	; 0x40
 80030a4:	d12c      	bne.n	8003100 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	212c      	movs	r1, #44	; 0x2c
 80030ac:	fb01 f303 	mul.w	r3, r1, r3
 80030b0:	4413      	add	r3, r2
 80030b2:	3361      	adds	r3, #97	; 0x61
 80030b4:	2204      	movs	r2, #4
 80030b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	212c      	movs	r1, #44	; 0x2c
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	333d      	adds	r3, #61	; 0x3d
 80030c6:	2201      	movs	r2, #1
 80030c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	212c      	movs	r1, #44	; 0x2c
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	4413      	add	r3, r2
 80030d6:	335c      	adds	r3, #92	; 0x5c
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	4611      	mov	r1, r2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f003 fe3b 	bl	8006d62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f8:	461a      	mov	r2, r3
 80030fa:	2340      	movs	r3, #64	; 0x40
 80030fc:	6093      	str	r3, [r2, #8]
}
 80030fe:	e254      	b.n	80035aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	4413      	add	r3, r2
 8003108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b08      	cmp	r3, #8
 8003114:	d11a      	bne.n	800314c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	4413      	add	r3, r2
 800311e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003122:	461a      	mov	r2, r3
 8003124:	2308      	movs	r3, #8
 8003126:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3361      	adds	r3, #97	; 0x61
 8003136:	2205      	movs	r2, #5
 8003138:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	4611      	mov	r1, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f003 fe0c 	bl	8006d62 <USB_HC_Halt>
}
 800314a:	e22e      	b.n	80035aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	4413      	add	r3, r2
 8003154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	2b10      	cmp	r3, #16
 8003160:	d140      	bne.n	80031e4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	4413      	add	r3, r2
 800316e:	335c      	adds	r3, #92	; 0x5c
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	3361      	adds	r3, #97	; 0x61
 8003182:	2203      	movs	r2, #3
 8003184:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	212c      	movs	r1, #44	; 0x2c
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	4413      	add	r3, r2
 8003192:	333d      	adds	r3, #61	; 0x3d
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d112      	bne.n	80031c0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	212c      	movs	r1, #44	; 0x2c
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	4413      	add	r3, r2
 80031a6:	333c      	adds	r3, #60	; 0x3c
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d108      	bne.n	80031c0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	212c      	movs	r1, #44	; 0x2c
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	333d      	adds	r3, #61	; 0x3d
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f003 fdc9 	bl	8006d62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031dc:	461a      	mov	r2, r3
 80031de:	2310      	movs	r3, #16
 80031e0:	6093      	str	r3, [r2, #8]
}
 80031e2:	e1e2      	b.n	80035aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f6:	2b80      	cmp	r3, #128	; 0x80
 80031f8:	d164      	bne.n	80032c4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d111      	bne.n	8003226 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	212c      	movs	r1, #44	; 0x2c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	3361      	adds	r3, #97	; 0x61
 8003210:	2206      	movs	r2, #6
 8003212:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	4611      	mov	r1, r2
 800321e:	4618      	mov	r0, r3
 8003220:	f003 fd9f 	bl	8006d62 <USB_HC_Halt>
 8003224:	e044      	b.n	80032b0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	212c      	movs	r1, #44	; 0x2c
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	335c      	adds	r3, #92	; 0x5c
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	202c      	movs	r0, #44	; 0x2c
 800323e:	fb00 f303 	mul.w	r3, r0, r3
 8003242:	440b      	add	r3, r1
 8003244:	335c      	adds	r3, #92	; 0x5c
 8003246:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	212c      	movs	r1, #44	; 0x2c
 800324e:	fb01 f303 	mul.w	r3, r1, r3
 8003252:	4413      	add	r3, r2
 8003254:	335c      	adds	r3, #92	; 0x5c
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b02      	cmp	r3, #2
 800325a:	d920      	bls.n	800329e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	212c      	movs	r1, #44	; 0x2c
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	4413      	add	r3, r2
 8003268:	335c      	adds	r3, #92	; 0x5c
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	212c      	movs	r1, #44	; 0x2c
 8003274:	fb01 f303 	mul.w	r3, r1, r3
 8003278:	4413      	add	r3, r2
 800327a:	3360      	adds	r3, #96	; 0x60
 800327c:	2204      	movs	r2, #4
 800327e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	b2d9      	uxtb	r1, r3
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	202c      	movs	r0, #44	; 0x2c
 800328a:	fb00 f303 	mul.w	r3, r0, r3
 800328e:	4413      	add	r3, r2
 8003290:	3360      	adds	r3, #96	; 0x60
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f006 f802 	bl	80092a0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800329c:	e008      	b.n	80032b0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	212c      	movs	r1, #44	; 0x2c
 80032a4:	fb01 f303 	mul.w	r3, r1, r3
 80032a8:	4413      	add	r3, r2
 80032aa:	3360      	adds	r3, #96	; 0x60
 80032ac:	2202      	movs	r2, #2
 80032ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032bc:	461a      	mov	r2, r3
 80032be:	2380      	movs	r3, #128	; 0x80
 80032c0:	6093      	str	r3, [r2, #8]
}
 80032c2:	e172      	b.n	80035aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032da:	d11b      	bne.n	8003314 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	212c      	movs	r1, #44	; 0x2c
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	3361      	adds	r3, #97	; 0x61
 80032ea:	2208      	movs	r2, #8
 80032ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	4611      	mov	r1, r2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f003 fd32 	bl	8006d62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	4413      	add	r3, r2
 8003306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330a:	461a      	mov	r2, r3
 800330c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003310:	6093      	str	r3, [r2, #8]
}
 8003312:	e14a      	b.n	80035aa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	4413      	add	r3, r2
 800331c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b02      	cmp	r3, #2
 8003328:	f040 813f 	bne.w	80035aa <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	212c      	movs	r1, #44	; 0x2c
 8003332:	fb01 f303 	mul.w	r3, r1, r3
 8003336:	4413      	add	r3, r2
 8003338:	3361      	adds	r3, #97	; 0x61
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d17d      	bne.n	800343c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	212c      	movs	r1, #44	; 0x2c
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	4413      	add	r3, r2
 800334c:	3360      	adds	r3, #96	; 0x60
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	212c      	movs	r1, #44	; 0x2c
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	4413      	add	r3, r2
 800335e:	333f      	adds	r3, #63	; 0x3f
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d00a      	beq.n	800337c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	333f      	adds	r3, #63	; 0x3f
 8003374:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003376:	2b03      	cmp	r3, #3
 8003378:	f040 8100 	bne.w	800357c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d113      	bne.n	80033ac <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	212c      	movs	r1, #44	; 0x2c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	3355      	adds	r3, #85	; 0x55
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	f083 0301 	eor.w	r3, r3, #1
 8003398:	b2d8      	uxtb	r0, r3
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	212c      	movs	r1, #44	; 0x2c
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	4413      	add	r3, r2
 80033a6:	3355      	adds	r3, #85	; 0x55
 80033a8:	4602      	mov	r2, r0
 80033aa:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	f040 80e3 	bne.w	800357c <HCD_HC_OUT_IRQHandler+0x69c>
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	212c      	movs	r1, #44	; 0x2c
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	334c      	adds	r3, #76	; 0x4c
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 80d8 	beq.w	800357c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	212c      	movs	r1, #44	; 0x2c
 80033d2:	fb01 f303 	mul.w	r3, r1, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	334c      	adds	r3, #76	; 0x4c
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	202c      	movs	r0, #44	; 0x2c
 80033e2:	fb00 f202 	mul.w	r2, r0, r2
 80033e6:	440a      	add	r2, r1
 80033e8:	3240      	adds	r2, #64	; 0x40
 80033ea:	8812      	ldrh	r2, [r2, #0]
 80033ec:	4413      	add	r3, r2
 80033ee:	3b01      	subs	r3, #1
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	202c      	movs	r0, #44	; 0x2c
 80033f6:	fb00 f202 	mul.w	r2, r0, r2
 80033fa:	440a      	add	r2, r1
 80033fc:	3240      	adds	r2, #64	; 0x40
 80033fe:	8812      	ldrh	r2, [r2, #0]
 8003400:	fbb3 f3f2 	udiv	r3, r3, r2
 8003404:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 80b5 	beq.w	800357c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	212c      	movs	r1, #44	; 0x2c
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	4413      	add	r3, r2
 800341e:	3355      	adds	r3, #85	; 0x55
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	f083 0301 	eor.w	r3, r3, #1
 8003426:	b2d8      	uxtb	r0, r3
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	212c      	movs	r1, #44	; 0x2c
 800342e:	fb01 f303 	mul.w	r3, r1, r3
 8003432:	4413      	add	r3, r2
 8003434:	3355      	adds	r3, #85	; 0x55
 8003436:	4602      	mov	r2, r0
 8003438:	701a      	strb	r2, [r3, #0]
 800343a:	e09f      	b.n	800357c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	3361      	adds	r3, #97	; 0x61
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b03      	cmp	r3, #3
 800344e:	d109      	bne.n	8003464 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	212c      	movs	r1, #44	; 0x2c
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	4413      	add	r3, r2
 800345c:	3360      	adds	r3, #96	; 0x60
 800345e:	2202      	movs	r2, #2
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	e08b      	b.n	800357c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	212c      	movs	r1, #44	; 0x2c
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	3361      	adds	r3, #97	; 0x61
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b04      	cmp	r3, #4
 8003476:	d109      	bne.n	800348c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	212c      	movs	r1, #44	; 0x2c
 800347e:	fb01 f303 	mul.w	r3, r1, r3
 8003482:	4413      	add	r3, r2
 8003484:	3360      	adds	r3, #96	; 0x60
 8003486:	2202      	movs	r2, #2
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	e077      	b.n	800357c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	212c      	movs	r1, #44	; 0x2c
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	4413      	add	r3, r2
 8003498:	3361      	adds	r3, #97	; 0x61
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b05      	cmp	r3, #5
 800349e:	d109      	bne.n	80034b4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	212c      	movs	r1, #44	; 0x2c
 80034a6:	fb01 f303 	mul.w	r3, r1, r3
 80034aa:	4413      	add	r3, r2
 80034ac:	3360      	adds	r3, #96	; 0x60
 80034ae:	2205      	movs	r2, #5
 80034b0:	701a      	strb	r2, [r3, #0]
 80034b2:	e063      	b.n	800357c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	212c      	movs	r1, #44	; 0x2c
 80034ba:	fb01 f303 	mul.w	r3, r1, r3
 80034be:	4413      	add	r3, r2
 80034c0:	3361      	adds	r3, #97	; 0x61
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b06      	cmp	r3, #6
 80034c6:	d009      	beq.n	80034dc <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	212c      	movs	r1, #44	; 0x2c
 80034ce:	fb01 f303 	mul.w	r3, r1, r3
 80034d2:	4413      	add	r3, r2
 80034d4:	3361      	adds	r3, #97	; 0x61
 80034d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d14f      	bne.n	800357c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	212c      	movs	r1, #44	; 0x2c
 80034e2:	fb01 f303 	mul.w	r3, r1, r3
 80034e6:	4413      	add	r3, r2
 80034e8:	335c      	adds	r3, #92	; 0x5c
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	202c      	movs	r0, #44	; 0x2c
 80034f4:	fb00 f303 	mul.w	r3, r0, r3
 80034f8:	440b      	add	r3, r1
 80034fa:	335c      	adds	r3, #92	; 0x5c
 80034fc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	212c      	movs	r1, #44	; 0x2c
 8003504:	fb01 f303 	mul.w	r3, r1, r3
 8003508:	4413      	add	r3, r2
 800350a:	335c      	adds	r3, #92	; 0x5c
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d912      	bls.n	8003538 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	212c      	movs	r1, #44	; 0x2c
 8003518:	fb01 f303 	mul.w	r3, r1, r3
 800351c:	4413      	add	r3, r2
 800351e:	335c      	adds	r3, #92	; 0x5c
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	212c      	movs	r1, #44	; 0x2c
 800352a:	fb01 f303 	mul.w	r3, r1, r3
 800352e:	4413      	add	r3, r2
 8003530:	3360      	adds	r3, #96	; 0x60
 8003532:	2204      	movs	r2, #4
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	e021      	b.n	800357c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	212c      	movs	r1, #44	; 0x2c
 800353e:	fb01 f303 	mul.w	r3, r1, r3
 8003542:	4413      	add	r3, r2
 8003544:	3360      	adds	r3, #96	; 0x60
 8003546:	2202      	movs	r2, #2
 8003548:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	4413      	add	r3, r2
 8003552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003560:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003568:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	4413      	add	r3, r2
 8003572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003576:	461a      	mov	r2, r3
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	4413      	add	r3, r2
 8003584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003588:	461a      	mov	r2, r3
 800358a:	2302      	movs	r3, #2
 800358c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	b2d9      	uxtb	r1, r3
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	202c      	movs	r0, #44	; 0x2c
 8003598:	fb00 f303 	mul.w	r3, r0, r3
 800359c:	4413      	add	r3, r2
 800359e:	3360      	adds	r3, #96	; 0x60
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f005 fe7b 	bl	80092a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80035aa:	bf00      	nop
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b08a      	sub	sp, #40	; 0x28
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	0c5b      	lsrs	r3, r3, #17
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035e6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d004      	beq.n	80035f8 <HCD_RXQLVL_IRQHandler+0x46>
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b05      	cmp	r3, #5
 80035f2:	f000 80a9 	beq.w	8003748 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80035f6:	e0aa      	b.n	800374e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 80a6 	beq.w	800374c <HCD_RXQLVL_IRQHandler+0x19a>
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	212c      	movs	r1, #44	; 0x2c
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	4413      	add	r3, r2
 800360c:	3344      	adds	r3, #68	; 0x44
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 809b 	beq.w	800374c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	212c      	movs	r1, #44	; 0x2c
 800361c:	fb01 f303 	mul.w	r3, r1, r3
 8003620:	4413      	add	r3, r2
 8003622:	3350      	adds	r3, #80	; 0x50
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	441a      	add	r2, r3
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	202c      	movs	r0, #44	; 0x2c
 8003630:	fb00 f303 	mul.w	r3, r0, r3
 8003634:	440b      	add	r3, r1
 8003636:	334c      	adds	r3, #76	; 0x4c
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d87a      	bhi.n	8003734 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	212c      	movs	r1, #44	; 0x2c
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	4413      	add	r3, r2
 800364e:	3344      	adds	r3, #68	; 0x44
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	b292      	uxth	r2, r2
 8003656:	4619      	mov	r1, r3
 8003658:	f002 feda 	bl	8006410 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	212c      	movs	r1, #44	; 0x2c
 8003662:	fb01 f303 	mul.w	r3, r1, r3
 8003666:	4413      	add	r3, r2
 8003668:	3344      	adds	r3, #68	; 0x44
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	441a      	add	r2, r3
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	202c      	movs	r0, #44	; 0x2c
 8003676:	fb00 f303 	mul.w	r3, r0, r3
 800367a:	440b      	add	r3, r1
 800367c:	3344      	adds	r3, #68	; 0x44
 800367e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	212c      	movs	r1, #44	; 0x2c
 8003686:	fb01 f303 	mul.w	r3, r1, r3
 800368a:	4413      	add	r3, r2
 800368c:	3350      	adds	r3, #80	; 0x50
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	441a      	add	r2, r3
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	202c      	movs	r0, #44	; 0x2c
 800369a:	fb00 f303 	mul.w	r3, r0, r3
 800369e:	440b      	add	r3, r1
 80036a0:	3350      	adds	r3, #80	; 0x50
 80036a2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	0cdb      	lsrs	r3, r3, #19
 80036b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	212c      	movs	r1, #44	; 0x2c
 80036c0:	fb01 f303 	mul.w	r3, r1, r3
 80036c4:	4413      	add	r3, r2
 80036c6:	3340      	adds	r3, #64	; 0x40
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d13c      	bne.n	800374c <HCD_RXQLVL_IRQHandler+0x19a>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d039      	beq.n	800374c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036ee:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036f6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003704:	461a      	mov	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	212c      	movs	r1, #44	; 0x2c
 8003710:	fb01 f303 	mul.w	r3, r1, r3
 8003714:	4413      	add	r3, r2
 8003716:	3354      	adds	r3, #84	; 0x54
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	f083 0301 	eor.w	r3, r3, #1
 800371e:	b2d8      	uxtb	r0, r3
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	212c      	movs	r1, #44	; 0x2c
 8003726:	fb01 f303 	mul.w	r3, r1, r3
 800372a:	4413      	add	r3, r2
 800372c:	3354      	adds	r3, #84	; 0x54
 800372e:	4602      	mov	r2, r0
 8003730:	701a      	strb	r2, [r3, #0]
      break;
 8003732:	e00b      	b.n	800374c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	212c      	movs	r1, #44	; 0x2c
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	4413      	add	r3, r2
 8003740:	3360      	adds	r3, #96	; 0x60
 8003742:	2204      	movs	r2, #4
 8003744:	701a      	strb	r2, [r3, #0]
      break;
 8003746:	e001      	b.n	800374c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003748:	bf00      	nop
 800374a:	e000      	b.n	800374e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800374c:	bf00      	nop
  }
}
 800374e:	bf00      	nop
 8003750:	3728      	adds	r7, #40	; 0x28
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b086      	sub	sp, #24
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003782:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b02      	cmp	r3, #2
 800378c:	d10b      	bne.n	80037a6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b01      	cmp	r3, #1
 8003796:	d102      	bne.n	800379e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f005 fd65 	bl	8009268 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f043 0302 	orr.w	r3, r3, #2
 80037a4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d132      	bne.n	8003816 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f043 0308 	orr.w	r3, r3, #8
 80037b6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d126      	bne.n	8003810 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d113      	bne.n	80037f2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80037d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037d4:	d106      	bne.n	80037e4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2102      	movs	r1, #2
 80037dc:	4618      	mov	r0, r3
 80037de:	f002 ff85 	bl	80066ec <USB_InitFSLSPClkSel>
 80037e2:	e011      	b.n	8003808 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2101      	movs	r1, #1
 80037ea:	4618      	mov	r0, r3
 80037ec:	f002 ff7e 	bl	80066ec <USB_InitFSLSPClkSel>
 80037f0:	e00a      	b.n	8003808 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d106      	bne.n	8003808 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003800:	461a      	mov	r2, r3
 8003802:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003806:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f005 fd57 	bl	80092bc <HAL_HCD_PortEnabled_Callback>
 800380e:	e002      	b.n	8003816 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f005 fd61 	bl	80092d8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b20      	cmp	r3, #32
 800381e:	d103      	bne.n	8003828 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f043 0320 	orr.w	r3, r3, #32
 8003826:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800382e:	461a      	mov	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	6013      	str	r3, [r2, #0]
}
 8003834:	bf00      	nop
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e12b      	b.n	8003aa6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fd faa0 	bl	8000da8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2224      	movs	r2, #36	; 0x24
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0201 	bic.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800388e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800389e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038a0:	f001 f964 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 80038a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	4a81      	ldr	r2, [pc, #516]	; (8003ab0 <HAL_I2C_Init+0x274>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d807      	bhi.n	80038c0 <HAL_I2C_Init+0x84>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4a80      	ldr	r2, [pc, #512]	; (8003ab4 <HAL_I2C_Init+0x278>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	bf94      	ite	ls
 80038b8:	2301      	movls	r3, #1
 80038ba:	2300      	movhi	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	e006      	b.n	80038ce <HAL_I2C_Init+0x92>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4a7d      	ldr	r2, [pc, #500]	; (8003ab8 <HAL_I2C_Init+0x27c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	bf94      	ite	ls
 80038c8:	2301      	movls	r3, #1
 80038ca:	2300      	movhi	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e0e7      	b.n	8003aa6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4a78      	ldr	r2, [pc, #480]	; (8003abc <HAL_I2C_Init+0x280>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	0c9b      	lsrs	r3, r3, #18
 80038e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	4a6a      	ldr	r2, [pc, #424]	; (8003ab0 <HAL_I2C_Init+0x274>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d802      	bhi.n	8003910 <HAL_I2C_Init+0xd4>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	3301      	adds	r3, #1
 800390e:	e009      	b.n	8003924 <HAL_I2C_Init+0xe8>
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	4a69      	ldr	r2, [pc, #420]	; (8003ac0 <HAL_I2C_Init+0x284>)
 800391c:	fba2 2303 	umull	r2, r3, r2, r3
 8003920:	099b      	lsrs	r3, r3, #6
 8003922:	3301      	adds	r3, #1
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	430b      	orrs	r3, r1
 800392a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003936:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	495c      	ldr	r1, [pc, #368]	; (8003ab0 <HAL_I2C_Init+0x274>)
 8003940:	428b      	cmp	r3, r1
 8003942:	d819      	bhi.n	8003978 <HAL_I2C_Init+0x13c>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	1e59      	subs	r1, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003952:	1c59      	adds	r1, r3, #1
 8003954:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003958:	400b      	ands	r3, r1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <HAL_I2C_Init+0x138>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1e59      	subs	r1, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	fbb1 f3f3 	udiv	r3, r1, r3
 800396c:	3301      	adds	r3, #1
 800396e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003972:	e051      	b.n	8003a18 <HAL_I2C_Init+0x1dc>
 8003974:	2304      	movs	r3, #4
 8003976:	e04f      	b.n	8003a18 <HAL_I2C_Init+0x1dc>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d111      	bne.n	80039a4 <HAL_I2C_Init+0x168>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	1e58      	subs	r0, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6859      	ldr	r1, [r3, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	440b      	add	r3, r1
 800398e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003992:	3301      	adds	r3, #1
 8003994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf0c      	ite	eq
 800399c:	2301      	moveq	r3, #1
 800399e:	2300      	movne	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	e012      	b.n	80039ca <HAL_I2C_Init+0x18e>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	1e58      	subs	r0, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6859      	ldr	r1, [r3, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	0099      	lsls	r1, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ba:	3301      	adds	r3, #1
 80039bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_I2C_Init+0x196>
 80039ce:	2301      	movs	r3, #1
 80039d0:	e022      	b.n	8003a18 <HAL_I2C_Init+0x1dc>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10e      	bne.n	80039f8 <HAL_I2C_Init+0x1bc>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	1e58      	subs	r0, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6859      	ldr	r1, [r3, #4]
 80039e2:	460b      	mov	r3, r1
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	440b      	add	r3, r1
 80039e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ec:	3301      	adds	r3, #1
 80039ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f6:	e00f      	b.n	8003a18 <HAL_I2C_Init+0x1dc>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1e58      	subs	r0, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6859      	ldr	r1, [r3, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	0099      	lsls	r1, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a0e:	3301      	adds	r3, #1
 8003a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	6809      	ldr	r1, [r1, #0]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69da      	ldr	r2, [r3, #28]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6911      	ldr	r1, [r2, #16]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	68d2      	ldr	r2, [r2, #12]
 8003a52:	4311      	orrs	r1, r2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	000186a0 	.word	0x000186a0
 8003ab4:	001e847f 	.word	0x001e847f
 8003ab8:	003d08ff 	.word	0x003d08ff
 8003abc:	431bde83 	.word	0x431bde83
 8003ac0:	10624dd3 	.word	0x10624dd3

08003ac4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d129      	bne.n	8003b2e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2224      	movs	r2, #36	; 0x24
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0201 	bic.w	r2, r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0210 	bic.w	r2, r2, #16
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0201 	orr.w	r2, r2, #1
 8003b20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	e000      	b.n	8003b30 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003b2e:	2302      	movs	r3, #2
  }
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d12a      	bne.n	8003bac <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2224      	movs	r2, #36	; 0x24
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003b76:	89fb      	ldrh	r3, [r7, #14]
 8003b78:	f023 030f 	bic.w	r3, r3, #15
 8003b7c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	89fb      	ldrh	r3, [r7, #14]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	89fa      	ldrh	r2, [r7, #14]
 8003b8e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e000      	b.n	8003bae <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003bac:	2302      	movs	r3, #2
  }
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
	...

08003bbc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e0bf      	b.n	8003d4e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fd f94a 	bl	8000e7c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003bfe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6999      	ldr	r1, [r3, #24]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c14:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6899      	ldr	r1, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	4b4a      	ldr	r3, [pc, #296]	; (8003d58 <HAL_LTDC_Init+0x19c>)
 8003c30:	400b      	ands	r3, r1
 8003c32:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	041b      	lsls	r3, r3, #16
 8003c3a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6899      	ldr	r1, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68d9      	ldr	r1, [r3, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	4b3e      	ldr	r3, [pc, #248]	; (8003d58 <HAL_LTDC_Init+0x19c>)
 8003c5e:	400b      	ands	r3, r1
 8003c60:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	041b      	lsls	r3, r3, #16
 8003c68:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68d9      	ldr	r1, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1a      	ldr	r2, [r3, #32]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6919      	ldr	r1, [r3, #16]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4b33      	ldr	r3, [pc, #204]	; (8003d58 <HAL_LTDC_Init+0x19c>)
 8003c8c:	400b      	ands	r3, r1
 8003c8e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	041b      	lsls	r3, r3, #16
 8003c96:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6919      	ldr	r1, [r3, #16]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6959      	ldr	r1, [r3, #20]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	4b27      	ldr	r3, [pc, #156]	; (8003d58 <HAL_LTDC_Init+0x19c>)
 8003cba:	400b      	ands	r3, r1
 8003cbc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	041b      	lsls	r3, r3, #16
 8003cc4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6959      	ldr	r1, [r3, #20]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003cec:	041b      	lsls	r3, r3, #16
 8003cee:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0206 	orr.w	r2, r2, #6
 8003d2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0201 	orr.w	r2, r2, #1
 8003d3a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	f000f800 	.word	0xf000f800

08003d5c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d72:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d023      	beq.n	8003dc6 <HAL_LTDC_IRQHandler+0x6a>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01e      	beq.n	8003dc6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0204 	bic.w	r2, r2, #4
 8003d96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2204      	movs	r2, #4
 8003d9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003da6:	f043 0201 	orr.w	r2, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2204      	movs	r2, #4
 8003db4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f86f 	bl	8003ea4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d023      	beq.n	8003e18 <HAL_LTDC_IRQHandler+0xbc>
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d01e      	beq.n	8003e18 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0202 	bic.w	r2, r2, #2
 8003de8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2202      	movs	r2, #2
 8003df0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003df8:	f043 0202 	orr.w	r2, r3, #2
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2204      	movs	r2, #4
 8003e06:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f846 	bl	8003ea4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d01b      	beq.n	8003e5a <HAL_LTDC_IRQHandler+0xfe>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d016      	beq.n	8003e5a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2201      	movs	r2, #1
 8003e42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f82f 	bl	8003eb8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d01b      	beq.n	8003e9c <HAL_LTDC_IRQHandler+0x140>
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d016      	beq.n	8003e9c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0208 	bic.w	r2, r2, #8
 8003e7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2208      	movs	r2, #8
 8003e84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f818 	bl	8003ecc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003e9c:	bf00      	nop
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003ee0:	b5b0      	push	{r4, r5, r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_LTDC_ConfigLayer+0x1a>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e02c      	b.n	8003f54 <HAL_LTDC_ConfigLayer+0x74>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2202      	movs	r2, #2
 8003f06:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2134      	movs	r1, #52	; 0x34
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	4413      	add	r3, r2
 8003f16:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	4614      	mov	r4, r2
 8003f1e:	461d      	mov	r5, r3
 8003f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f2c:	682b      	ldr	r3, [r5, #0]
 8003f2e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 f811 	bl	8003f5c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bdb0      	pop	{r4, r5, r7, pc}

08003f5c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b089      	sub	sp, #36	; 0x24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	0c1b      	lsrs	r3, r3, #16
 8003f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f78:	4413      	add	r3, r2
 8003f7a:	041b      	lsls	r3, r3, #16
 8003f7c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	01db      	lsls	r3, r3, #7
 8003f88:	4413      	add	r3, r2
 8003f8a:	3384      	adds	r3, #132	; 0x84
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	4611      	mov	r1, r2
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	01d2      	lsls	r2, r2, #7
 8003f98:	440a      	add	r2, r1
 8003f9a:	3284      	adds	r2, #132	; 0x84
 8003f9c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003fa0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	0c1b      	lsrs	r3, r3, #16
 8003fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fb2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fb4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4619      	mov	r1, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	01db      	lsls	r3, r3, #7
 8003fc0:	440b      	add	r3, r1
 8003fc2:	3384      	adds	r3, #132	; 0x84
 8003fc4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fda:	4413      	add	r3, r2
 8003fdc:	041b      	lsls	r3, r3, #16
 8003fde:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	01db      	lsls	r3, r3, #7
 8003fea:	4413      	add	r3, r2
 8003fec:	3384      	adds	r3, #132	; 0x84
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	01d2      	lsls	r2, r2, #7
 8003ffa:	440a      	add	r2, r1
 8003ffc:	3284      	adds	r2, #132	; 0x84
 8003ffe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004002:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004012:	4413      	add	r3, r2
 8004014:	1c5a      	adds	r2, r3, #1
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4619      	mov	r1, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	01db      	lsls	r3, r3, #7
 8004020:	440b      	add	r3, r1
 8004022:	3384      	adds	r3, #132	; 0x84
 8004024:	4619      	mov	r1, r3
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	4313      	orrs	r3, r2
 800402a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	461a      	mov	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	01db      	lsls	r3, r3, #7
 8004036:	4413      	add	r3, r2
 8004038:	3384      	adds	r3, #132	; 0x84
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	6812      	ldr	r2, [r2, #0]
 8004040:	4611      	mov	r1, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	01d2      	lsls	r2, r2, #7
 8004046:	440a      	add	r2, r1
 8004048:	3284      	adds	r2, #132	; 0x84
 800404a:	f023 0307 	bic.w	r3, r3, #7
 800404e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	461a      	mov	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	01db      	lsls	r3, r3, #7
 800405a:	4413      	add	r3, r2
 800405c:	3384      	adds	r3, #132	; 0x84
 800405e:	461a      	mov	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004076:	041b      	lsls	r3, r3, #16
 8004078:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	061b      	lsls	r3, r3, #24
 8004080:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	01db      	lsls	r3, r3, #7
 800408c:	4413      	add	r3, r2
 800408e:	3384      	adds	r3, #132	; 0x84
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	01db      	lsls	r3, r3, #7
 800409c:	4413      	add	r3, r2
 800409e:	3384      	adds	r3, #132	; 0x84
 80040a0:	461a      	mov	r2, r3
 80040a2:	2300      	movs	r3, #0
 80040a4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040ac:	461a      	mov	r2, r3
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	431a      	orrs	r2, r3
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	431a      	orrs	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4619      	mov	r1, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	01db      	lsls	r3, r3, #7
 80040c0:	440b      	add	r3, r1
 80040c2:	3384      	adds	r3, #132	; 0x84
 80040c4:	4619      	mov	r1, r3
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	01db      	lsls	r3, r3, #7
 80040d6:	4413      	add	r3, r2
 80040d8:	3384      	adds	r3, #132	; 0x84
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	4611      	mov	r1, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	01d2      	lsls	r2, r2, #7
 80040e6:	440a      	add	r2, r1
 80040e8:	3284      	adds	r2, #132	; 0x84
 80040ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040ee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	01db      	lsls	r3, r3, #7
 80040fa:	4413      	add	r3, r2
 80040fc:	3384      	adds	r3, #132	; 0x84
 80040fe:	461a      	mov	r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	01db      	lsls	r3, r3, #7
 8004110:	4413      	add	r3, r2
 8004112:	3384      	adds	r3, #132	; 0x84
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	6812      	ldr	r2, [r2, #0]
 800411a:	4611      	mov	r1, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	01d2      	lsls	r2, r2, #7
 8004120:	440a      	add	r2, r1
 8004122:	3284      	adds	r2, #132	; 0x84
 8004124:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004128:	f023 0307 	bic.w	r3, r3, #7
 800412c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	69da      	ldr	r2, [r3, #28]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	68f9      	ldr	r1, [r7, #12]
 8004138:	6809      	ldr	r1, [r1, #0]
 800413a:	4608      	mov	r0, r1
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	01c9      	lsls	r1, r1, #7
 8004140:	4401      	add	r1, r0
 8004142:	3184      	adds	r1, #132	; 0x84
 8004144:	4313      	orrs	r3, r2
 8004146:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	01db      	lsls	r3, r3, #7
 8004152:	4413      	add	r3, r2
 8004154:	3384      	adds	r3, #132	; 0x84
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	461a      	mov	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	01db      	lsls	r3, r3, #7
 8004162:	4413      	add	r3, r2
 8004164:	3384      	adds	r3, #132	; 0x84
 8004166:	461a      	mov	r2, r3
 8004168:	2300      	movs	r3, #0
 800416a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	461a      	mov	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	01db      	lsls	r3, r3, #7
 8004176:	4413      	add	r3, r2
 8004178:	3384      	adds	r3, #132	; 0x84
 800417a:	461a      	mov	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d102      	bne.n	8004190 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800418a:	2304      	movs	r3, #4
 800418c:	61fb      	str	r3, [r7, #28]
 800418e:	e01b      	b.n	80041c8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d102      	bne.n	800419e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004198:	2303      	movs	r3, #3
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	e014      	b.n	80041c8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d00b      	beq.n	80041be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d007      	beq.n	80041be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d003      	beq.n	80041be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80041ba:	2b07      	cmp	r3, #7
 80041bc:	d102      	bne.n	80041c4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80041be:	2302      	movs	r3, #2
 80041c0:	61fb      	str	r3, [r7, #28]
 80041c2:	e001      	b.n	80041c8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80041c4:	2301      	movs	r3, #1
 80041c6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	01db      	lsls	r3, r3, #7
 80041d2:	4413      	add	r3, r2
 80041d4:	3384      	adds	r3, #132	; 0x84
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	6812      	ldr	r2, [r2, #0]
 80041dc:	4611      	mov	r1, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	01d2      	lsls	r2, r2, #7
 80041e2:	440a      	add	r2, r1
 80041e4:	3284      	adds	r2, #132	; 0x84
 80041e6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80041ea:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	fb02 f303 	mul.w	r3, r2, r3
 80041f6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	6859      	ldr	r1, [r3, #4]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	1acb      	subs	r3, r1, r3
 8004202:	69f9      	ldr	r1, [r7, #28]
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800420a:	68f9      	ldr	r1, [r7, #12]
 800420c:	6809      	ldr	r1, [r1, #0]
 800420e:	4608      	mov	r0, r1
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	01c9      	lsls	r1, r1, #7
 8004214:	4401      	add	r1, r0
 8004216:	3184      	adds	r1, #132	; 0x84
 8004218:	4313      	orrs	r3, r2
 800421a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	01db      	lsls	r3, r3, #7
 8004226:	4413      	add	r3, r2
 8004228:	3384      	adds	r3, #132	; 0x84
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	6812      	ldr	r2, [r2, #0]
 8004230:	4611      	mov	r1, r2
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	01d2      	lsls	r2, r2, #7
 8004236:	440a      	add	r2, r1
 8004238:	3284      	adds	r2, #132	; 0x84
 800423a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800423e:	f023 0307 	bic.w	r3, r3, #7
 8004242:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	01db      	lsls	r3, r3, #7
 800424e:	4413      	add	r3, r2
 8004250:	3384      	adds	r3, #132	; 0x84
 8004252:	461a      	mov	r2, r3
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	01db      	lsls	r3, r3, #7
 8004264:	4413      	add	r3, r2
 8004266:	3384      	adds	r3, #132	; 0x84
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	4611      	mov	r1, r2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	01d2      	lsls	r2, r2, #7
 8004274:	440a      	add	r2, r1
 8004276:	3284      	adds	r2, #132	; 0x84
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	6013      	str	r3, [r2, #0]
}
 800427e:	bf00      	nop
 8004280:	3724      	adds	r7, #36	; 0x24
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e267      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d075      	beq.n	8004396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042aa:	4b88      	ldr	r3, [pc, #544]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d00c      	beq.n	80042d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b6:	4b85      	ldr	r3, [pc, #532]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d112      	bne.n	80042e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042c2:	4b82      	ldr	r3, [pc, #520]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ce:	d10b      	bne.n	80042e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d0:	4b7e      	ldr	r3, [pc, #504]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d05b      	beq.n	8004394 <HAL_RCC_OscConfig+0x108>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d157      	bne.n	8004394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e242      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f0:	d106      	bne.n	8004300 <HAL_RCC_OscConfig+0x74>
 80042f2:	4b76      	ldr	r3, [pc, #472]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a75      	ldr	r2, [pc, #468]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 80042f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	e01d      	b.n	800433c <HAL_RCC_OscConfig+0xb0>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004308:	d10c      	bne.n	8004324 <HAL_RCC_OscConfig+0x98>
 800430a:	4b70      	ldr	r3, [pc, #448]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a6f      	ldr	r2, [pc, #444]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 8004310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	4b6d      	ldr	r3, [pc, #436]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a6c      	ldr	r2, [pc, #432]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 800431c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	e00b      	b.n	800433c <HAL_RCC_OscConfig+0xb0>
 8004324:	4b69      	ldr	r3, [pc, #420]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a68      	ldr	r2, [pc, #416]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 800432a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	4b66      	ldr	r3, [pc, #408]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a65      	ldr	r2, [pc, #404]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 8004336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800433a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d013      	beq.n	800436c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7fd f990 	bl	8001668 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800434c:	f7fd f98c 	bl	8001668 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b64      	cmp	r3, #100	; 0x64
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e207      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435e:	4b5b      	ldr	r3, [pc, #364]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0xc0>
 800436a:	e014      	b.n	8004396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436c:	f7fd f97c 	bl	8001668 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004374:	f7fd f978 	bl	8001668 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b64      	cmp	r3, #100	; 0x64
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e1f3      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004386:	4b51      	ldr	r3, [pc, #324]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0xe8>
 8004392:	e000      	b.n	8004396 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d063      	beq.n	800446a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043a2:	4b4a      	ldr	r3, [pc, #296]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 030c 	and.w	r3, r3, #12
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00b      	beq.n	80043c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ae:	4b47      	ldr	r3, [pc, #284]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d11c      	bne.n	80043f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ba:	4b44      	ldr	r3, [pc, #272]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d116      	bne.n	80043f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c6:	4b41      	ldr	r3, [pc, #260]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d005      	beq.n	80043de <HAL_RCC_OscConfig+0x152>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d001      	beq.n	80043de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e1c7      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043de:	4b3b      	ldr	r3, [pc, #236]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	4937      	ldr	r1, [pc, #220]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f2:	e03a      	b.n	800446a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d020      	beq.n	800443e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043fc:	4b34      	ldr	r3, [pc, #208]	; (80044d0 <HAL_RCC_OscConfig+0x244>)
 80043fe:	2201      	movs	r2, #1
 8004400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004402:	f7fd f931 	bl	8001668 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800440a:	f7fd f92d 	bl	8001668 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e1a8      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800441c:	4b2b      	ldr	r3, [pc, #172]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f0      	beq.n	800440a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004428:	4b28      	ldr	r3, [pc, #160]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4925      	ldr	r1, [pc, #148]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 8004438:	4313      	orrs	r3, r2
 800443a:	600b      	str	r3, [r1, #0]
 800443c:	e015      	b.n	800446a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443e:	4b24      	ldr	r3, [pc, #144]	; (80044d0 <HAL_RCC_OscConfig+0x244>)
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fd f910 	bl	8001668 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800444c:	f7fd f90c 	bl	8001668 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e187      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445e:	4b1b      	ldr	r3, [pc, #108]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b00      	cmp	r3, #0
 8004474:	d036      	beq.n	80044e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d016      	beq.n	80044ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447e:	4b15      	ldr	r3, [pc, #84]	; (80044d4 <HAL_RCC_OscConfig+0x248>)
 8004480:	2201      	movs	r2, #1
 8004482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004484:	f7fd f8f0 	bl	8001668 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800448c:	f7fd f8ec 	bl	8001668 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e167      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449e:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <HAL_RCC_OscConfig+0x240>)
 80044a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCC_OscConfig+0x200>
 80044aa:	e01b      	b.n	80044e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ac:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <HAL_RCC_OscConfig+0x248>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b2:	f7fd f8d9 	bl	8001668 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b8:	e00e      	b.n	80044d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ba:	f7fd f8d5 	bl	8001668 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d907      	bls.n	80044d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e150      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
 80044cc:	40023800 	.word	0x40023800
 80044d0:	42470000 	.word	0x42470000
 80044d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d8:	4b88      	ldr	r3, [pc, #544]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 80044da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1ea      	bne.n	80044ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 8097 	beq.w	8004620 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f2:	2300      	movs	r3, #0
 80044f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f6:	4b81      	ldr	r3, [pc, #516]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10f      	bne.n	8004522 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004502:	2300      	movs	r3, #0
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	4b7d      	ldr	r3, [pc, #500]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	4a7c      	ldr	r2, [pc, #496]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 800450c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004510:	6413      	str	r3, [r2, #64]	; 0x40
 8004512:	4b7a      	ldr	r3, [pc, #488]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	60bb      	str	r3, [r7, #8]
 800451c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004522:	4b77      	ldr	r3, [pc, #476]	; (8004700 <HAL_RCC_OscConfig+0x474>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452a:	2b00      	cmp	r3, #0
 800452c:	d118      	bne.n	8004560 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800452e:	4b74      	ldr	r3, [pc, #464]	; (8004700 <HAL_RCC_OscConfig+0x474>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a73      	ldr	r2, [pc, #460]	; (8004700 <HAL_RCC_OscConfig+0x474>)
 8004534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453a:	f7fd f895 	bl	8001668 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004542:	f7fd f891 	bl	8001668 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e10c      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004554:	4b6a      	ldr	r3, [pc, #424]	; (8004700 <HAL_RCC_OscConfig+0x474>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f0      	beq.n	8004542 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d106      	bne.n	8004576 <HAL_RCC_OscConfig+0x2ea>
 8004568:	4b64      	ldr	r3, [pc, #400]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	4a63      	ldr	r2, [pc, #396]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	6713      	str	r3, [r2, #112]	; 0x70
 8004574:	e01c      	b.n	80045b0 <HAL_RCC_OscConfig+0x324>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b05      	cmp	r3, #5
 800457c:	d10c      	bne.n	8004598 <HAL_RCC_OscConfig+0x30c>
 800457e:	4b5f      	ldr	r3, [pc, #380]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004582:	4a5e      	ldr	r2, [pc, #376]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 8004584:	f043 0304 	orr.w	r3, r3, #4
 8004588:	6713      	str	r3, [r2, #112]	; 0x70
 800458a:	4b5c      	ldr	r3, [pc, #368]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 800458c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458e:	4a5b      	ldr	r2, [pc, #364]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	6713      	str	r3, [r2, #112]	; 0x70
 8004596:	e00b      	b.n	80045b0 <HAL_RCC_OscConfig+0x324>
 8004598:	4b58      	ldr	r3, [pc, #352]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459c:	4a57      	ldr	r2, [pc, #348]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 800459e:	f023 0301 	bic.w	r3, r3, #1
 80045a2:	6713      	str	r3, [r2, #112]	; 0x70
 80045a4:	4b55      	ldr	r3, [pc, #340]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 80045a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a8:	4a54      	ldr	r2, [pc, #336]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 80045aa:	f023 0304 	bic.w	r3, r3, #4
 80045ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d015      	beq.n	80045e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b8:	f7fd f856 	bl	8001668 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045be:	e00a      	b.n	80045d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045c0:	f7fd f852 	bl	8001668 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e0cb      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d6:	4b49      	ldr	r3, [pc, #292]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0ee      	beq.n	80045c0 <HAL_RCC_OscConfig+0x334>
 80045e2:	e014      	b.n	800460e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e4:	f7fd f840 	bl	8001668 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ea:	e00a      	b.n	8004602 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ec:	f7fd f83c 	bl	8001668 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e0b5      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004602:	4b3e      	ldr	r3, [pc, #248]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 8004604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1ee      	bne.n	80045ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800460e:	7dfb      	ldrb	r3, [r7, #23]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d105      	bne.n	8004620 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004614:	4b39      	ldr	r3, [pc, #228]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	4a38      	ldr	r2, [pc, #224]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 800461a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800461e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 80a1 	beq.w	800476c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800462a:	4b34      	ldr	r3, [pc, #208]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	2b08      	cmp	r3, #8
 8004634:	d05c      	beq.n	80046f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d141      	bne.n	80046c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463e:	4b31      	ldr	r3, [pc, #196]	; (8004704 <HAL_RCC_OscConfig+0x478>)
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fd f810 	bl	8001668 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464c:	f7fd f80c 	bl	8001668 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e087      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465e:	4b27      	ldr	r3, [pc, #156]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69da      	ldr	r2, [r3, #28]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	019b      	lsls	r3, r3, #6
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	085b      	lsrs	r3, r3, #1
 8004682:	3b01      	subs	r3, #1
 8004684:	041b      	lsls	r3, r3, #16
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	061b      	lsls	r3, r3, #24
 800468e:	491b      	ldr	r1, [pc, #108]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 8004690:	4313      	orrs	r3, r2
 8004692:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004694:	4b1b      	ldr	r3, [pc, #108]	; (8004704 <HAL_RCC_OscConfig+0x478>)
 8004696:	2201      	movs	r2, #1
 8004698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469a:	f7fc ffe5 	bl	8001668 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a2:	f7fc ffe1 	bl	8001668 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e05c      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b4:	4b11      	ldr	r3, [pc, #68]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0f0      	beq.n	80046a2 <HAL_RCC_OscConfig+0x416>
 80046c0:	e054      	b.n	800476c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c2:	4b10      	ldr	r3, [pc, #64]	; (8004704 <HAL_RCC_OscConfig+0x478>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c8:	f7fc ffce 	bl	8001668 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d0:	f7fc ffca 	bl	8001668 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e045      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e2:	4b06      	ldr	r3, [pc, #24]	; (80046fc <HAL_RCC_OscConfig+0x470>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f0      	bne.n	80046d0 <HAL_RCC_OscConfig+0x444>
 80046ee:	e03d      	b.n	800476c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d107      	bne.n	8004708 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e038      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
 80046fc:	40023800 	.word	0x40023800
 8004700:	40007000 	.word	0x40007000
 8004704:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004708:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <HAL_RCC_OscConfig+0x4ec>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d028      	beq.n	8004768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004720:	429a      	cmp	r2, r3
 8004722:	d121      	bne.n	8004768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472e:	429a      	cmp	r2, r3
 8004730:	d11a      	bne.n	8004768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004738:	4013      	ands	r3, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800473e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004740:	4293      	cmp	r3, r2
 8004742:	d111      	bne.n	8004768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474e:	085b      	lsrs	r3, r3, #1
 8004750:	3b01      	subs	r3, #1
 8004752:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004754:	429a      	cmp	r2, r3
 8004756:	d107      	bne.n	8004768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004764:	429a      	cmp	r2, r3
 8004766:	d001      	beq.n	800476c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40023800 	.word	0x40023800

0800477c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0cc      	b.n	800492a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004790:	4b68      	ldr	r3, [pc, #416]	; (8004934 <HAL_RCC_ClockConfig+0x1b8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d90c      	bls.n	80047b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479e:	4b65      	ldr	r3, [pc, #404]	; (8004934 <HAL_RCC_ClockConfig+0x1b8>)
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a6:	4b63      	ldr	r3, [pc, #396]	; (8004934 <HAL_RCC_ClockConfig+0x1b8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d001      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0b8      	b.n	800492a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d020      	beq.n	8004806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047d0:	4b59      	ldr	r3, [pc, #356]	; (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	4a58      	ldr	r2, [pc, #352]	; (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047e8:	4b53      	ldr	r3, [pc, #332]	; (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	4a52      	ldr	r2, [pc, #328]	; (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f4:	4b50      	ldr	r3, [pc, #320]	; (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	494d      	ldr	r1, [pc, #308]	; (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	4313      	orrs	r3, r2
 8004804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d044      	beq.n	800489c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d107      	bne.n	800482a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481a:	4b47      	ldr	r3, [pc, #284]	; (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d119      	bne.n	800485a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e07f      	b.n	800492a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d003      	beq.n	800483a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004836:	2b03      	cmp	r3, #3
 8004838:	d107      	bne.n	800484a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800483a:	4b3f      	ldr	r3, [pc, #252]	; (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e06f      	b.n	800492a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484a:	4b3b      	ldr	r3, [pc, #236]	; (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e067      	b.n	800492a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800485a:	4b37      	ldr	r3, [pc, #220]	; (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f023 0203 	bic.w	r2, r3, #3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	4934      	ldr	r1, [pc, #208]	; (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	4313      	orrs	r3, r2
 800486a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800486c:	f7fc fefc 	bl	8001668 <HAL_GetTick>
 8004870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004872:	e00a      	b.n	800488a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004874:	f7fc fef8 	bl	8001668 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004882:	4293      	cmp	r3, r2
 8004884:	d901      	bls.n	800488a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e04f      	b.n	800492a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488a:	4b2b      	ldr	r3, [pc, #172]	; (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 020c 	and.w	r2, r3, #12
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	429a      	cmp	r2, r3
 800489a:	d1eb      	bne.n	8004874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800489c:	4b25      	ldr	r3, [pc, #148]	; (8004934 <HAL_RCC_ClockConfig+0x1b8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d20c      	bcs.n	80048c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048aa:	4b22      	ldr	r3, [pc, #136]	; (8004934 <HAL_RCC_ClockConfig+0x1b8>)
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b2:	4b20      	ldr	r3, [pc, #128]	; (8004934 <HAL_RCC_ClockConfig+0x1b8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e032      	b.n	800492a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048d0:	4b19      	ldr	r3, [pc, #100]	; (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	4916      	ldr	r1, [pc, #88]	; (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d009      	beq.n	8004902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ee:	4b12      	ldr	r3, [pc, #72]	; (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	490e      	ldr	r1, [pc, #56]	; (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004902:	f000 f821 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 8004906:	4602      	mov	r2, r0
 8004908:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	091b      	lsrs	r3, r3, #4
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	490a      	ldr	r1, [pc, #40]	; (800493c <HAL_RCC_ClockConfig+0x1c0>)
 8004914:	5ccb      	ldrb	r3, [r1, r3]
 8004916:	fa22 f303 	lsr.w	r3, r2, r3
 800491a:	4a09      	ldr	r2, [pc, #36]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 800491c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800491e:	4b09      	ldr	r3, [pc, #36]	; (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f7fc fd28 	bl	8001378 <HAL_InitTick>

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40023c00 	.word	0x40023c00
 8004938:	40023800 	.word	0x40023800
 800493c:	0800998c 	.word	0x0800998c
 8004940:	200004b4 	.word	0x200004b4
 8004944:	200004b8 	.word	0x200004b8

08004948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800494c:	b094      	sub	sp, #80	; 0x50
 800494e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	647b      	str	r3, [r7, #68]	; 0x44
 8004954:	2300      	movs	r3, #0
 8004956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004958:	2300      	movs	r3, #0
 800495a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004960:	4b79      	ldr	r3, [pc, #484]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 030c 	and.w	r3, r3, #12
 8004968:	2b08      	cmp	r3, #8
 800496a:	d00d      	beq.n	8004988 <HAL_RCC_GetSysClockFreq+0x40>
 800496c:	2b08      	cmp	r3, #8
 800496e:	f200 80e1 	bhi.w	8004b34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <HAL_RCC_GetSysClockFreq+0x34>
 8004976:	2b04      	cmp	r3, #4
 8004978:	d003      	beq.n	8004982 <HAL_RCC_GetSysClockFreq+0x3a>
 800497a:	e0db      	b.n	8004b34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800497c:	4b73      	ldr	r3, [pc, #460]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x204>)
 800497e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004980:	e0db      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004982:	4b73      	ldr	r3, [pc, #460]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x208>)
 8004984:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004986:	e0d8      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004988:	4b6f      	ldr	r3, [pc, #444]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x200>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004990:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004992:	4b6d      	ldr	r3, [pc, #436]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d063      	beq.n	8004a66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800499e:	4b6a      	ldr	r3, [pc, #424]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	099b      	lsrs	r3, r3, #6
 80049a4:	2200      	movs	r2, #0
 80049a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80049a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b0:	633b      	str	r3, [r7, #48]	; 0x30
 80049b2:	2300      	movs	r3, #0
 80049b4:	637b      	str	r3, [r7, #52]	; 0x34
 80049b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049ba:	4622      	mov	r2, r4
 80049bc:	462b      	mov	r3, r5
 80049be:	f04f 0000 	mov.w	r0, #0
 80049c2:	f04f 0100 	mov.w	r1, #0
 80049c6:	0159      	lsls	r1, r3, #5
 80049c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049cc:	0150      	lsls	r0, r2, #5
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	4621      	mov	r1, r4
 80049d4:	1a51      	subs	r1, r2, r1
 80049d6:	6139      	str	r1, [r7, #16]
 80049d8:	4629      	mov	r1, r5
 80049da:	eb63 0301 	sbc.w	r3, r3, r1
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049ec:	4659      	mov	r1, fp
 80049ee:	018b      	lsls	r3, r1, #6
 80049f0:	4651      	mov	r1, sl
 80049f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049f6:	4651      	mov	r1, sl
 80049f8:	018a      	lsls	r2, r1, #6
 80049fa:	4651      	mov	r1, sl
 80049fc:	ebb2 0801 	subs.w	r8, r2, r1
 8004a00:	4659      	mov	r1, fp
 8004a02:	eb63 0901 	sbc.w	r9, r3, r1
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	f04f 0300 	mov.w	r3, #0
 8004a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a1a:	4690      	mov	r8, r2
 8004a1c:	4699      	mov	r9, r3
 8004a1e:	4623      	mov	r3, r4
 8004a20:	eb18 0303 	adds.w	r3, r8, r3
 8004a24:	60bb      	str	r3, [r7, #8]
 8004a26:	462b      	mov	r3, r5
 8004a28:	eb49 0303 	adc.w	r3, r9, r3
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a3a:	4629      	mov	r1, r5
 8004a3c:	024b      	lsls	r3, r1, #9
 8004a3e:	4621      	mov	r1, r4
 8004a40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a44:	4621      	mov	r1, r4
 8004a46:	024a      	lsls	r2, r1, #9
 8004a48:	4610      	mov	r0, r2
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a4e:	2200      	movs	r2, #0
 8004a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a58:	f7fb fbc8 	bl	80001ec <__aeabi_uldivmod>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4613      	mov	r3, r2
 8004a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a64:	e058      	b.n	8004b18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a66:	4b38      	ldr	r3, [pc, #224]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	099b      	lsrs	r3, r3, #6
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	4618      	mov	r0, r3
 8004a70:	4611      	mov	r1, r2
 8004a72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a76:	623b      	str	r3, [r7, #32]
 8004a78:	2300      	movs	r3, #0
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a80:	4642      	mov	r2, r8
 8004a82:	464b      	mov	r3, r9
 8004a84:	f04f 0000 	mov.w	r0, #0
 8004a88:	f04f 0100 	mov.w	r1, #0
 8004a8c:	0159      	lsls	r1, r3, #5
 8004a8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a92:	0150      	lsls	r0, r2, #5
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4641      	mov	r1, r8
 8004a9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ab0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ab4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ab8:	ebb2 040a 	subs.w	r4, r2, sl
 8004abc:	eb63 050b 	sbc.w	r5, r3, fp
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	00eb      	lsls	r3, r5, #3
 8004aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ace:	00e2      	lsls	r2, r4, #3
 8004ad0:	4614      	mov	r4, r2
 8004ad2:	461d      	mov	r5, r3
 8004ad4:	4643      	mov	r3, r8
 8004ad6:	18e3      	adds	r3, r4, r3
 8004ad8:	603b      	str	r3, [r7, #0]
 8004ada:	464b      	mov	r3, r9
 8004adc:	eb45 0303 	adc.w	r3, r5, r3
 8004ae0:	607b      	str	r3, [r7, #4]
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aee:	4629      	mov	r1, r5
 8004af0:	028b      	lsls	r3, r1, #10
 8004af2:	4621      	mov	r1, r4
 8004af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004af8:	4621      	mov	r1, r4
 8004afa:	028a      	lsls	r2, r1, #10
 8004afc:	4610      	mov	r0, r2
 8004afe:	4619      	mov	r1, r3
 8004b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b02:	2200      	movs	r2, #0
 8004b04:	61bb      	str	r3, [r7, #24]
 8004b06:	61fa      	str	r2, [r7, #28]
 8004b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b0c:	f7fb fb6e 	bl	80001ec <__aeabi_uldivmod>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4613      	mov	r3, r2
 8004b16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b18:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	0c1b      	lsrs	r3, r3, #16
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	3301      	adds	r3, #1
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b32:	e002      	b.n	8004b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3750      	adds	r7, #80	; 0x50
 8004b40:	46bd      	mov	sp, r7
 8004b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b46:	bf00      	nop
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	00f42400 	.word	0x00f42400
 8004b50:	007a1200 	.word	0x007a1200

08004b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b58:	4b03      	ldr	r3, [pc, #12]	; (8004b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	200004b4 	.word	0x200004b4

08004b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b70:	f7ff fff0 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8004b74:	4602      	mov	r2, r0
 8004b76:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	0a9b      	lsrs	r3, r3, #10
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	4903      	ldr	r1, [pc, #12]	; (8004b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b82:	5ccb      	ldrb	r3, [r1, r3]
 8004b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	0800999c 	.word	0x0800999c

08004b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b98:	f7ff ffdc 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	0b5b      	lsrs	r3, r3, #13
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	4903      	ldr	r1, [pc, #12]	; (8004bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004baa:	5ccb      	ldrb	r3, [r1, r3]
 8004bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	0800999c 	.word	0x0800999c

08004bbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	220f      	movs	r2, #15
 8004bca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bcc:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <HAL_RCC_GetClockConfig+0x5c>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 0203 	and.w	r2, r3, #3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004bd8:	4b0f      	ldr	r3, [pc, #60]	; (8004c18 <HAL_RCC_GetClockConfig+0x5c>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004be4:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <HAL_RCC_GetClockConfig+0x5c>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004bf0:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <HAL_RCC_GetClockConfig+0x5c>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	08db      	lsrs	r3, r3, #3
 8004bf6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004bfe:	4b07      	ldr	r3, [pc, #28]	; (8004c1c <HAL_RCC_GetClockConfig+0x60>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 020f 	and.w	r2, r3, #15
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	601a      	str	r2, [r3, #0]
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40023c00 	.word	0x40023c00

08004c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10b      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d105      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d075      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c54:	4b91      	ldr	r3, [pc, #580]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c5a:	f7fc fd05 	bl	8001668 <HAL_GetTick>
 8004c5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c60:	e008      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c62:	f7fc fd01 	bl	8001668 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e189      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c74:	4b8a      	ldr	r3, [pc, #552]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1f0      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d009      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	019a      	lsls	r2, r3, #6
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	071b      	lsls	r3, r3, #28
 8004c98:	4981      	ldr	r1, [pc, #516]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01f      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004cac:	4b7c      	ldr	r3, [pc, #496]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cb2:	0f1b      	lsrs	r3, r3, #28
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	019a      	lsls	r2, r3, #6
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	061b      	lsls	r3, r3, #24
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	071b      	lsls	r3, r3, #28
 8004ccc:	4974      	ldr	r1, [pc, #464]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004cd4:	4b72      	ldr	r3, [pc, #456]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cda:	f023 021f 	bic.w	r2, r3, #31
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	496e      	ldr	r1, [pc, #440]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00d      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	019a      	lsls	r2, r3, #6
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	061b      	lsls	r3, r3, #24
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	071b      	lsls	r3, r3, #28
 8004d0c:	4964      	ldr	r1, [pc, #400]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d14:	4b61      	ldr	r3, [pc, #388]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004d16:	2201      	movs	r2, #1
 8004d18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d1a:	f7fc fca5 	bl	8001668 <HAL_GetTick>
 8004d1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d20:	e008      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d22:	f7fc fca1 	bl	8001668 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e129      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d34:	4b5a      	ldr	r3, [pc, #360]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f0      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d105      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d079      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d58:	4b52      	ldr	r3, [pc, #328]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d5e:	f7fc fc83 	bl	8001668 <HAL_GetTick>
 8004d62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d64:	e008      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004d66:	f7fc fc7f 	bl	8001668 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e107      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d78:	4b49      	ldr	r3, [pc, #292]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d84:	d0ef      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0304 	and.w	r3, r3, #4
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d020      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d92:	4b43      	ldr	r3, [pc, #268]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d98:	0f1b      	lsrs	r3, r3, #28
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	019a      	lsls	r2, r3, #6
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	061b      	lsls	r3, r3, #24
 8004dac:	431a      	orrs	r2, r3
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	071b      	lsls	r3, r3, #28
 8004db2:	493b      	ldr	r1, [pc, #236]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004dba:	4b39      	ldr	r3, [pc, #228]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dc0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	021b      	lsls	r3, r3, #8
 8004dcc:	4934      	ldr	r1, [pc, #208]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01e      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004de0:	4b2f      	ldr	r3, [pc, #188]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de6:	0e1b      	lsrs	r3, r3, #24
 8004de8:	f003 030f 	and.w	r3, r3, #15
 8004dec:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	019a      	lsls	r2, r3, #6
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	061b      	lsls	r3, r3, #24
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	071b      	lsls	r3, r3, #28
 8004e00:	4927      	ldr	r1, [pc, #156]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e08:	4b25      	ldr	r3, [pc, #148]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	4922      	ldr	r1, [pc, #136]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e1e:	4b21      	ldr	r3, [pc, #132]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e24:	f7fc fc20 	bl	8001668 <HAL_GetTick>
 8004e28:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004e2c:	f7fc fc1c 	bl	8001668 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e0a4      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e3e:	4b18      	ldr	r3, [pc, #96]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e4a:	d1ef      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 808b 	beq.w	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	4b10      	ldr	r3, [pc, #64]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	4a0f      	ldr	r2, [pc, #60]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e68:	6413      	str	r3, [r2, #64]	; 0x40
 8004e6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e76:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a0b      	ldr	r2, [pc, #44]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e82:	f7fc fbf1 	bl	8001668 <HAL_GetTick>
 8004e86:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e88:	e010      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e8a:	f7fc fbed 	bl	8001668 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d909      	bls.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e075      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004e9c:	42470068 	.word	0x42470068
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	42470070 	.word	0x42470070
 8004ea8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004eac:	4b38      	ldr	r3, [pc, #224]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0e8      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eb8:	4b36      	ldr	r3, [pc, #216]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d02f      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d028      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ed6:	4b2f      	ldr	r3, [pc, #188]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ede:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ee0:	4b2d      	ldr	r3, [pc, #180]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ee6:	4b2c      	ldr	r3, [pc, #176]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004eec:	4a29      	ldr	r2, [pc, #164]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ef2:	4b28      	ldr	r3, [pc, #160]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d114      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004efe:	f7fc fbb3 	bl	8001668 <HAL_GetTick>
 8004f02:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f04:	e00a      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f06:	f7fc fbaf 	bl	8001668 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e035      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f1c:	4b1d      	ldr	r3, [pc, #116]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0ee      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f34:	d10d      	bne.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004f36:	4b17      	ldr	r3, [pc, #92]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f42:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f4a:	4912      	ldr	r1, [pc, #72]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	608b      	str	r3, [r1, #8]
 8004f50:	e005      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004f52:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	4a0f      	ldr	r2, [pc, #60]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f58:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f5c:	6093      	str	r3, [r2, #8]
 8004f5e:	4b0d      	ldr	r3, [pc, #52]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f6a:	490a      	ldr	r1, [pc, #40]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d004      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004f82:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004f84:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3718      	adds	r7, #24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40007000 	.word	0x40007000
 8004f94:	40023800 	.word	0x40023800
 8004f98:	42470e40 	.word	0x42470e40
 8004f9c:	424711e0 	.word	0x424711e0

08004fa0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e025      	b.n	8005000 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d106      	bne.n	8004fce <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7fc f9cb 	bl	8001364 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	f000 ffdd 	bl	8005fa0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6818      	ldr	r0, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	6839      	ldr	r1, [r7, #0]
 8004ff2:	f001 f832 	bl	800605a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e07b      	b.n	8005112 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	2b00      	cmp	r3, #0
 8005020:	d108      	bne.n	8005034 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800502a:	d009      	beq.n	8005040 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	61da      	str	r2, [r3, #28]
 8005032:	e005      	b.n	8005040 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fc f83e 	bl	80010dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005076:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050b0:	431a      	orrs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c4:	ea42 0103 	orr.w	r1, r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	0c1b      	lsrs	r3, r3, #16
 80050de:	f003 0104 	and.w	r1, r3, #4
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	f003 0210 	and.w	r2, r3, #16
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69da      	ldr	r2, [r3, #28]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005100:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b082      	sub	sp, #8
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e041      	b.n	80051b0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d106      	bne.n	8005146 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7fc f813 	bl	800116c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2202      	movs	r2, #2
 800514a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3304      	adds	r3, #4
 8005156:	4619      	mov	r1, r3
 8005158:	4610      	mov	r0, r2
 800515a:	f000 fa95 	bl	8005688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d001      	beq.n	80051d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e04e      	b.n	800526e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a23      	ldr	r2, [pc, #140]	; (800527c <HAL_TIM_Base_Start_IT+0xc4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d022      	beq.n	8005238 <HAL_TIM_Base_Start_IT+0x80>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051fa:	d01d      	beq.n	8005238 <HAL_TIM_Base_Start_IT+0x80>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a1f      	ldr	r2, [pc, #124]	; (8005280 <HAL_TIM_Base_Start_IT+0xc8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d018      	beq.n	8005238 <HAL_TIM_Base_Start_IT+0x80>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1e      	ldr	r2, [pc, #120]	; (8005284 <HAL_TIM_Base_Start_IT+0xcc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d013      	beq.n	8005238 <HAL_TIM_Base_Start_IT+0x80>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1c      	ldr	r2, [pc, #112]	; (8005288 <HAL_TIM_Base_Start_IT+0xd0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00e      	beq.n	8005238 <HAL_TIM_Base_Start_IT+0x80>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a1b      	ldr	r2, [pc, #108]	; (800528c <HAL_TIM_Base_Start_IT+0xd4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d009      	beq.n	8005238 <HAL_TIM_Base_Start_IT+0x80>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a19      	ldr	r2, [pc, #100]	; (8005290 <HAL_TIM_Base_Start_IT+0xd8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d004      	beq.n	8005238 <HAL_TIM_Base_Start_IT+0x80>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a18      	ldr	r2, [pc, #96]	; (8005294 <HAL_TIM_Base_Start_IT+0xdc>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d111      	bne.n	800525c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b06      	cmp	r3, #6
 8005248:	d010      	beq.n	800526c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f042 0201 	orr.w	r2, r2, #1
 8005258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525a:	e007      	b.n	800526c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0201 	orr.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40010000 	.word	0x40010000
 8005280:	40000400 	.word	0x40000400
 8005284:	40000800 	.word	0x40000800
 8005288:	40000c00 	.word	0x40000c00
 800528c:	40010400 	.word	0x40010400
 8005290:	40014000 	.word	0x40014000
 8005294:	40001800 	.word	0x40001800

08005298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d122      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d11b      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f06f 0202 	mvn.w	r2, #2
 80052c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f9b5 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 80052e0:	e005      	b.n	80052ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f9a7 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f9b8 	bl	800565e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d122      	bne.n	8005348 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b04      	cmp	r3, #4
 800530e:	d11b      	bne.n	8005348 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0204 	mvn.w	r2, #4
 8005318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2202      	movs	r2, #2
 800531e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f98b 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 8005334:	e005      	b.n	8005342 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f97d 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f98e 	bl	800565e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b08      	cmp	r3, #8
 8005354:	d122      	bne.n	800539c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b08      	cmp	r3, #8
 8005362:	d11b      	bne.n	800539c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f06f 0208 	mvn.w	r2, #8
 800536c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2204      	movs	r2, #4
 8005372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	f003 0303 	and.w	r3, r3, #3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f961 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 8005388:	e005      	b.n	8005396 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f953 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f964 	bl	800565e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0310 	and.w	r3, r3, #16
 80053a6:	2b10      	cmp	r3, #16
 80053a8:	d122      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0310 	and.w	r3, r3, #16
 80053b4:	2b10      	cmp	r3, #16
 80053b6:	d11b      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0210 	mvn.w	r2, #16
 80053c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2208      	movs	r2, #8
 80053c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f937 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 80053dc:	e005      	b.n	80053ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f929 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f93a 	bl	800565e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d10e      	bne.n	800541c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b01      	cmp	r3, #1
 800540a:	d107      	bne.n	800541c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0201 	mvn.w	r2, #1
 8005414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7fb fc3c 	bl	8000c94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005426:	2b80      	cmp	r3, #128	; 0x80
 8005428:	d10e      	bne.n	8005448 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005434:	2b80      	cmp	r3, #128	; 0x80
 8005436:	d107      	bne.n	8005448 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fae0 	bl	8005a08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005452:	2b40      	cmp	r3, #64	; 0x40
 8005454:	d10e      	bne.n	8005474 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005460:	2b40      	cmp	r3, #64	; 0x40
 8005462:	d107      	bne.n	8005474 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800546c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f8ff 	bl	8005672 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f003 0320 	and.w	r3, r3, #32
 800547e:	2b20      	cmp	r3, #32
 8005480:	d10e      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f003 0320 	and.w	r3, r3, #32
 800548c:	2b20      	cmp	r3, #32
 800548e:	d107      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f06f 0220 	mvn.w	r2, #32
 8005498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 faaa 	bl	80059f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054a0:	bf00      	nop
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_TIM_ConfigClockSource+0x1c>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e0b4      	b.n	800562e <HAL_TIM_ConfigClockSource+0x186>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054fc:	d03e      	beq.n	800557c <HAL_TIM_ConfigClockSource+0xd4>
 80054fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005502:	f200 8087 	bhi.w	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 8005506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800550a:	f000 8086 	beq.w	800561a <HAL_TIM_ConfigClockSource+0x172>
 800550e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005512:	d87f      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 8005514:	2b70      	cmp	r3, #112	; 0x70
 8005516:	d01a      	beq.n	800554e <HAL_TIM_ConfigClockSource+0xa6>
 8005518:	2b70      	cmp	r3, #112	; 0x70
 800551a:	d87b      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 800551c:	2b60      	cmp	r3, #96	; 0x60
 800551e:	d050      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x11a>
 8005520:	2b60      	cmp	r3, #96	; 0x60
 8005522:	d877      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 8005524:	2b50      	cmp	r3, #80	; 0x50
 8005526:	d03c      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0xfa>
 8005528:	2b50      	cmp	r3, #80	; 0x50
 800552a:	d873      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 800552c:	2b40      	cmp	r3, #64	; 0x40
 800552e:	d058      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x13a>
 8005530:	2b40      	cmp	r3, #64	; 0x40
 8005532:	d86f      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 8005534:	2b30      	cmp	r3, #48	; 0x30
 8005536:	d064      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0x15a>
 8005538:	2b30      	cmp	r3, #48	; 0x30
 800553a:	d86b      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 800553c:	2b20      	cmp	r3, #32
 800553e:	d060      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0x15a>
 8005540:	2b20      	cmp	r3, #32
 8005542:	d867      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 8005544:	2b00      	cmp	r3, #0
 8005546:	d05c      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0x15a>
 8005548:	2b10      	cmp	r3, #16
 800554a:	d05a      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0x15a>
 800554c:	e062      	b.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6899      	ldr	r1, [r3, #8]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f000 f9ad 	bl	80058bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005570:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	609a      	str	r2, [r3, #8]
      break;
 800557a:	e04f      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6818      	ldr	r0, [r3, #0]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	6899      	ldr	r1, [r3, #8]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f000 f996 	bl	80058bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800559e:	609a      	str	r2, [r3, #8]
      break;
 80055a0:	e03c      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6859      	ldr	r1, [r3, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f000 f90a 	bl	80057c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2150      	movs	r1, #80	; 0x50
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 f963 	bl	8005886 <TIM_ITRx_SetConfig>
      break;
 80055c0:	e02c      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6859      	ldr	r1, [r3, #4]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	461a      	mov	r2, r3
 80055d0:	f000 f929 	bl	8005826 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2160      	movs	r1, #96	; 0x60
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 f953 	bl	8005886 <TIM_ITRx_SetConfig>
      break;
 80055e0:	e01c      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	6859      	ldr	r1, [r3, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	461a      	mov	r2, r3
 80055f0:	f000 f8ea 	bl	80057c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2140      	movs	r1, #64	; 0x40
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 f943 	bl	8005886 <TIM_ITRx_SetConfig>
      break;
 8005600:	e00c      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4619      	mov	r1, r3
 800560c:	4610      	mov	r0, r2
 800560e:	f000 f93a 	bl	8005886 <TIM_ITRx_SetConfig>
      break;
 8005612:	e003      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	73fb      	strb	r3, [r7, #15]
      break;
 8005618:	e000      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800561a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
	...

08005688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a40      	ldr	r2, [pc, #256]	; (800579c <TIM_Base_SetConfig+0x114>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d013      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a6:	d00f      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a3d      	ldr	r2, [pc, #244]	; (80057a0 <TIM_Base_SetConfig+0x118>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00b      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a3c      	ldr	r2, [pc, #240]	; (80057a4 <TIM_Base_SetConfig+0x11c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d007      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a3b      	ldr	r2, [pc, #236]	; (80057a8 <TIM_Base_SetConfig+0x120>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d003      	beq.n	80056c8 <TIM_Base_SetConfig+0x40>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a3a      	ldr	r2, [pc, #232]	; (80057ac <TIM_Base_SetConfig+0x124>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d108      	bne.n	80056da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a2f      	ldr	r2, [pc, #188]	; (800579c <TIM_Base_SetConfig+0x114>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d02b      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e8:	d027      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a2c      	ldr	r2, [pc, #176]	; (80057a0 <TIM_Base_SetConfig+0x118>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d023      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a2b      	ldr	r2, [pc, #172]	; (80057a4 <TIM_Base_SetConfig+0x11c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d01f      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a2a      	ldr	r2, [pc, #168]	; (80057a8 <TIM_Base_SetConfig+0x120>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d01b      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a29      	ldr	r2, [pc, #164]	; (80057ac <TIM_Base_SetConfig+0x124>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d017      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a28      	ldr	r2, [pc, #160]	; (80057b0 <TIM_Base_SetConfig+0x128>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d013      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a27      	ldr	r2, [pc, #156]	; (80057b4 <TIM_Base_SetConfig+0x12c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00f      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a26      	ldr	r2, [pc, #152]	; (80057b8 <TIM_Base_SetConfig+0x130>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00b      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a25      	ldr	r2, [pc, #148]	; (80057bc <TIM_Base_SetConfig+0x134>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d007      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a24      	ldr	r2, [pc, #144]	; (80057c0 <TIM_Base_SetConfig+0x138>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d003      	beq.n	800573a <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a23      	ldr	r2, [pc, #140]	; (80057c4 <TIM_Base_SetConfig+0x13c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d108      	bne.n	800574c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	4313      	orrs	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a0a      	ldr	r2, [pc, #40]	; (800579c <TIM_Base_SetConfig+0x114>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d003      	beq.n	8005780 <TIM_Base_SetConfig+0xf8>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a0c      	ldr	r2, [pc, #48]	; (80057ac <TIM_Base_SetConfig+0x124>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d103      	bne.n	8005788 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	691a      	ldr	r2, [r3, #16]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	615a      	str	r2, [r3, #20]
}
 800578e:	bf00      	nop
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	40010000 	.word	0x40010000
 80057a0:	40000400 	.word	0x40000400
 80057a4:	40000800 	.word	0x40000800
 80057a8:	40000c00 	.word	0x40000c00
 80057ac:	40010400 	.word	0x40010400
 80057b0:	40014000 	.word	0x40014000
 80057b4:	40014400 	.word	0x40014400
 80057b8:	40014800 	.word	0x40014800
 80057bc:	40001800 	.word	0x40001800
 80057c0:	40001c00 	.word	0x40001c00
 80057c4:	40002000 	.word	0x40002000

080057c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	f023 0201 	bic.w	r2, r3, #1
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f023 030a 	bic.w	r3, r3, #10
 8005804:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	621a      	str	r2, [r3, #32]
}
 800581a:	bf00      	nop
 800581c:	371c      	adds	r7, #28
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005826:	b480      	push	{r7}
 8005828:	b087      	sub	sp, #28
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	f023 0210 	bic.w	r2, r3, #16
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005850:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	031b      	lsls	r3, r3, #12
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	4313      	orrs	r3, r2
 800585a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005862:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	621a      	str	r2, [r3, #32]
}
 800587a:	bf00      	nop
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005886:	b480      	push	{r7}
 8005888:	b085      	sub	sp, #20
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f043 0307 	orr.w	r3, r3, #7
 80058a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	609a      	str	r2, [r3, #8]
}
 80058b0:	bf00      	nop
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	021a      	lsls	r2, r3, #8
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	431a      	orrs	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	609a      	str	r2, [r3, #8]
}
 80058f0:	bf00      	nop
 80058f2:	371c      	adds	r7, #28
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800590c:	2b01      	cmp	r3, #1
 800590e:	d101      	bne.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005910:	2302      	movs	r3, #2
 8005912:	e05a      	b.n	80059ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a21      	ldr	r2, [pc, #132]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d022      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005960:	d01d      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a1d      	ldr	r2, [pc, #116]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d018      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a1b      	ldr	r2, [pc, #108]	; (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d013      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a1a      	ldr	r2, [pc, #104]	; (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00e      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a18      	ldr	r2, [pc, #96]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d009      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a17      	ldr	r2, [pc, #92]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d004      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a15      	ldr	r2, [pc, #84]	; (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d10c      	bne.n	80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	40010000 	.word	0x40010000
 80059dc:	40000400 	.word	0x40000400
 80059e0:	40000800 	.word	0x40000800
 80059e4:	40000c00 	.word	0x40000c00
 80059e8:	40010400 	.word	0x40010400
 80059ec:	40014000 	.word	0x40014000
 80059f0:	40001800 	.word	0x40001800

080059f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e03f      	b.n	8005aae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d106      	bne.n	8005a48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7fb fbb4 	bl	80011b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2224      	movs	r2, #36	; 0x24
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68da      	ldr	r2, [r3, #12]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f829 	bl	8005ab8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695a      	ldr	r2, [r3, #20]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005abc:	b0c0      	sub	sp, #256	; 0x100
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad4:	68d9      	ldr	r1, [r3, #12]
 8005ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	ea40 0301 	orr.w	r3, r0, r1
 8005ae0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	431a      	orrs	r2, r3
 8005af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	431a      	orrs	r2, r3
 8005af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b10:	f021 010c 	bic.w	r1, r1, #12
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b1e:	430b      	orrs	r3, r1
 8005b20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b32:	6999      	ldr	r1, [r3, #24]
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	ea40 0301 	orr.w	r3, r0, r1
 8005b3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	4b8f      	ldr	r3, [pc, #572]	; (8005d84 <UART_SetConfig+0x2cc>)
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d005      	beq.n	8005b58 <UART_SetConfig+0xa0>
 8005b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	4b8d      	ldr	r3, [pc, #564]	; (8005d88 <UART_SetConfig+0x2d0>)
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d104      	bne.n	8005b62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b58:	f7ff f81c 	bl	8004b94 <HAL_RCC_GetPCLK2Freq>
 8005b5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b60:	e003      	b.n	8005b6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b62:	f7ff f803 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 8005b66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b6e:	69db      	ldr	r3, [r3, #28]
 8005b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b74:	f040 810c 	bne.w	8005d90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b8a:	4622      	mov	r2, r4
 8005b8c:	462b      	mov	r3, r5
 8005b8e:	1891      	adds	r1, r2, r2
 8005b90:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b92:	415b      	adcs	r3, r3
 8005b94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b9a:	4621      	mov	r1, r4
 8005b9c:	eb12 0801 	adds.w	r8, r2, r1
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	eb43 0901 	adc.w	r9, r3, r1
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	f04f 0300 	mov.w	r3, #0
 8005bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bba:	4690      	mov	r8, r2
 8005bbc:	4699      	mov	r9, r3
 8005bbe:	4623      	mov	r3, r4
 8005bc0:	eb18 0303 	adds.w	r3, r8, r3
 8005bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bc8:	462b      	mov	r3, r5
 8005bca:	eb49 0303 	adc.w	r3, r9, r3
 8005bce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005be2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005be6:	460b      	mov	r3, r1
 8005be8:	18db      	adds	r3, r3, r3
 8005bea:	653b      	str	r3, [r7, #80]	; 0x50
 8005bec:	4613      	mov	r3, r2
 8005bee:	eb42 0303 	adc.w	r3, r2, r3
 8005bf2:	657b      	str	r3, [r7, #84]	; 0x54
 8005bf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005bf8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005bfc:	f7fa faf6 	bl	80001ec <__aeabi_uldivmod>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4b61      	ldr	r3, [pc, #388]	; (8005d8c <UART_SetConfig+0x2d4>)
 8005c06:	fba3 2302 	umull	r2, r3, r3, r2
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	011c      	lsls	r4, r3, #4
 8005c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c20:	4642      	mov	r2, r8
 8005c22:	464b      	mov	r3, r9
 8005c24:	1891      	adds	r1, r2, r2
 8005c26:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c28:	415b      	adcs	r3, r3
 8005c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c30:	4641      	mov	r1, r8
 8005c32:	eb12 0a01 	adds.w	sl, r2, r1
 8005c36:	4649      	mov	r1, r9
 8005c38:	eb43 0b01 	adc.w	fp, r3, r1
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	f04f 0300 	mov.w	r3, #0
 8005c44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c50:	4692      	mov	sl, r2
 8005c52:	469b      	mov	fp, r3
 8005c54:	4643      	mov	r3, r8
 8005c56:	eb1a 0303 	adds.w	r3, sl, r3
 8005c5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c5e:	464b      	mov	r3, r9
 8005c60:	eb4b 0303 	adc.w	r3, fp, r3
 8005c64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	18db      	adds	r3, r3, r3
 8005c80:	643b      	str	r3, [r7, #64]	; 0x40
 8005c82:	4613      	mov	r3, r2
 8005c84:	eb42 0303 	adc.w	r3, r2, r3
 8005c88:	647b      	str	r3, [r7, #68]	; 0x44
 8005c8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c92:	f7fa faab 	bl	80001ec <__aeabi_uldivmod>
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	4b3b      	ldr	r3, [pc, #236]	; (8005d8c <UART_SetConfig+0x2d4>)
 8005c9e:	fba3 2301 	umull	r2, r3, r3, r1
 8005ca2:	095b      	lsrs	r3, r3, #5
 8005ca4:	2264      	movs	r2, #100	; 0x64
 8005ca6:	fb02 f303 	mul.w	r3, r2, r3
 8005caa:	1acb      	subs	r3, r1, r3
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005cb2:	4b36      	ldr	r3, [pc, #216]	; (8005d8c <UART_SetConfig+0x2d4>)
 8005cb4:	fba3 2302 	umull	r2, r3, r3, r2
 8005cb8:	095b      	lsrs	r3, r3, #5
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cc0:	441c      	add	r4, r3
 8005cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ccc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005cd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005cd4:	4642      	mov	r2, r8
 8005cd6:	464b      	mov	r3, r9
 8005cd8:	1891      	adds	r1, r2, r2
 8005cda:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cdc:	415b      	adcs	r3, r3
 8005cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ce0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ce4:	4641      	mov	r1, r8
 8005ce6:	1851      	adds	r1, r2, r1
 8005ce8:	6339      	str	r1, [r7, #48]	; 0x30
 8005cea:	4649      	mov	r1, r9
 8005cec:	414b      	adcs	r3, r1
 8005cee:	637b      	str	r3, [r7, #52]	; 0x34
 8005cf0:	f04f 0200 	mov.w	r2, #0
 8005cf4:	f04f 0300 	mov.w	r3, #0
 8005cf8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005cfc:	4659      	mov	r1, fp
 8005cfe:	00cb      	lsls	r3, r1, #3
 8005d00:	4651      	mov	r1, sl
 8005d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d06:	4651      	mov	r1, sl
 8005d08:	00ca      	lsls	r2, r1, #3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4603      	mov	r3, r0
 8005d10:	4642      	mov	r2, r8
 8005d12:	189b      	adds	r3, r3, r2
 8005d14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d18:	464b      	mov	r3, r9
 8005d1a:	460a      	mov	r2, r1
 8005d1c:	eb42 0303 	adc.w	r3, r2, r3
 8005d20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d38:	460b      	mov	r3, r1
 8005d3a:	18db      	adds	r3, r3, r3
 8005d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d3e:	4613      	mov	r3, r2
 8005d40:	eb42 0303 	adc.w	r3, r2, r3
 8005d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d4e:	f7fa fa4d 	bl	80001ec <__aeabi_uldivmod>
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	4b0d      	ldr	r3, [pc, #52]	; (8005d8c <UART_SetConfig+0x2d4>)
 8005d58:	fba3 1302 	umull	r1, r3, r3, r2
 8005d5c:	095b      	lsrs	r3, r3, #5
 8005d5e:	2164      	movs	r1, #100	; 0x64
 8005d60:	fb01 f303 	mul.w	r3, r1, r3
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	3332      	adds	r3, #50	; 0x32
 8005d6a:	4a08      	ldr	r2, [pc, #32]	; (8005d8c <UART_SetConfig+0x2d4>)
 8005d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d70:	095b      	lsrs	r3, r3, #5
 8005d72:	f003 0207 	and.w	r2, r3, #7
 8005d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4422      	add	r2, r4
 8005d7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d80:	e105      	b.n	8005f8e <UART_SetConfig+0x4d6>
 8005d82:	bf00      	nop
 8005d84:	40011000 	.word	0x40011000
 8005d88:	40011400 	.word	0x40011400
 8005d8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d94:	2200      	movs	r2, #0
 8005d96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005da2:	4642      	mov	r2, r8
 8005da4:	464b      	mov	r3, r9
 8005da6:	1891      	adds	r1, r2, r2
 8005da8:	6239      	str	r1, [r7, #32]
 8005daa:	415b      	adcs	r3, r3
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
 8005dae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005db2:	4641      	mov	r1, r8
 8005db4:	1854      	adds	r4, r2, r1
 8005db6:	4649      	mov	r1, r9
 8005db8:	eb43 0501 	adc.w	r5, r3, r1
 8005dbc:	f04f 0200 	mov.w	r2, #0
 8005dc0:	f04f 0300 	mov.w	r3, #0
 8005dc4:	00eb      	lsls	r3, r5, #3
 8005dc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dca:	00e2      	lsls	r2, r4, #3
 8005dcc:	4614      	mov	r4, r2
 8005dce:	461d      	mov	r5, r3
 8005dd0:	4643      	mov	r3, r8
 8005dd2:	18e3      	adds	r3, r4, r3
 8005dd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005dd8:	464b      	mov	r3, r9
 8005dda:	eb45 0303 	adc.w	r3, r5, r3
 8005dde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005dee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005df2:	f04f 0200 	mov.w	r2, #0
 8005df6:	f04f 0300 	mov.w	r3, #0
 8005dfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005dfe:	4629      	mov	r1, r5
 8005e00:	008b      	lsls	r3, r1, #2
 8005e02:	4621      	mov	r1, r4
 8005e04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e08:	4621      	mov	r1, r4
 8005e0a:	008a      	lsls	r2, r1, #2
 8005e0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e10:	f7fa f9ec 	bl	80001ec <__aeabi_uldivmod>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4b60      	ldr	r3, [pc, #384]	; (8005f9c <UART_SetConfig+0x4e4>)
 8005e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e1e:	095b      	lsrs	r3, r3, #5
 8005e20:	011c      	lsls	r4, r3, #4
 8005e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e34:	4642      	mov	r2, r8
 8005e36:	464b      	mov	r3, r9
 8005e38:	1891      	adds	r1, r2, r2
 8005e3a:	61b9      	str	r1, [r7, #24]
 8005e3c:	415b      	adcs	r3, r3
 8005e3e:	61fb      	str	r3, [r7, #28]
 8005e40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e44:	4641      	mov	r1, r8
 8005e46:	1851      	adds	r1, r2, r1
 8005e48:	6139      	str	r1, [r7, #16]
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	414b      	adcs	r3, r1
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	f04f 0300 	mov.w	r3, #0
 8005e58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e5c:	4659      	mov	r1, fp
 8005e5e:	00cb      	lsls	r3, r1, #3
 8005e60:	4651      	mov	r1, sl
 8005e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e66:	4651      	mov	r1, sl
 8005e68:	00ca      	lsls	r2, r1, #3
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4603      	mov	r3, r0
 8005e70:	4642      	mov	r2, r8
 8005e72:	189b      	adds	r3, r3, r2
 8005e74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e78:	464b      	mov	r3, r9
 8005e7a:	460a      	mov	r2, r1
 8005e7c:	eb42 0303 	adc.w	r3, r2, r3
 8005e80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e90:	f04f 0200 	mov.w	r2, #0
 8005e94:	f04f 0300 	mov.w	r3, #0
 8005e98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e9c:	4649      	mov	r1, r9
 8005e9e:	008b      	lsls	r3, r1, #2
 8005ea0:	4641      	mov	r1, r8
 8005ea2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ea6:	4641      	mov	r1, r8
 8005ea8:	008a      	lsls	r2, r1, #2
 8005eaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005eae:	f7fa f99d 	bl	80001ec <__aeabi_uldivmod>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	4b39      	ldr	r3, [pc, #228]	; (8005f9c <UART_SetConfig+0x4e4>)
 8005eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ebc:	095b      	lsrs	r3, r3, #5
 8005ebe:	2164      	movs	r1, #100	; 0x64
 8005ec0:	fb01 f303 	mul.w	r3, r1, r3
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	3332      	adds	r3, #50	; 0x32
 8005eca:	4a34      	ldr	r2, [pc, #208]	; (8005f9c <UART_SetConfig+0x4e4>)
 8005ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed0:	095b      	lsrs	r3, r3, #5
 8005ed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ed6:	441c      	add	r4, r3
 8005ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005edc:	2200      	movs	r2, #0
 8005ede:	673b      	str	r3, [r7, #112]	; 0x70
 8005ee0:	677a      	str	r2, [r7, #116]	; 0x74
 8005ee2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ee6:	4642      	mov	r2, r8
 8005ee8:	464b      	mov	r3, r9
 8005eea:	1891      	adds	r1, r2, r2
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	415b      	adcs	r3, r3
 8005ef0:	60fb      	str	r3, [r7, #12]
 8005ef2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ef6:	4641      	mov	r1, r8
 8005ef8:	1851      	adds	r1, r2, r1
 8005efa:	6039      	str	r1, [r7, #0]
 8005efc:	4649      	mov	r1, r9
 8005efe:	414b      	adcs	r3, r1
 8005f00:	607b      	str	r3, [r7, #4]
 8005f02:	f04f 0200 	mov.w	r2, #0
 8005f06:	f04f 0300 	mov.w	r3, #0
 8005f0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f0e:	4659      	mov	r1, fp
 8005f10:	00cb      	lsls	r3, r1, #3
 8005f12:	4651      	mov	r1, sl
 8005f14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f18:	4651      	mov	r1, sl
 8005f1a:	00ca      	lsls	r2, r1, #3
 8005f1c:	4610      	mov	r0, r2
 8005f1e:	4619      	mov	r1, r3
 8005f20:	4603      	mov	r3, r0
 8005f22:	4642      	mov	r2, r8
 8005f24:	189b      	adds	r3, r3, r2
 8005f26:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f28:	464b      	mov	r3, r9
 8005f2a:	460a      	mov	r2, r1
 8005f2c:	eb42 0303 	adc.w	r3, r2, r3
 8005f30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	663b      	str	r3, [r7, #96]	; 0x60
 8005f3c:	667a      	str	r2, [r7, #100]	; 0x64
 8005f3e:	f04f 0200 	mov.w	r2, #0
 8005f42:	f04f 0300 	mov.w	r3, #0
 8005f46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f4a:	4649      	mov	r1, r9
 8005f4c:	008b      	lsls	r3, r1, #2
 8005f4e:	4641      	mov	r1, r8
 8005f50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f54:	4641      	mov	r1, r8
 8005f56:	008a      	lsls	r2, r1, #2
 8005f58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f5c:	f7fa f946 	bl	80001ec <__aeabi_uldivmod>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4b0d      	ldr	r3, [pc, #52]	; (8005f9c <UART_SetConfig+0x4e4>)
 8005f66:	fba3 1302 	umull	r1, r3, r3, r2
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	2164      	movs	r1, #100	; 0x64
 8005f6e:	fb01 f303 	mul.w	r3, r1, r3
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	3332      	adds	r3, #50	; 0x32
 8005f78:	4a08      	ldr	r2, [pc, #32]	; (8005f9c <UART_SetConfig+0x4e4>)
 8005f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	f003 020f 	and.w	r2, r3, #15
 8005f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4422      	add	r2, r4
 8005f8c:	609a      	str	r2, [r3, #8]
}
 8005f8e:	bf00      	nop
 8005f90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f94:	46bd      	mov	sp, r7
 8005f96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f9a:	bf00      	nop
 8005f9c:	51eb851f 	.word	0x51eb851f

08005fa0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d123      	bne.n	8005ffa <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005fba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	6851      	ldr	r1, [r2, #4]
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	6892      	ldr	r2, [r2, #8]
 8005fc6:	4311      	orrs	r1, r2
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	68d2      	ldr	r2, [r2, #12]
 8005fcc:	4311      	orrs	r1, r2
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	6912      	ldr	r2, [r2, #16]
 8005fd2:	4311      	orrs	r1, r2
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	6952      	ldr	r2, [r2, #20]
 8005fd8:	4311      	orrs	r1, r2
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	6992      	ldr	r2, [r2, #24]
 8005fde:	4311      	orrs	r1, r2
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	69d2      	ldr	r2, [r2, #28]
 8005fe4:	4311      	orrs	r1, r2
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	6a12      	ldr	r2, [r2, #32]
 8005fea:	4311      	orrs	r1, r2
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	e028      	b.n	800604c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	69d9      	ldr	r1, [r3, #28]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	4319      	orrs	r1, r3
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	430b      	orrs	r3, r1
 8006012:	431a      	orrs	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006020:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	6851      	ldr	r1, [r2, #4]
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	6892      	ldr	r2, [r2, #8]
 800602c:	4311      	orrs	r1, r2
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	68d2      	ldr	r2, [r2, #12]
 8006032:	4311      	orrs	r1, r2
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	6912      	ldr	r2, [r2, #16]
 8006038:	4311      	orrs	r1, r2
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	6952      	ldr	r2, [r2, #20]
 800603e:	4311      	orrs	r1, r2
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	6992      	ldr	r2, [r2, #24]
 8006044:	430a      	orrs	r2, r1
 8006046:	431a      	orrs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800605a:	b480      	push	{r7}
 800605c:	b085      	sub	sp, #20
 800605e:	af00      	add	r7, sp, #0
 8006060:	60f8      	str	r0, [r7, #12]
 8006062:	60b9      	str	r1, [r7, #8]
 8006064:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d128      	bne.n	80060be <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	1e59      	subs	r1, r3, #1
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	3b01      	subs	r3, #1
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	4319      	orrs	r1, r3
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	3b01      	subs	r3, #1
 800608a:	021b      	lsls	r3, r3, #8
 800608c:	4319      	orrs	r1, r3
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	3b01      	subs	r3, #1
 8006094:	031b      	lsls	r3, r3, #12
 8006096:	4319      	orrs	r1, r3
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	3b01      	subs	r3, #1
 800609e:	041b      	lsls	r3, r3, #16
 80060a0:	4319      	orrs	r1, r3
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	051b      	lsls	r3, r3, #20
 80060aa:	4319      	orrs	r1, r3
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	061b      	lsls	r3, r3, #24
 80060b4:	430b      	orrs	r3, r1
 80060b6:	431a      	orrs	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	609a      	str	r2, [r3, #8]
 80060bc:	e02f      	b.n	800611e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	68d2      	ldr	r2, [r2, #12]
 80060ce:	3a01      	subs	r2, #1
 80060d0:	0311      	lsls	r1, r2, #12
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	6952      	ldr	r2, [r2, #20]
 80060d6:	3a01      	subs	r2, #1
 80060d8:	0512      	lsls	r2, r2, #20
 80060da:	430a      	orrs	r2, r1
 80060dc:	431a      	orrs	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	1e59      	subs	r1, r3, #1
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	4319      	orrs	r1, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	3b01      	subs	r3, #1
 8006100:	021b      	lsls	r3, r3, #8
 8006102:	4319      	orrs	r1, r3
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	3b01      	subs	r3, #1
 800610a:	041b      	lsls	r3, r3, #16
 800610c:	4319      	orrs	r1, r3
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	3b01      	subs	r3, #1
 8006114:	061b      	lsls	r3, r3, #24
 8006116:	430b      	orrs	r3, r1
 8006118:	431a      	orrs	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800612c:	b084      	sub	sp, #16
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	f107 001c 	add.w	r0, r7, #28
 800613a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	2b01      	cmp	r3, #1
 8006142:	d122      	bne.n	800618a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006148:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800616c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800616e:	2b01      	cmp	r3, #1
 8006170:	d105      	bne.n	800617e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f9c0 	bl	8006504 <USB_CoreReset>
 8006184:	4603      	mov	r3, r0
 8006186:	73fb      	strb	r3, [r7, #15]
 8006188:	e01a      	b.n	80061c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f9b4 	bl	8006504 <USB_CoreReset>
 800619c:	4603      	mov	r3, r0
 800619e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d106      	bne.n	80061b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	639a      	str	r2, [r3, #56]	; 0x38
 80061b2:	e005      	b.n	80061c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d10b      	bne.n	80061de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f043 0206 	orr.w	r2, r3, #6
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f043 0220 	orr.w	r2, r3, #32
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061de:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061ea:	b004      	add	sp, #16
 80061ec:	4770      	bx	lr

080061ee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f043 0201 	orr.w	r2, r3, #1
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f023 0201 	bic.w	r2, r3, #1
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b084      	sub	sp, #16
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	460b      	mov	r3, r1
 800623c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800624e:	78fb      	ldrb	r3, [r7, #3]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d115      	bne.n	8006280 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006260:	2001      	movs	r0, #1
 8006262:	f7fb fa0d 	bl	8001680 <HAL_Delay>
      ms++;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3301      	adds	r3, #1
 800626a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f93a 	bl	80064e6 <USB_GetMode>
 8006272:	4603      	mov	r3, r0
 8006274:	2b01      	cmp	r3, #1
 8006276:	d01e      	beq.n	80062b6 <USB_SetCurrentMode+0x84>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b31      	cmp	r3, #49	; 0x31
 800627c:	d9f0      	bls.n	8006260 <USB_SetCurrentMode+0x2e>
 800627e:	e01a      	b.n	80062b6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006280:	78fb      	ldrb	r3, [r7, #3]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d115      	bne.n	80062b2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006292:	2001      	movs	r0, #1
 8006294:	f7fb f9f4 	bl	8001680 <HAL_Delay>
      ms++;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3301      	adds	r3, #1
 800629c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f921 	bl	80064e6 <USB_GetMode>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <USB_SetCurrentMode+0x84>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b31      	cmp	r3, #49	; 0x31
 80062ae:	d9f0      	bls.n	8006292 <USB_SetCurrentMode+0x60>
 80062b0:	e001      	b.n	80062b6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e005      	b.n	80062c2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b32      	cmp	r3, #50	; 0x32
 80062ba:	d101      	bne.n	80062c0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e000      	b.n	80062c2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3301      	adds	r3, #1
 80062de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4a13      	ldr	r2, [pc, #76]	; (8006330 <USB_FlushTxFifo+0x64>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d901      	bls.n	80062ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e01b      	b.n	8006324 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	daf2      	bge.n	80062da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	019b      	lsls	r3, r3, #6
 80062fc:	f043 0220 	orr.w	r2, r3, #32
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	3301      	adds	r3, #1
 8006308:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	4a08      	ldr	r2, [pc, #32]	; (8006330 <USB_FlushTxFifo+0x64>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d901      	bls.n	8006316 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e006      	b.n	8006324 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b20      	cmp	r3, #32
 8006320:	d0f0      	beq.n	8006304 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	00030d40 	.word	0x00030d40

08006334 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	3301      	adds	r3, #1
 8006344:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4a11      	ldr	r2, [pc, #68]	; (8006390 <USB_FlushRxFifo+0x5c>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d901      	bls.n	8006352 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e018      	b.n	8006384 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	daf2      	bge.n	8006340 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2210      	movs	r2, #16
 8006362:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3301      	adds	r3, #1
 8006368:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	4a08      	ldr	r2, [pc, #32]	; (8006390 <USB_FlushRxFifo+0x5c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d901      	bls.n	8006376 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e006      	b.n	8006384 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f003 0310 	and.w	r3, r3, #16
 800637e:	2b10      	cmp	r3, #16
 8006380:	d0f0      	beq.n	8006364 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	00030d40 	.word	0x00030d40

08006394 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006394:	b480      	push	{r7}
 8006396:	b089      	sub	sp, #36	; 0x24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	4611      	mov	r1, r2
 80063a0:	461a      	mov	r2, r3
 80063a2:	460b      	mov	r3, r1
 80063a4:	71fb      	strb	r3, [r7, #7]
 80063a6:	4613      	mov	r3, r2
 80063a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80063b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d123      	bne.n	8006402 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80063ba:	88bb      	ldrh	r3, [r7, #4]
 80063bc:	3303      	adds	r3, #3
 80063be:	089b      	lsrs	r3, r3, #2
 80063c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80063c2:	2300      	movs	r3, #0
 80063c4:	61bb      	str	r3, [r7, #24]
 80063c6:	e018      	b.n	80063fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063c8:	79fb      	ldrb	r3, [r7, #7]
 80063ca:	031a      	lsls	r2, r3, #12
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d4:	461a      	mov	r2, r3
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	3301      	adds	r3, #1
 80063e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	3301      	adds	r3, #1
 80063e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	3301      	adds	r3, #1
 80063ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	3301      	adds	r3, #1
 80063f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	3301      	adds	r3, #1
 80063f8:	61bb      	str	r3, [r7, #24]
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d3e2      	bcc.n	80063c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3724      	adds	r7, #36	; 0x24
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006410:	b480      	push	{r7}
 8006412:	b08b      	sub	sp, #44	; 0x2c
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	4613      	mov	r3, r2
 800641c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006426:	88fb      	ldrh	r3, [r7, #6]
 8006428:	089b      	lsrs	r3, r3, #2
 800642a:	b29b      	uxth	r3, r3
 800642c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800642e:	88fb      	ldrh	r3, [r7, #6]
 8006430:	f003 0303 	and.w	r3, r3, #3
 8006434:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006436:	2300      	movs	r3, #0
 8006438:	623b      	str	r3, [r7, #32]
 800643a:	e014      	b.n	8006466 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	601a      	str	r2, [r3, #0]
    pDest++;
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	3301      	adds	r3, #1
 800644c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	3301      	adds	r3, #1
 8006452:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	3301      	adds	r3, #1
 8006458:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	3301      	adds	r3, #1
 800645e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	3301      	adds	r3, #1
 8006464:	623b      	str	r3, [r7, #32]
 8006466:	6a3a      	ldr	r2, [r7, #32]
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	429a      	cmp	r2, r3
 800646c:	d3e6      	bcc.n	800643c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800646e:	8bfb      	ldrh	r3, [r7, #30]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d01e      	beq.n	80064b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800647e:	461a      	mov	r2, r3
 8006480:	f107 0310 	add.w	r3, r7, #16
 8006484:	6812      	ldr	r2, [r2, #0]
 8006486:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	b2db      	uxtb	r3, r3
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	fa22 f303 	lsr.w	r3, r2, r3
 8006494:	b2da      	uxtb	r2, r3
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	701a      	strb	r2, [r3, #0]
      i++;
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	3301      	adds	r3, #1
 800649e:	623b      	str	r3, [r7, #32]
      pDest++;
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	3301      	adds	r3, #1
 80064a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80064a6:	8bfb      	ldrh	r3, [r7, #30]
 80064a8:	3b01      	subs	r3, #1
 80064aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064ac:	8bfb      	ldrh	r3, [r7, #30]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1ea      	bne.n	8006488 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	372c      	adds	r7, #44	; 0x2c
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4013      	ands	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80064d8:	68fb      	ldr	r3, [r7, #12]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b083      	sub	sp, #12
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	f003 0301 	and.w	r3, r3, #1
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
	...

08006504 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	3301      	adds	r3, #1
 8006514:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4a13      	ldr	r2, [pc, #76]	; (8006568 <USB_CoreReset+0x64>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d901      	bls.n	8006522 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e01b      	b.n	800655a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	daf2      	bge.n	8006510 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f043 0201 	orr.w	r2, r3, #1
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	3301      	adds	r3, #1
 800653e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4a09      	ldr	r2, [pc, #36]	; (8006568 <USB_CoreReset+0x64>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d901      	bls.n	800654c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e006      	b.n	800655a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b01      	cmp	r3, #1
 8006556:	d0f0      	beq.n	800653a <USB_CoreReset+0x36>

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	00030d40 	.word	0x00030d40

0800656c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800656c:	b084      	sub	sp, #16
 800656e:	b580      	push	{r7, lr}
 8006570:	b086      	sub	sp, #24
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800657a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800658c:	461a      	mov	r2, r3
 800658e:	2300      	movs	r3, #0
 8006590:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006596:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ae:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d018      	beq.n	80065f4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80065c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d10a      	bne.n	80065de <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065d6:	f043 0304 	orr.w	r3, r3, #4
 80065da:	6013      	str	r3, [r2, #0]
 80065dc:	e014      	b.n	8006608 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065ec:	f023 0304 	bic.w	r3, r3, #4
 80065f0:	6013      	str	r3, [r2, #0]
 80065f2:	e009      	b.n	8006608 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006602:	f023 0304 	bic.w	r3, r3, #4
 8006606:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006608:	2110      	movs	r1, #16
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7ff fe5e 	bl	80062cc <USB_FlushTxFifo>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7ff fe8a 	bl	8006334 <USB_FlushRxFifo>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800662a:	2300      	movs	r3, #0
 800662c:	613b      	str	r3, [r7, #16]
 800662e:	e015      	b.n	800665c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4413      	add	r3, r2
 8006638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800663c:	461a      	mov	r2, r3
 800663e:	f04f 33ff 	mov.w	r3, #4294967295
 8006642:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4413      	add	r3, r2
 800664c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006650:	461a      	mov	r2, r3
 8006652:	2300      	movs	r3, #0
 8006654:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	3301      	adds	r3, #1
 800665a:	613b      	str	r3, [r7, #16]
 800665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	429a      	cmp	r2, r3
 8006662:	d3e5      	bcc.n	8006630 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f04f 32ff 	mov.w	r2, #4294967295
 8006670:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00b      	beq.n	8006696 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006684:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a13      	ldr	r2, [pc, #76]	; (80066d8 <USB_HostInit+0x16c>)
 800668a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a13      	ldr	r2, [pc, #76]	; (80066dc <USB_HostInit+0x170>)
 8006690:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006694:	e009      	b.n	80066aa <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2280      	movs	r2, #128	; 0x80
 800669a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a10      	ldr	r2, [pc, #64]	; (80066e0 <USB_HostInit+0x174>)
 80066a0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a0f      	ldr	r2, [pc, #60]	; (80066e4 <USB_HostInit+0x178>)
 80066a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d105      	bne.n	80066bc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	f043 0210 	orr.w	r2, r3, #16
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	699a      	ldr	r2, [r3, #24]
 80066c0:	4b09      	ldr	r3, [pc, #36]	; (80066e8 <USB_HostInit+0x17c>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80066c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066d4:	b004      	add	sp, #16
 80066d6:	4770      	bx	lr
 80066d8:	01000200 	.word	0x01000200
 80066dc:	00e00300 	.word	0x00e00300
 80066e0:	00600080 	.word	0x00600080
 80066e4:	004000e0 	.word	0x004000e0
 80066e8:	a3200008 	.word	0xa3200008

080066ec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	460b      	mov	r3, r1
 80066f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800670a:	f023 0303 	bic.w	r3, r3, #3
 800670e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	68f9      	ldr	r1, [r7, #12]
 8006720:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006724:	4313      	orrs	r3, r2
 8006726:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006728:	78fb      	ldrb	r3, [r7, #3]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d107      	bne.n	800673e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006734:	461a      	mov	r2, r3
 8006736:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800673a:	6053      	str	r3, [r2, #4]
 800673c:	e009      	b.n	8006752 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800673e:	78fb      	ldrb	r3, [r7, #3]
 8006740:	2b02      	cmp	r3, #2
 8006742:	d106      	bne.n	8006752 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800674a:	461a      	mov	r2, r3
 800674c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006750:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006780:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800678a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800678e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006790:	2064      	movs	r0, #100	; 0x64
 8006792:	f7fa ff75 	bl	8001680 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800679e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067a2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80067a4:	200a      	movs	r0, #10
 80067a6:	f7fa ff6b 	bl	8001680 <HAL_Delay>

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80067d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d109      	bne.n	80067f8 <USB_DriveVbus+0x44>
 80067e4:	78fb      	ldrb	r3, [r7, #3]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d106      	bne.n	80067f8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80067f6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006802:	d109      	bne.n	8006818 <USB_DriveVbus+0x64>
 8006804:	78fb      	ldrb	r3, [r7, #3]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d106      	bne.n	8006818 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006816:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006826:	b480      	push	{r7}
 8006828:	b085      	sub	sp, #20
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	0c5b      	lsrs	r3, r3, #17
 8006844:	f003 0303 	and.w	r3, r3, #3
}
 8006848:	4618      	mov	r0, r3
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	b29b      	uxth	r3, r3
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
	...

08006878 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b088      	sub	sp, #32
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	4608      	mov	r0, r1
 8006882:	4611      	mov	r1, r2
 8006884:	461a      	mov	r2, r3
 8006886:	4603      	mov	r3, r0
 8006888:	70fb      	strb	r3, [r7, #3]
 800688a:	460b      	mov	r3, r1
 800688c:	70bb      	strb	r3, [r7, #2]
 800688e:	4613      	mov	r3, r2
 8006890:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800689a:	78fb      	ldrb	r3, [r7, #3]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a6:	461a      	mov	r2, r3
 80068a8:	f04f 33ff 	mov.w	r3, #4294967295
 80068ac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80068ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	d87e      	bhi.n	80069b4 <USB_HC_Init+0x13c>
 80068b6:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <USB_HC_Init+0x44>)
 80068b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068bc:	080068cd 	.word	0x080068cd
 80068c0:	08006977 	.word	0x08006977
 80068c4:	080068cd 	.word	0x080068cd
 80068c8:	08006939 	.word	0x08006939
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068cc:	78fb      	ldrb	r3, [r7, #3]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d8:	461a      	mov	r2, r3
 80068da:	f240 439d 	movw	r3, #1181	; 0x49d
 80068de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80068e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	da10      	bge.n	800690a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80068e8:	78fb      	ldrb	r3, [r7, #3]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	78fa      	ldrb	r2, [r7, #3]
 80068f8:	0151      	lsls	r1, r2, #5
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	440a      	add	r2, r1
 80068fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006906:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006908:	e057      	b.n	80069ba <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006912:	2b00      	cmp	r3, #0
 8006914:	d051      	beq.n	80069ba <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006916:	78fb      	ldrb	r3, [r7, #3]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	4413      	add	r3, r2
 800691e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	78fa      	ldrb	r2, [r7, #3]
 8006926:	0151      	lsls	r1, r2, #5
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	440a      	add	r2, r1
 800692c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006930:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006934:	60d3      	str	r3, [r2, #12]
      break;
 8006936:	e040      	b.n	80069ba <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006938:	78fb      	ldrb	r3, [r7, #3]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	4413      	add	r3, r2
 8006940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006944:	461a      	mov	r2, r3
 8006946:	f240 639d 	movw	r3, #1693	; 0x69d
 800694a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800694c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006950:	2b00      	cmp	r3, #0
 8006952:	da34      	bge.n	80069be <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	4413      	add	r3, r2
 800695c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	78fa      	ldrb	r2, [r7, #3]
 8006964:	0151      	lsls	r1, r2, #5
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	440a      	add	r2, r1
 800696a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800696e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006972:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006974:	e023      	b.n	80069be <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006976:	78fb      	ldrb	r3, [r7, #3]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	4413      	add	r3, r2
 800697e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006982:	461a      	mov	r2, r3
 8006984:	f240 2325 	movw	r3, #549	; 0x225
 8006988:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800698a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800698e:	2b00      	cmp	r3, #0
 8006990:	da17      	bge.n	80069c2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006992:	78fb      	ldrb	r3, [r7, #3]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	4413      	add	r3, r2
 800699a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	78fa      	ldrb	r2, [r7, #3]
 80069a2:	0151      	lsls	r1, r2, #5
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	440a      	add	r2, r1
 80069a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069ac:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80069b0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80069b2:	e006      	b.n	80069c2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	77fb      	strb	r3, [r7, #31]
      break;
 80069b8:	e004      	b.n	80069c4 <USB_HC_Init+0x14c>
      break;
 80069ba:	bf00      	nop
 80069bc:	e002      	b.n	80069c4 <USB_HC_Init+0x14c>
      break;
 80069be:	bf00      	nop
 80069c0:	e000      	b.n	80069c4 <USB_HC_Init+0x14c>
      break;
 80069c2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80069c4:	78fb      	ldrb	r3, [r7, #3]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	78fa      	ldrb	r2, [r7, #3]
 80069d4:	0151      	lsls	r1, r2, #5
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	440a      	add	r2, r1
 80069da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069de:	f043 0302 	orr.w	r3, r3, #2
 80069e2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ea:	699a      	ldr	r2, [r3, #24]
 80069ec:	78fb      	ldrb	r3, [r7, #3]
 80069ee:	f003 030f 	and.w	r3, r3, #15
 80069f2:	2101      	movs	r1, #1
 80069f4:	fa01 f303 	lsl.w	r3, r1, r3
 80069f8:	6939      	ldr	r1, [r7, #16]
 80069fa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80069fe:	4313      	orrs	r3, r2
 8006a00:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006a0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	da03      	bge.n	8006a1e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a1a:	61bb      	str	r3, [r7, #24]
 8006a1c:	e001      	b.n	8006a22 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7ff feff 	bl	8006826 <USB_GetHostSpeed>
 8006a28:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006a2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d106      	bne.n	8006a40 <USB_HC_Init+0x1c8>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d003      	beq.n	8006a40 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006a38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	e001      	b.n	8006a44 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a44:	787b      	ldrb	r3, [r7, #1]
 8006a46:	059b      	lsls	r3, r3, #22
 8006a48:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a4c:	78bb      	ldrb	r3, [r7, #2]
 8006a4e:	02db      	lsls	r3, r3, #11
 8006a50:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a54:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a5a:	049b      	lsls	r3, r3, #18
 8006a5c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a60:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a62:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006a64:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a68:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a6e:	78fb      	ldrb	r3, [r7, #3]
 8006a70:	0159      	lsls	r1, r3, #5
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	440b      	add	r3, r1
 8006a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a80:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006a82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d003      	beq.n	8006a92 <USB_HC_Init+0x21a>
 8006a8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d10f      	bne.n	8006ab2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006a92:	78fb      	ldrb	r3, [r7, #3]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	78fa      	ldrb	r2, [r7, #3]
 8006aa2:	0151      	lsls	r1, r2, #5
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	440a      	add	r2, r1
 8006aa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ab0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006ab2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3720      	adds	r7, #32
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08c      	sub	sp, #48	; 0x30
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	785b      	ldrb	r3, [r3, #1]
 8006ad2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ad8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d02d      	beq.n	8006b42 <USB_HC_StartXfer+0x86>
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	791b      	ldrb	r3, [r3, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d129      	bne.n	8006b42 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006aee:	79fb      	ldrb	r3, [r7, #7]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d117      	bne.n	8006b24 <USB_HC_StartXfer+0x68>
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	79db      	ldrb	r3, [r3, #7]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <USB_HC_StartXfer+0x48>
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	79db      	ldrb	r3, [r3, #7]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d10f      	bne.n	8006b24 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	015a      	lsls	r2, r3, #5
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	69fa      	ldr	r2, [r7, #28]
 8006b14:	0151      	lsls	r1, r2, #5
 8006b16:	6a3a      	ldr	r2, [r7, #32]
 8006b18:	440a      	add	r2, r1
 8006b1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b22:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006b24:	79fb      	ldrb	r3, [r7, #7]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10b      	bne.n	8006b42 <USB_HC_StartXfer+0x86>
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	795b      	ldrb	r3, [r3, #5]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d107      	bne.n	8006b42 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	785b      	ldrb	r3, [r3, #1]
 8006b36:	4619      	mov	r1, r3
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 fa0f 	bl	8006f5c <USB_DoPing>
      return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	e0f8      	b.n	8006d34 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d018      	beq.n	8006b7c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	8912      	ldrh	r2, [r2, #8]
 8006b52:	4413      	add	r3, r2
 8006b54:	3b01      	subs	r3, #1
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	8912      	ldrh	r2, [r2, #8]
 8006b5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b5e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006b60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b62:	8b7b      	ldrh	r3, [r7, #26]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d90b      	bls.n	8006b80 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006b68:	8b7b      	ldrh	r3, [r7, #26]
 8006b6a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	8912      	ldrh	r2, [r2, #8]
 8006b72:	fb03 f202 	mul.w	r2, r3, r2
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	611a      	str	r2, [r3, #16]
 8006b7a:	e001      	b.n	8006b80 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	78db      	ldrb	r3, [r3, #3]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d007      	beq.n	8006b98 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	8912      	ldrh	r2, [r2, #8]
 8006b8e:	fb03 f202 	mul.w	r2, r3, r2
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	611a      	str	r2, [r3, #16]
 8006b96:	e003      	b.n	8006ba0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	695a      	ldr	r2, [r3, #20]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ba8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006baa:	04d9      	lsls	r1, r3, #19
 8006bac:	4b63      	ldr	r3, [pc, #396]	; (8006d3c <USB_HC_StartXfer+0x280>)
 8006bae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bb0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	7a9b      	ldrb	r3, [r3, #10]
 8006bb6:	075b      	lsls	r3, r3, #29
 8006bb8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bbc:	69f9      	ldr	r1, [r7, #28]
 8006bbe:	0148      	lsls	r0, r1, #5
 8006bc0:	6a39      	ldr	r1, [r7, #32]
 8006bc2:	4401      	add	r1, r0
 8006bc4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006bc8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006bcc:	79fb      	ldrb	r3, [r7, #7]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d009      	beq.n	8006be6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	68d9      	ldr	r1, [r3, #12]
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be2:	460a      	mov	r2, r1
 8006be4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	bf0c      	ite	eq
 8006bf6:	2301      	moveq	r3, #1
 8006bf8:	2300      	movne	r3, #0
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	0151      	lsls	r1, r2, #5
 8006c10:	6a3a      	ldr	r2, [r7, #32]
 8006c12:	440a      	add	r2, r1
 8006c14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c1c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	7e7b      	ldrb	r3, [r7, #25]
 8006c2e:	075b      	lsls	r3, r3, #29
 8006c30:	69f9      	ldr	r1, [r7, #28]
 8006c32:	0148      	lsls	r0, r1, #5
 8006c34:	6a39      	ldr	r1, [r7, #32]
 8006c36:	4401      	add	r1, r0
 8006c38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c56:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	78db      	ldrb	r3, [r3, #3]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d004      	beq.n	8006c6a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c66:	613b      	str	r3, [r7, #16]
 8006c68:	e003      	b.n	8006c72 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c70:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c78:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c86:	461a      	mov	r2, r3
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	e04e      	b.n	8006d34 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	78db      	ldrb	r3, [r3, #3]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d149      	bne.n	8006d32 <USB_HC_StartXfer+0x276>
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d045      	beq.n	8006d32 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	79db      	ldrb	r3, [r3, #7]
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d830      	bhi.n	8006d10 <USB_HC_StartXfer+0x254>
 8006cae:	a201      	add	r2, pc, #4	; (adr r2, 8006cb4 <USB_HC_StartXfer+0x1f8>)
 8006cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb4:	08006cc5 	.word	0x08006cc5
 8006cb8:	08006ce9 	.word	0x08006ce9
 8006cbc:	08006cc5 	.word	0x08006cc5
 8006cc0:	08006ce9 	.word	0x08006ce9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	3303      	adds	r3, #3
 8006cca:	089b      	lsrs	r3, r3, #2
 8006ccc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006cce:	8afa      	ldrh	r2, [r7, #22]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d91c      	bls.n	8006d14 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	f043 0220 	orr.w	r2, r3, #32
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006ce6:	e015      	b.n	8006d14 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	3303      	adds	r3, #3
 8006cee:	089b      	lsrs	r3, r3, #2
 8006cf0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006cf2:	8afa      	ldrh	r2, [r7, #22]
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d90a      	bls.n	8006d18 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006d0e:	e003      	b.n	8006d18 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006d10:	bf00      	nop
 8006d12:	e002      	b.n	8006d1a <USB_HC_StartXfer+0x25e>
        break;
 8006d14:	bf00      	nop
 8006d16:	e000      	b.n	8006d1a <USB_HC_StartXfer+0x25e>
        break;
 8006d18:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	68d9      	ldr	r1, [r3, #12]
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	785a      	ldrb	r2, [r3, #1]
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	2000      	movs	r0, #0
 8006d2a:	9000      	str	r0, [sp, #0]
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f7ff fb31 	bl	8006394 <USB_WritePacket>
  }

  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3728      	adds	r7, #40	; 0x28
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	1ff80000 	.word	0x1ff80000

08006d40 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	b29b      	uxth	r3, r3
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b089      	sub	sp, #36	; 0x24
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006d72:	78fb      	ldrb	r3, [r7, #3]
 8006d74:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006d76:	2300      	movs	r3, #0
 8006d78:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	0c9b      	lsrs	r3, r3, #18
 8006d8a:	f003 0303 	and.w	r3, r3, #3
 8006d8e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	0fdb      	lsrs	r3, r3, #31
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f003 0320 	and.w	r3, r3, #32
 8006dae:	2b20      	cmp	r3, #32
 8006db0:	d104      	bne.n	8006dbc <USB_HC_Halt+0x5a>
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	e0c8      	b.n	8006f4e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <USB_HC_Halt+0x66>
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d163      	bne.n	8006e90 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	0151      	lsls	r1, r2, #5
 8006dda:	69fa      	ldr	r2, [r7, #28]
 8006ddc:	440a      	add	r2, r1
 8006dde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006de2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006de6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f003 0320 	and.w	r3, r3, #32
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f040 80ab 	bne.w	8006f4c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d133      	bne.n	8006e6a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	0151      	lsls	r1, r2, #5
 8006e14:	69fa      	ldr	r2, [r7, #28]
 8006e16:	440a      	add	r2, r1
 8006e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e20:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	0151      	lsls	r1, r2, #5
 8006e34:	69fa      	ldr	r2, [r7, #28]
 8006e36:	440a      	add	r2, r1
 8006e38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e40:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	3301      	adds	r3, #1
 8006e46:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e4e:	d81d      	bhi.n	8006e8c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e66:	d0ec      	beq.n	8006e42 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e68:	e070      	b.n	8006f4c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	0151      	lsls	r1, r2, #5
 8006e7c:	69fa      	ldr	r2, [r7, #28]
 8006e7e:	440a      	add	r2, r1
 8006e80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e88:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e8a:	e05f      	b.n	8006f4c <USB_HC_Halt+0x1ea>
            break;
 8006e8c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e8e:	e05d      	b.n	8006f4c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	0151      	lsls	r1, r2, #5
 8006ea2:	69fa      	ldr	r2, [r7, #28]
 8006ea4:	440a      	add	r2, r1
 8006ea6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006eae:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d133      	bne.n	8006f28 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	69ba      	ldr	r2, [r7, #24]
 8006ed0:	0151      	lsls	r1, r2, #5
 8006ed2:	69fa      	ldr	r2, [r7, #28]
 8006ed4:	440a      	add	r2, r1
 8006ed6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ede:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	0151      	lsls	r1, r2, #5
 8006ef2:	69fa      	ldr	r2, [r7, #28]
 8006ef4:	440a      	add	r2, r1
 8006ef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006efa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006efe:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	3301      	adds	r3, #1
 8006f04:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f0c:	d81d      	bhi.n	8006f4a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f24:	d0ec      	beq.n	8006f00 <USB_HC_Halt+0x19e>
 8006f26:	e011      	b.n	8006f4c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	0151      	lsls	r1, r2, #5
 8006f3a:	69fa      	ldr	r2, [r7, #28]
 8006f3c:	440a      	add	r2, r1
 8006f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	e000      	b.n	8006f4c <USB_HC_Halt+0x1ea>
          break;
 8006f4a:	bf00      	nop
    }
  }

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3724      	adds	r7, #36	; 0x24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
	...

08006f5c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006f6c:	78fb      	ldrb	r3, [r7, #3]
 8006f6e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006f70:	2301      	movs	r3, #1
 8006f72:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	04da      	lsls	r2, r3, #19
 8006f78:	4b15      	ldr	r3, [pc, #84]	; (8006fd0 <USB_DoPing+0x74>)
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	0151      	lsls	r1, r2, #5
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	440a      	add	r2, r1
 8006f84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f8c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fa4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fba:	461a      	mov	r2, r3
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	371c      	adds	r7, #28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	1ff80000 	.word	0x1ff80000

08006fd4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b088      	sub	sp, #32
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff f911 	bl	8006210 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fee:	2110      	movs	r1, #16
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7ff f96b 	bl	80062cc <USB_FlushTxFifo>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff f997 	bl	8006334 <USB_FlushRxFifo>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007010:	2300      	movs	r3, #0
 8007012:	61bb      	str	r3, [r7, #24]
 8007014:	e01f      	b.n	8007056 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	4413      	add	r3, r2
 800701e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800702c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007034:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800703c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	4413      	add	r3, r2
 8007046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800704a:	461a      	mov	r2, r3
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	3301      	adds	r3, #1
 8007054:	61bb      	str	r3, [r7, #24]
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	2b0f      	cmp	r3, #15
 800705a:	d9dc      	bls.n	8007016 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800705c:	2300      	movs	r3, #0
 800705e:	61bb      	str	r3, [r7, #24]
 8007060:	e034      	b.n	80070cc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	4413      	add	r3, r2
 800706a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007078:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007080:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007088:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	4413      	add	r3, r2
 8007092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007096:	461a      	mov	r2, r3
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	3301      	adds	r3, #1
 80070a0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070a8:	d80c      	bhi.n	80070c4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070c0:	d0ec      	beq.n	800709c <USB_StopHost+0xc8>
 80070c2:	e000      	b.n	80070c6 <USB_StopHost+0xf2>
        break;
 80070c4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	3301      	adds	r3, #1
 80070ca:	61bb      	str	r3, [r7, #24]
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	2b0f      	cmp	r3, #15
 80070d0:	d9c7      	bls.n	8007062 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070d8:	461a      	mov	r2, r3
 80070da:	f04f 33ff 	mov.w	r3, #4294967295
 80070de:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f04f 32ff 	mov.w	r2, #4294967295
 80070e6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7ff f880 	bl	80061ee <USB_EnableGlobalInt>

  return ret;
 80070ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3720      	adds	r7, #32
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80070f8:	b590      	push	{r4, r7, lr}
 80070fa:	b089      	sub	sp, #36	; 0x24
 80070fc:	af04      	add	r7, sp, #16
 80070fe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007100:	2301      	movs	r3, #1
 8007102:	2202      	movs	r2, #2
 8007104:	2102      	movs	r1, #2
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fc66 	bl	80079d8 <USBH_FindInterface>
 800710c:	4603      	mov	r3, r0
 800710e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007110:	7bfb      	ldrb	r3, [r7, #15]
 8007112:	2bff      	cmp	r3, #255	; 0xff
 8007114:	d002      	beq.n	800711c <USBH_CDC_InterfaceInit+0x24>
 8007116:	7bfb      	ldrb	r3, [r7, #15]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d901      	bls.n	8007120 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800711c:	2302      	movs	r3, #2
 800711e:	e13d      	b.n	800739c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007120:	7bfb      	ldrb	r3, [r7, #15]
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fc3b 	bl	80079a0 <USBH_SelectInterface>
 800712a:	4603      	mov	r3, r0
 800712c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800712e:	7bbb      	ldrb	r3, [r7, #14]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007134:	2302      	movs	r3, #2
 8007136:	e131      	b.n	800739c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800713e:	2050      	movs	r0, #80	; 0x50
 8007140:	f002 fb00 	bl	8009744 <malloc>
 8007144:	4603      	mov	r3, r0
 8007146:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800714e:	69db      	ldr	r3, [r3, #28]
 8007150:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d101      	bne.n	800715c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007158:	2302      	movs	r3, #2
 800715a:	e11f      	b.n	800739c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800715c:	2250      	movs	r2, #80	; 0x50
 800715e:	2100      	movs	r1, #0
 8007160:	68b8      	ldr	r0, [r7, #8]
 8007162:	f002 faff 	bl	8009764 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007166:	7bfb      	ldrb	r3, [r7, #15]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	211a      	movs	r1, #26
 800716c:	fb01 f303 	mul.w	r3, r1, r3
 8007170:	4413      	add	r3, r2
 8007172:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	b25b      	sxtb	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	da15      	bge.n	80071aa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800717e:	7bfb      	ldrb	r3, [r7, #15]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	211a      	movs	r1, #26
 8007184:	fb01 f303 	mul.w	r3, r1, r3
 8007188:	4413      	add	r3, r2
 800718a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800718e:	781a      	ldrb	r2, [r3, #0]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007194:	7bfb      	ldrb	r3, [r7, #15]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	211a      	movs	r1, #26
 800719a:	fb01 f303 	mul.w	r3, r1, r3
 800719e:	4413      	add	r3, r2
 80071a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80071a4:	881a      	ldrh	r2, [r3, #0]
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	785b      	ldrb	r3, [r3, #1]
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f001 ff2c 	bl	800900e <USBH_AllocPipe>
 80071b6:	4603      	mov	r3, r0
 80071b8:	461a      	mov	r2, r3
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	7819      	ldrb	r1, [r3, #0]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	7858      	ldrb	r0, [r3, #1]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	8952      	ldrh	r2, [r2, #10]
 80071d6:	9202      	str	r2, [sp, #8]
 80071d8:	2203      	movs	r2, #3
 80071da:	9201      	str	r2, [sp, #4]
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	4623      	mov	r3, r4
 80071e0:	4602      	mov	r2, r0
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f001 fee4 	bl	8008fb0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	2200      	movs	r2, #0
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f002 f9f9 	bl	80095e8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80071f6:	2300      	movs	r3, #0
 80071f8:	2200      	movs	r2, #0
 80071fa:	210a      	movs	r1, #10
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fbeb 	bl	80079d8 <USBH_FindInterface>
 8007202:	4603      	mov	r3, r0
 8007204:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007206:	7bfb      	ldrb	r3, [r7, #15]
 8007208:	2bff      	cmp	r3, #255	; 0xff
 800720a:	d002      	beq.n	8007212 <USBH_CDC_InterfaceInit+0x11a>
 800720c:	7bfb      	ldrb	r3, [r7, #15]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d901      	bls.n	8007216 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007212:	2302      	movs	r3, #2
 8007214:	e0c2      	b.n	800739c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007216:	7bfb      	ldrb	r3, [r7, #15]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	211a      	movs	r1, #26
 800721c:	fb01 f303 	mul.w	r3, r1, r3
 8007220:	4413      	add	r3, r2
 8007222:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	b25b      	sxtb	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	da16      	bge.n	800725c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800722e:	7bfb      	ldrb	r3, [r7, #15]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	211a      	movs	r1, #26
 8007234:	fb01 f303 	mul.w	r3, r1, r3
 8007238:	4413      	add	r3, r2
 800723a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800723e:	781a      	ldrb	r2, [r3, #0]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	211a      	movs	r1, #26
 800724a:	fb01 f303 	mul.w	r3, r1, r3
 800724e:	4413      	add	r3, r2
 8007250:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007254:	881a      	ldrh	r2, [r3, #0]
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	835a      	strh	r2, [r3, #26]
 800725a:	e015      	b.n	8007288 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800725c:	7bfb      	ldrb	r3, [r7, #15]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	211a      	movs	r1, #26
 8007262:	fb01 f303 	mul.w	r3, r1, r3
 8007266:	4413      	add	r3, r2
 8007268:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800726c:	781a      	ldrb	r2, [r3, #0]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007272:	7bfb      	ldrb	r3, [r7, #15]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	211a      	movs	r1, #26
 8007278:	fb01 f303 	mul.w	r3, r1, r3
 800727c:	4413      	add	r3, r2
 800727e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007282:	881a      	ldrh	r2, [r3, #0]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007288:	7bfb      	ldrb	r3, [r7, #15]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	211a      	movs	r1, #26
 800728e:	fb01 f303 	mul.w	r3, r1, r3
 8007292:	4413      	add	r3, r2
 8007294:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	b25b      	sxtb	r3, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	da16      	bge.n	80072ce <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	211a      	movs	r1, #26
 80072a6:	fb01 f303 	mul.w	r3, r1, r3
 80072aa:	4413      	add	r3, r2
 80072ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 80072b0:	781a      	ldrb	r2, [r3, #0]
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80072b6:	7bfb      	ldrb	r3, [r7, #15]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	211a      	movs	r1, #26
 80072bc:	fb01 f303 	mul.w	r3, r1, r3
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80072c6:	881a      	ldrh	r2, [r3, #0]
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	835a      	strh	r2, [r3, #26]
 80072cc:	e015      	b.n	80072fa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	211a      	movs	r1, #26
 80072d4:	fb01 f303 	mul.w	r3, r1, r3
 80072d8:	4413      	add	r3, r2
 80072da:	f203 3356 	addw	r3, r3, #854	; 0x356
 80072de:	781a      	ldrb	r2, [r3, #0]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	211a      	movs	r1, #26
 80072ea:	fb01 f303 	mul.w	r3, r1, r3
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80072f4:	881a      	ldrh	r2, [r3, #0]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	7b9b      	ldrb	r3, [r3, #14]
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 fe84 	bl	800900e <USBH_AllocPipe>
 8007306:	4603      	mov	r3, r0
 8007308:	461a      	mov	r2, r3
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	7bdb      	ldrb	r3, [r3, #15]
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f001 fe7a 	bl	800900e <USBH_AllocPipe>
 800731a:	4603      	mov	r3, r0
 800731c:	461a      	mov	r2, r3
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	7b59      	ldrb	r1, [r3, #13]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	7b98      	ldrb	r0, [r3, #14]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	8b12      	ldrh	r2, [r2, #24]
 800733a:	9202      	str	r2, [sp, #8]
 800733c:	2202      	movs	r2, #2
 800733e:	9201      	str	r2, [sp, #4]
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	4623      	mov	r3, r4
 8007344:	4602      	mov	r2, r0
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f001 fe32 	bl	8008fb0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	7b19      	ldrb	r1, [r3, #12]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	7bd8      	ldrb	r0, [r3, #15]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	8b52      	ldrh	r2, [r2, #26]
 8007364:	9202      	str	r2, [sp, #8]
 8007366:	2202      	movs	r2, #2
 8007368:	9201      	str	r2, [sp, #4]
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	4623      	mov	r3, r4
 800736e:	4602      	mov	r2, r0
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f001 fe1d 	bl	8008fb0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	7b5b      	ldrb	r3, [r3, #13]
 8007382:	2200      	movs	r2, #0
 8007384:	4619      	mov	r1, r3
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f002 f92e 	bl	80095e8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	7b1b      	ldrb	r3, [r3, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f002 f927 	bl	80095e8 <USBH_LL_SetToggle>

  return USBH_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd90      	pop	{r4, r7, pc}

080073a4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00e      	beq.n	80073dc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f001 fe12 	bl	8008fee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	4619      	mov	r1, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f001 fe3d 	bl	8009050 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	7b1b      	ldrb	r3, [r3, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00e      	beq.n	8007402 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	7b1b      	ldrb	r3, [r3, #12]
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f001 fdff 	bl	8008fee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	7b1b      	ldrb	r3, [r3, #12]
 80073f4:	4619      	mov	r1, r3
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f001 fe2a 	bl	8009050 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	7b5b      	ldrb	r3, [r3, #13]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00e      	beq.n	8007428 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	7b5b      	ldrb	r3, [r3, #13]
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f001 fdec 	bl	8008fee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	7b5b      	ldrb	r3, [r3, #13]
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f001 fe17 	bl	8009050 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00b      	beq.n	800744c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800743a:	69db      	ldr	r3, [r3, #28]
 800743c:	4618      	mov	r0, r3
 800743e:	f002 f989 	bl	8009754 <free>
    phost->pActiveClass->pData = 0U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007448:	2200      	movs	r2, #0
 800744a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3340      	adds	r3, #64	; 0x40
 800746c:	4619      	mov	r1, r3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f8b1 	bl	80075d6 <GetLineCoding>
 8007474:	4603      	mov	r3, r0
 8007476:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007478:	7afb      	ldrb	r3, [r7, #11]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d105      	bne.n	800748a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007484:	2102      	movs	r1, #2
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800748a:	7afb      	ldrb	r3, [r7, #11]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800749c:	2301      	movs	r3, #1
 800749e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80074b4:	2b04      	cmp	r3, #4
 80074b6:	d877      	bhi.n	80075a8 <USBH_CDC_Process+0x114>
 80074b8:	a201      	add	r2, pc, #4	; (adr r2, 80074c0 <USBH_CDC_Process+0x2c>)
 80074ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074be:	bf00      	nop
 80074c0:	080074d5 	.word	0x080074d5
 80074c4:	080074db 	.word	0x080074db
 80074c8:	0800750b 	.word	0x0800750b
 80074cc:	0800757f 	.word	0x0800757f
 80074d0:	0800758d 	.word	0x0800758d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	73fb      	strb	r3, [r7, #15]
      break;
 80074d8:	e06d      	b.n	80075b6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f897 	bl	8007614 <SetLineCoding>
 80074e6:	4603      	mov	r3, r0
 80074e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80074ea:	7bbb      	ldrb	r3, [r7, #14]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d104      	bne.n	80074fa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2202      	movs	r2, #2
 80074f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80074f8:	e058      	b.n	80075ac <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d055      	beq.n	80075ac <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	2204      	movs	r2, #4
 8007504:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007508:	e050      	b.n	80075ac <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	3340      	adds	r3, #64	; 0x40
 800750e:	4619      	mov	r1, r3
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f860 	bl	80075d6 <GetLineCoding>
 8007516:	4603      	mov	r3, r0
 8007518:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800751a:	7bbb      	ldrb	r3, [r7, #14]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d126      	bne.n	800756e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007532:	791b      	ldrb	r3, [r3, #4]
 8007534:	429a      	cmp	r2, r3
 8007536:	d13b      	bne.n	80075b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007542:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007544:	429a      	cmp	r2, r3
 8007546:	d133      	bne.n	80075b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007552:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007554:	429a      	cmp	r2, r3
 8007556:	d12b      	bne.n	80075b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007560:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007562:	429a      	cmp	r2, r3
 8007564:	d124      	bne.n	80075b0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f958 	bl	800781c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800756c:	e020      	b.n	80075b0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800756e:	7bbb      	ldrb	r3, [r7, #14]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d01d      	beq.n	80075b0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2204      	movs	r2, #4
 8007578:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800757c:	e018      	b.n	80075b0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f867 	bl	8007652 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f8da 	bl	800773e <CDC_ProcessReception>
      break;
 800758a:	e014      	b.n	80075b6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800758c:	2100      	movs	r1, #0
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 ffef 	bl	8008572 <USBH_ClrFeature>
 8007594:	4603      	mov	r3, r0
 8007596:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007598:	7bbb      	ldrb	r3, [r7, #14]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10a      	bne.n	80075b4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80075a6:	e005      	b.n	80075b4 <USBH_CDC_Process+0x120>

    default:
      break;
 80075a8:	bf00      	nop
 80075aa:	e004      	b.n	80075b6 <USBH_CDC_Process+0x122>
      break;
 80075ac:	bf00      	nop
 80075ae:	e002      	b.n	80075b6 <USBH_CDC_Process+0x122>
      break;
 80075b0:	bf00      	nop
 80075b2:	e000      	b.n	80075b6 <USBH_CDC_Process+0x122>
      break;
 80075b4:	bf00      	nop

  }

  return status;
 80075b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b082      	sub	sp, #8
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	22a1      	movs	r2, #161	; 0xa1
 80075e4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2221      	movs	r2, #33	; 0x21
 80075ea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2207      	movs	r2, #7
 80075fc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2207      	movs	r2, #7
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f001 fa81 	bl	8008b0c <USBH_CtlReq>
 800760a:	4603      	mov	r3, r0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3708      	adds	r7, #8
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2221      	movs	r2, #33	; 0x21
 8007622:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2220      	movs	r2, #32
 8007628:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2207      	movs	r2, #7
 800763a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2207      	movs	r2, #7
 8007640:	4619      	mov	r1, r3
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f001 fa62 	bl	8008b0c <USBH_CtlReq>
 8007648:	4603      	mov	r3, r0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b086      	sub	sp, #24
 8007656:	af02      	add	r7, sp, #8
 8007658:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007664:	2300      	movs	r3, #0
 8007666:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800766e:	2b01      	cmp	r3, #1
 8007670:	d002      	beq.n	8007678 <CDC_ProcessTransmission+0x26>
 8007672:	2b02      	cmp	r3, #2
 8007674:	d023      	beq.n	80076be <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007676:	e05e      	b.n	8007736 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	8b12      	ldrh	r2, [r2, #24]
 8007680:	4293      	cmp	r3, r2
 8007682:	d90b      	bls.n	800769c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	69d9      	ldr	r1, [r3, #28]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	8b1a      	ldrh	r2, [r3, #24]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	7b5b      	ldrb	r3, [r3, #13]
 8007690:	2001      	movs	r0, #1
 8007692:	9000      	str	r0, [sp, #0]
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f001 fc48 	bl	8008f2a <USBH_BulkSendData>
 800769a:	e00b      	b.n	80076b4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	7b5b      	ldrb	r3, [r3, #13]
 80076aa:	2001      	movs	r0, #1
 80076ac:	9000      	str	r0, [sp, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f001 fc3b 	bl	8008f2a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80076bc:	e03b      	b.n	8007736 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	7b5b      	ldrb	r3, [r3, #13]
 80076c2:	4619      	mov	r1, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f001 ff65 	bl	8009594 <USBH_LL_GetURBState>
 80076ca:	4603      	mov	r3, r0
 80076cc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80076ce:	7afb      	ldrb	r3, [r7, #11]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d128      	bne.n	8007726 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	8b12      	ldrh	r2, [r2, #24]
 80076dc:	4293      	cmp	r3, r2
 80076de:	d90e      	bls.n	80076fe <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	8b12      	ldrh	r2, [r2, #24]
 80076e8:	1a9a      	subs	r2, r3, r2
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	69db      	ldr	r3, [r3, #28]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	8b12      	ldrh	r2, [r2, #24]
 80076f6:	441a      	add	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	61da      	str	r2, [r3, #28]
 80076fc:	e002      	b.n	8007704 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	2b00      	cmp	r3, #0
 800770a:	d004      	beq.n	8007716 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007714:	e00e      	b.n	8007734 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f868 	bl	80077f4 <USBH_CDC_TransmitCallback>
      break;
 8007724:	e006      	b.n	8007734 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007726:	7afb      	ldrb	r3, [r7, #11]
 8007728:	2b02      	cmp	r3, #2
 800772a:	d103      	bne.n	8007734 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007734:	bf00      	nop
  }
}
 8007736:	bf00      	nop
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b086      	sub	sp, #24
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007750:	2300      	movs	r3, #0
 8007752:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800775a:	2b03      	cmp	r3, #3
 800775c:	d002      	beq.n	8007764 <CDC_ProcessReception+0x26>
 800775e:	2b04      	cmp	r3, #4
 8007760:	d00e      	beq.n	8007780 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007762:	e043      	b.n	80077ec <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	6a19      	ldr	r1, [r3, #32]
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	8b5a      	ldrh	r2, [r3, #26]
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	7b1b      	ldrb	r3, [r3, #12]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 fbff 	bl	8008f74 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	2204      	movs	r2, #4
 800777a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800777e:	e035      	b.n	80077ec <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	7b1b      	ldrb	r3, [r3, #12]
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f001 ff04 	bl	8009594 <USBH_LL_GetURBState>
 800778c:	4603      	mov	r3, r0
 800778e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007790:	7cfb      	ldrb	r3, [r7, #19]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d129      	bne.n	80077ea <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	7b1b      	ldrb	r3, [r3, #12]
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f001 fe67 	bl	8009470 <USBH_LL_GetLastXferSize>
 80077a2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d016      	beq.n	80077dc <CDC_ProcessReception+0x9e>
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	8b5b      	ldrh	r3, [r3, #26]
 80077b2:	461a      	mov	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d910      	bls.n	80077dc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	1ad2      	subs	r2, r2, r3
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	6a1a      	ldr	r2, [r3, #32]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	441a      	add	r2, r3
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2203      	movs	r2, #3
 80077d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80077da:	e006      	b.n	80077ea <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f80f 	bl	8007808 <USBH_CDC_ReceiveCallback>
      break;
 80077ea:	bf00      	nop
  }
}
 80077ec:	bf00      	nop
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	4613      	mov	r3, r2
 800783c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007844:	2302      	movs	r3, #2
 8007846:	e029      	b.n	800789c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	79fa      	ldrb	r2, [r7, #7]
 800784c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 f81f 	bl	80078a4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d003      	beq.n	8007894 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f001 fd2d 	bl	80092f4 <USBH_LL_Init>

  return USBH_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80078ac:	2300      	movs	r3, #0
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80078b0:	2300      	movs	r3, #0
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	e009      	b.n	80078ca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	33e0      	adds	r3, #224	; 0xe0
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	2200      	movs	r2, #0
 80078c2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	3301      	adds	r3, #1
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b0f      	cmp	r3, #15
 80078ce:	d9f2      	bls.n	80078b6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80078d0:	2300      	movs	r3, #0
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	e009      	b.n	80078ea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80078e0:	2200      	movs	r2, #0
 80078e2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	3301      	adds	r3, #1
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f0:	d3f1      	bcc.n	80078d6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2240      	movs	r2, #64	; 0x40
 8007916:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d016      	beq.n	800798e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10e      	bne.n	8007988 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007970:	1c59      	adds	r1, r3, #1
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	33de      	adds	r3, #222	; 0xde
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	73fb      	strb	r3, [r7, #15]
 8007986:	e004      	b.n	8007992 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007988:	2302      	movs	r3, #2
 800798a:	73fb      	strb	r3, [r7, #15]
 800798c:	e001      	b.n	8007992 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800798e:	2302      	movs	r3, #2
 8007990:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007992:	7bfb      	ldrb	r3, [r7, #15]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80079b6:	78fa      	ldrb	r2, [r7, #3]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d204      	bcs.n	80079c6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	78fa      	ldrb	r2, [r7, #3]
 80079c0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80079c4:	e001      	b.n	80079ca <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80079c6:	2302      	movs	r3, #2
 80079c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80079ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	4608      	mov	r0, r1
 80079e2:	4611      	mov	r1, r2
 80079e4:	461a      	mov	r2, r3
 80079e6:	4603      	mov	r3, r0
 80079e8:	70fb      	strb	r3, [r7, #3]
 80079ea:	460b      	mov	r3, r1
 80079ec:	70bb      	strb	r3, [r7, #2]
 80079ee:	4613      	mov	r3, r2
 80079f0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80079f6:	2300      	movs	r3, #0
 80079f8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007a00:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007a02:	e025      	b.n	8007a50 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007a04:	7dfb      	ldrb	r3, [r7, #23]
 8007a06:	221a      	movs	r2, #26
 8007a08:	fb02 f303 	mul.w	r3, r2, r3
 8007a0c:	3308      	adds	r3, #8
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	4413      	add	r3, r2
 8007a12:	3302      	adds	r3, #2
 8007a14:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	795b      	ldrb	r3, [r3, #5]
 8007a1a:	78fa      	ldrb	r2, [r7, #3]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d002      	beq.n	8007a26 <USBH_FindInterface+0x4e>
 8007a20:	78fb      	ldrb	r3, [r7, #3]
 8007a22:	2bff      	cmp	r3, #255	; 0xff
 8007a24:	d111      	bne.n	8007a4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007a2a:	78ba      	ldrb	r2, [r7, #2]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d002      	beq.n	8007a36 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a30:	78bb      	ldrb	r3, [r7, #2]
 8007a32:	2bff      	cmp	r3, #255	; 0xff
 8007a34:	d109      	bne.n	8007a4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a3a:	787a      	ldrb	r2, [r7, #1]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d002      	beq.n	8007a46 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007a40:	787b      	ldrb	r3, [r7, #1]
 8007a42:	2bff      	cmp	r3, #255	; 0xff
 8007a44:	d101      	bne.n	8007a4a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007a46:	7dfb      	ldrb	r3, [r7, #23]
 8007a48:	e006      	b.n	8007a58 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d9d6      	bls.n	8007a04 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007a56:	23ff      	movs	r3, #255	; 0xff
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	371c      	adds	r7, #28
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f001 fc87 	bl	8009380 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007a72:	2101      	movs	r1, #1
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 fda0 	bl	80095ba <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b088      	sub	sp, #32
 8007a88:	af04      	add	r7, sp, #16
 8007a8a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d102      	bne.n	8007aa6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2203      	movs	r2, #3
 8007aa4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b0b      	cmp	r3, #11
 8007aae:	f200 81be 	bhi.w	8007e2e <USBH_Process+0x3aa>
 8007ab2:	a201      	add	r2, pc, #4	; (adr r2, 8007ab8 <USBH_Process+0x34>)
 8007ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab8:	08007ae9 	.word	0x08007ae9
 8007abc:	08007b1b 	.word	0x08007b1b
 8007ac0:	08007b83 	.word	0x08007b83
 8007ac4:	08007dc9 	.word	0x08007dc9
 8007ac8:	08007e2f 	.word	0x08007e2f
 8007acc:	08007c27 	.word	0x08007c27
 8007ad0:	08007d6f 	.word	0x08007d6f
 8007ad4:	08007c5d 	.word	0x08007c5d
 8007ad8:	08007c7d 	.word	0x08007c7d
 8007adc:	08007c9d 	.word	0x08007c9d
 8007ae0:	08007ce1 	.word	0x08007ce1
 8007ae4:	08007db1 	.word	0x08007db1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 819e 	beq.w	8007e32 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007afc:	20c8      	movs	r0, #200	; 0xc8
 8007afe:	f001 fda3 	bl	8009648 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f001 fc99 	bl	800943a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007b18:	e18b      	b.n	8007e32 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d107      	bne.n	8007b34 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007b32:	e18d      	b.n	8007e50 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b3e:	d914      	bls.n	8007b6a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007b46:	3301      	adds	r3, #1
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007b56:	2b03      	cmp	r3, #3
 8007b58:	d903      	bls.n	8007b62 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	220d      	movs	r2, #13
 8007b5e:	701a      	strb	r2, [r3, #0]
      break;
 8007b60:	e176      	b.n	8007e50 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	701a      	strb	r2, [r3, #0]
      break;
 8007b68:	e172      	b.n	8007e50 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b70:	f103 020a 	add.w	r2, r3, #10
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007b7a:	200a      	movs	r0, #10
 8007b7c:	f001 fd64 	bl	8009648 <USBH_Delay>
      break;
 8007b80:	e166      	b.n	8007e50 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d005      	beq.n	8007b98 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b92:	2104      	movs	r1, #4
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007b98:	2064      	movs	r0, #100	; 0x64
 8007b9a:	f001 fd55 	bl	8009648 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f001 fc24 	bl	80093ec <USBH_LL_GetSpeed>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2205      	movs	r2, #5
 8007bb2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f001 fa29 	bl	800900e <USBH_AllocPipe>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007bc4:	2180      	movs	r1, #128	; 0x80
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f001 fa21 	bl	800900e <USBH_AllocPipe>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	461a      	mov	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	7919      	ldrb	r1, [r3, #4]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007be8:	b292      	uxth	r2, r2
 8007bea:	9202      	str	r2, [sp, #8]
 8007bec:	2200      	movs	r2, #0
 8007bee:	9201      	str	r2, [sp, #4]
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2280      	movs	r2, #128	; 0x80
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f001 f9da 	bl	8008fb0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	7959      	ldrb	r1, [r3, #5]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007c10:	b292      	uxth	r2, r2
 8007c12:	9202      	str	r2, [sp, #8]
 8007c14:	2200      	movs	r2, #0
 8007c16:	9201      	str	r2, [sp, #4]
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f001 f9c6 	bl	8008fb0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c24:	e114      	b.n	8007e50 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f918 	bl	8007e5c <USBH_HandleEnum>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f040 80fe 	bne.w	8007e36 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d103      	bne.n	8007c54 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2208      	movs	r2, #8
 8007c50:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c52:	e0f0      	b.n	8007e36 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2207      	movs	r2, #7
 8007c58:	701a      	strb	r2, [r3, #0]
      break;
 8007c5a:	e0ec      	b.n	8007e36 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 80e9 	beq.w	8007e3a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c6e:	2101      	movs	r1, #1
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2208      	movs	r2, #8
 8007c78:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007c7a:	e0de      	b.n	8007e3a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	4619      	mov	r1, r3
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fc2c 	bl	80084e4 <USBH_SetCfg>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f040 80d5 	bne.w	8007e3e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2209      	movs	r2, #9
 8007c98:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c9a:	e0d0      	b.n	8007e3e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007ca2:	f003 0320 	and.w	r3, r3, #32
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d016      	beq.n	8007cd8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007caa:	2101      	movs	r1, #1
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fc3c 	bl	800852a <USBH_SetFeature>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007cb6:	7bbb      	ldrb	r3, [r7, #14]
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d103      	bne.n	8007cc6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	220a      	movs	r2, #10
 8007cc2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007cc4:	e0bd      	b.n	8007e42 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007cc6:	7bbb      	ldrb	r3, [r7, #14]
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	f040 80b9 	bne.w	8007e42 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	220a      	movs	r2, #10
 8007cd4:	701a      	strb	r2, [r3, #0]
      break;
 8007cd6:	e0b4      	b.n	8007e42 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	220a      	movs	r2, #10
 8007cdc:	701a      	strb	r2, [r3, #0]
      break;
 8007cde:	e0b0      	b.n	8007e42 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f000 80ad 	beq.w	8007e46 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73fb      	strb	r3, [r7, #15]
 8007cf8:	e016      	b.n	8007d28 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007cfa:	7bfa      	ldrb	r2, [r7, #15]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	32de      	adds	r2, #222	; 0xde
 8007d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d04:	791a      	ldrb	r2, [r3, #4]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d108      	bne.n	8007d22 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007d10:	7bfa      	ldrb	r2, [r7, #15]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	32de      	adds	r2, #222	; 0xde
 8007d16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007d20:	e005      	b.n	8007d2e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	3301      	adds	r3, #1
 8007d26:	73fb      	strb	r3, [r7, #15]
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d0e5      	beq.n	8007cfa <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d016      	beq.n	8007d66 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	4798      	blx	r3
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d109      	bne.n	8007d5e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2206      	movs	r2, #6
 8007d4e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d56:	2103      	movs	r1, #3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d5c:	e073      	b.n	8007e46 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	220d      	movs	r2, #13
 8007d62:	701a      	strb	r2, [r3, #0]
      break;
 8007d64:	e06f      	b.n	8007e46 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	220d      	movs	r2, #13
 8007d6a:	701a      	strb	r2, [r3, #0]
      break;
 8007d6c:	e06b      	b.n	8007e46 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d017      	beq.n	8007da8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	4798      	blx	r3
 8007d84:	4603      	mov	r3, r0
 8007d86:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d103      	bne.n	8007d98 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	220b      	movs	r2, #11
 8007d94:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d96:	e058      	b.n	8007e4a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007d98:	7bbb      	ldrb	r3, [r7, #14]
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d154      	bne.n	8007e4a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	220d      	movs	r2, #13
 8007da4:	701a      	strb	r2, [r3, #0]
      break;
 8007da6:	e050      	b.n	8007e4a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	220d      	movs	r2, #13
 8007dac:	701a      	strb	r2, [r3, #0]
      break;
 8007dae:	e04c      	b.n	8007e4a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d049      	beq.n	8007e4e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	4798      	blx	r3
      }
      break;
 8007dc6:	e042      	b.n	8007e4e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7ff fd67 	bl	80078a4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d009      	beq.n	8007df4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d005      	beq.n	8007e0a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e04:	2105      	movs	r1, #5
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d107      	bne.n	8007e26 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7ff fe20 	bl	8007a64 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e24:	e014      	b.n	8007e50 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f001 faaa 	bl	8009380 <USBH_LL_Start>
      break;
 8007e2c:	e010      	b.n	8007e50 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007e2e:	bf00      	nop
 8007e30:	e00e      	b.n	8007e50 <USBH_Process+0x3cc>
      break;
 8007e32:	bf00      	nop
 8007e34:	e00c      	b.n	8007e50 <USBH_Process+0x3cc>
      break;
 8007e36:	bf00      	nop
 8007e38:	e00a      	b.n	8007e50 <USBH_Process+0x3cc>
    break;
 8007e3a:	bf00      	nop
 8007e3c:	e008      	b.n	8007e50 <USBH_Process+0x3cc>
      break;
 8007e3e:	bf00      	nop
 8007e40:	e006      	b.n	8007e50 <USBH_Process+0x3cc>
      break;
 8007e42:	bf00      	nop
 8007e44:	e004      	b.n	8007e50 <USBH_Process+0x3cc>
      break;
 8007e46:	bf00      	nop
 8007e48:	e002      	b.n	8007e50 <USBH_Process+0x3cc>
      break;
 8007e4a:	bf00      	nop
 8007e4c:	e000      	b.n	8007e50 <USBH_Process+0x3cc>
      break;
 8007e4e:	bf00      	nop
  }
  return USBH_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop

08007e5c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b088      	sub	sp, #32
 8007e60:	af04      	add	r7, sp, #16
 8007e62:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007e64:	2301      	movs	r3, #1
 8007e66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	785b      	ldrb	r3, [r3, #1]
 8007e70:	2b07      	cmp	r3, #7
 8007e72:	f200 81c1 	bhi.w	80081f8 <USBH_HandleEnum+0x39c>
 8007e76:	a201      	add	r2, pc, #4	; (adr r2, 8007e7c <USBH_HandleEnum+0x20>)
 8007e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7c:	08007e9d 	.word	0x08007e9d
 8007e80:	08007f5b 	.word	0x08007f5b
 8007e84:	08007fc5 	.word	0x08007fc5
 8007e88:	08008053 	.word	0x08008053
 8007e8c:	080080bd 	.word	0x080080bd
 8007e90:	0800812d 	.word	0x0800812d
 8007e94:	08008173 	.word	0x08008173
 8007e98:	080081b9 	.word	0x080081b9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007e9c:	2108      	movs	r1, #8
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fa50 	bl	8008344 <USBH_Get_DevDesc>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ea8:	7bbb      	ldrb	r3, [r7, #14]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d130      	bne.n	8007f10 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	7919      	ldrb	r1, [r3, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007ed2:	b292      	uxth	r2, r2
 8007ed4:	9202      	str	r2, [sp, #8]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	9201      	str	r2, [sp, #4]
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	4603      	mov	r3, r0
 8007ede:	2280      	movs	r2, #128	; 0x80
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f001 f865 	bl	8008fb0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	7959      	ldrb	r1, [r3, #5]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007efa:	b292      	uxth	r2, r2
 8007efc:	9202      	str	r2, [sp, #8]
 8007efe:	2200      	movs	r2, #0
 8007f00:	9201      	str	r2, [sp, #4]
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	4603      	mov	r3, r0
 8007f06:	2200      	movs	r2, #0
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f001 f851 	bl	8008fb0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007f0e:	e175      	b.n	80081fc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f10:	7bbb      	ldrb	r3, [r7, #14]
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	f040 8172 	bne.w	80081fc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f1e:	3301      	adds	r3, #1
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	d903      	bls.n	8007f3a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	220d      	movs	r2, #13
 8007f36:	701a      	strb	r2, [r3, #0]
      break;
 8007f38:	e160      	b.n	80081fc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	795b      	ldrb	r3, [r3, #5]
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f001 f885 	bl	8009050 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	791b      	ldrb	r3, [r3, #4]
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f001 f87f 	bl	8009050 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	701a      	strb	r2, [r3, #0]
      break;
 8007f58:	e150      	b.n	80081fc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007f5a:	2112      	movs	r1, #18
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f9f1 	bl	8008344 <USBH_Get_DevDesc>
 8007f62:	4603      	mov	r3, r0
 8007f64:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d103      	bne.n	8007f74 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f72:	e145      	b.n	8008200 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f74:	7bbb      	ldrb	r3, [r7, #14]
 8007f76:	2b03      	cmp	r3, #3
 8007f78:	f040 8142 	bne.w	8008200 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f82:	3301      	adds	r3, #1
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d903      	bls.n	8007f9e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	220d      	movs	r2, #13
 8007f9a:	701a      	strb	r2, [r3, #0]
      break;
 8007f9c:	e130      	b.n	8008200 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	795b      	ldrb	r3, [r3, #5]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f001 f853 	bl	8009050 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	791b      	ldrb	r3, [r3, #4]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f001 f84d 	bl	8009050 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	701a      	strb	r2, [r3, #0]
      break;
 8007fc2:	e11d      	b.n	8008200 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007fc4:	2101      	movs	r1, #1
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fa68 	bl	800849c <USBH_SetAddress>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d132      	bne.n	800803c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007fd6:	2002      	movs	r0, #2
 8007fd8:	f001 fb36 	bl	8009648 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2203      	movs	r2, #3
 8007fe8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	7919      	ldrb	r1, [r3, #4]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007ffe:	b292      	uxth	r2, r2
 8008000:	9202      	str	r2, [sp, #8]
 8008002:	2200      	movs	r2, #0
 8008004:	9201      	str	r2, [sp, #4]
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	4603      	mov	r3, r0
 800800a:	2280      	movs	r2, #128	; 0x80
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 ffcf 	bl	8008fb0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	7959      	ldrb	r1, [r3, #5]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008026:	b292      	uxth	r2, r2
 8008028:	9202      	str	r2, [sp, #8]
 800802a:	2200      	movs	r2, #0
 800802c:	9201      	str	r2, [sp, #4]
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	4603      	mov	r3, r0
 8008032:	2200      	movs	r2, #0
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 ffbb 	bl	8008fb0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800803a:	e0e3      	b.n	8008204 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	2b03      	cmp	r3, #3
 8008040:	f040 80e0 	bne.w	8008204 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	220d      	movs	r2, #13
 8008048:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	705a      	strb	r2, [r3, #1]
      break;
 8008050:	e0d8      	b.n	8008204 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008052:	2109      	movs	r1, #9
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 f99d 	bl	8008394 <USBH_Get_CfgDesc>
 800805a:	4603      	mov	r3, r0
 800805c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800805e:	7bbb      	ldrb	r3, [r7, #14]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d103      	bne.n	800806c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2204      	movs	r2, #4
 8008068:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800806a:	e0cd      	b.n	8008208 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800806c:	7bbb      	ldrb	r3, [r7, #14]
 800806e:	2b03      	cmp	r3, #3
 8008070:	f040 80ca 	bne.w	8008208 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800807a:	3301      	adds	r3, #1
 800807c:	b2da      	uxtb	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800808a:	2b03      	cmp	r3, #3
 800808c:	d903      	bls.n	8008096 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	220d      	movs	r2, #13
 8008092:	701a      	strb	r2, [r3, #0]
      break;
 8008094:	e0b8      	b.n	8008208 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	795b      	ldrb	r3, [r3, #5]
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 ffd7 	bl	8009050 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	791b      	ldrb	r3, [r3, #4]
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 ffd1 	bl	8009050 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	701a      	strb	r2, [r3, #0]
      break;
 80080ba:	e0a5      	b.n	8008208 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f965 	bl	8008394 <USBH_Get_CfgDesc>
 80080ca:	4603      	mov	r3, r0
 80080cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080ce:	7bbb      	ldrb	r3, [r7, #14]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d103      	bne.n	80080dc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2205      	movs	r2, #5
 80080d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80080da:	e097      	b.n	800820c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	2b03      	cmp	r3, #3
 80080e0:	f040 8094 	bne.w	800820c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080ea:	3301      	adds	r3, #1
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	d903      	bls.n	8008106 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	220d      	movs	r2, #13
 8008102:	701a      	strb	r2, [r3, #0]
      break;
 8008104:	e082      	b.n	800820c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	795b      	ldrb	r3, [r3, #5]
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 ff9f 	bl	8009050 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	791b      	ldrb	r3, [r3, #4]
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 ff99 	bl	8009050 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	701a      	strb	r2, [r3, #0]
      break;
 800812a:	e06f      	b.n	800820c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008132:	2b00      	cmp	r3, #0
 8008134:	d019      	beq.n	800816a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008142:	23ff      	movs	r3, #255	; 0xff
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f949 	bl	80083dc <USBH_Get_StringDesc>
 800814a:	4603      	mov	r3, r0
 800814c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800814e:	7bbb      	ldrb	r3, [r7, #14]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d103      	bne.n	800815c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2206      	movs	r2, #6
 8008158:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800815a:	e059      	b.n	8008210 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800815c:	7bbb      	ldrb	r3, [r7, #14]
 800815e:	2b03      	cmp	r3, #3
 8008160:	d156      	bne.n	8008210 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2206      	movs	r2, #6
 8008166:	705a      	strb	r2, [r3, #1]
      break;
 8008168:	e052      	b.n	8008210 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2206      	movs	r2, #6
 800816e:	705a      	strb	r2, [r3, #1]
      break;
 8008170:	e04e      	b.n	8008210 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008178:	2b00      	cmp	r3, #0
 800817a:	d019      	beq.n	80081b0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008188:	23ff      	movs	r3, #255	; 0xff
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f926 	bl	80083dc <USBH_Get_StringDesc>
 8008190:	4603      	mov	r3, r0
 8008192:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008194:	7bbb      	ldrb	r3, [r7, #14]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d103      	bne.n	80081a2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2207      	movs	r2, #7
 800819e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80081a0:	e038      	b.n	8008214 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
 80081a4:	2b03      	cmp	r3, #3
 80081a6:	d135      	bne.n	8008214 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2207      	movs	r2, #7
 80081ac:	705a      	strb	r2, [r3, #1]
      break;
 80081ae:	e031      	b.n	8008214 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2207      	movs	r2, #7
 80081b4:	705a      	strb	r2, [r3, #1]
      break;
 80081b6:	e02d      	b.n	8008214 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d017      	beq.n	80081f2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80081ce:	23ff      	movs	r3, #255	; 0xff
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f903 	bl	80083dc <USBH_Get_StringDesc>
 80081d6:	4603      	mov	r3, r0
 80081d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80081da:	7bbb      	ldrb	r3, [r7, #14]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d102      	bne.n	80081e6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80081e4:	e018      	b.n	8008218 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081e6:	7bbb      	ldrb	r3, [r7, #14]
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d115      	bne.n	8008218 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80081ec:	2300      	movs	r3, #0
 80081ee:	73fb      	strb	r3, [r7, #15]
      break;
 80081f0:	e012      	b.n	8008218 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	73fb      	strb	r3, [r7, #15]
      break;
 80081f6:	e00f      	b.n	8008218 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80081f8:	bf00      	nop
 80081fa:	e00e      	b.n	800821a <USBH_HandleEnum+0x3be>
      break;
 80081fc:	bf00      	nop
 80081fe:	e00c      	b.n	800821a <USBH_HandleEnum+0x3be>
      break;
 8008200:	bf00      	nop
 8008202:	e00a      	b.n	800821a <USBH_HandleEnum+0x3be>
      break;
 8008204:	bf00      	nop
 8008206:	e008      	b.n	800821a <USBH_HandleEnum+0x3be>
      break;
 8008208:	bf00      	nop
 800820a:	e006      	b.n	800821a <USBH_HandleEnum+0x3be>
      break;
 800820c:	bf00      	nop
 800820e:	e004      	b.n	800821a <USBH_HandleEnum+0x3be>
      break;
 8008210:	bf00      	nop
 8008212:	e002      	b.n	800821a <USBH_HandleEnum+0x3be>
      break;
 8008214:	bf00      	nop
 8008216:	e000      	b.n	800821a <USBH_HandleEnum+0x3be>
      break;
 8008218:	bf00      	nop
  }
  return Status;
 800821a:	7bfb      	ldrb	r3, [r7, #15]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008236:	bf00      	nop
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b082      	sub	sp, #8
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008250:	1c5a      	adds	r2, r3, #1
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 f804 	bl	8008266 <USBH_HandleSof>
}
 800825e:	bf00      	nop
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b082      	sub	sp, #8
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b0b      	cmp	r3, #11
 8008276:	d10a      	bne.n	800828e <USBH_HandleSof+0x28>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800827e:	2b00      	cmp	r3, #0
 8008280:	d005      	beq.n	800828e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	4798      	blx	r3
  }
}
 800828e:	bf00      	nop
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008296:	b480      	push	{r7}
 8008298:	b083      	sub	sp, #12
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80082a6:	bf00      	nop
}
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b083      	sub	sp, #12
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80082c2:	bf00      	nop
}
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b083      	sub	sp, #12
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f001 f84a 	bl	80093b6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	791b      	ldrb	r3, [r3, #4]
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fe91 	bl	8009050 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	795b      	ldrb	r3, [r3, #5]
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fe8b 	bl	8009050 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af02      	add	r7, sp, #8
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	460b      	mov	r3, r1
 800834e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008356:	78fb      	ldrb	r3, [r7, #3]
 8008358:	b29b      	uxth	r3, r3
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	4613      	mov	r3, r2
 800835e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008362:	2100      	movs	r1, #0
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f864 	bl	8008432 <USBH_GetDescriptor>
 800836a:	4603      	mov	r3, r0
 800836c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800836e:	7bfb      	ldrb	r3, [r7, #15]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10a      	bne.n	800838a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f203 3026 	addw	r0, r3, #806	; 0x326
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008380:	78fa      	ldrb	r2, [r7, #3]
 8008382:	b292      	uxth	r2, r2
 8008384:	4619      	mov	r1, r3
 8008386:	f000 f918 	bl	80085ba <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800838a:	7bfb      	ldrb	r3, [r7, #15]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af02      	add	r7, sp, #8
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	331c      	adds	r3, #28
 80083a4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80083a6:	887b      	ldrh	r3, [r7, #2]
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083b0:	2100      	movs	r1, #0
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f83d 	bl	8008432 <USBH_GetDescriptor>
 80083b8:	4603      	mov	r3, r0
 80083ba:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d107      	bne.n	80083d2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80083c2:	887b      	ldrh	r3, [r7, #2]
 80083c4:	461a      	mov	r2, r3
 80083c6:	68b9      	ldr	r1, [r7, #8]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 f987 	bl	80086dc <USBH_ParseCfgDesc>
 80083ce:	4603      	mov	r3, r0
 80083d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b088      	sub	sp, #32
 80083e0:	af02      	add	r7, sp, #8
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	607a      	str	r2, [r7, #4]
 80083e6:	461a      	mov	r2, r3
 80083e8:	460b      	mov	r3, r1
 80083ea:	72fb      	strb	r3, [r7, #11]
 80083ec:	4613      	mov	r3, r2
 80083ee:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80083f0:	7afb      	ldrb	r3, [r7, #11]
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80083f8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008400:	893b      	ldrh	r3, [r7, #8]
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	460b      	mov	r3, r1
 8008406:	2100      	movs	r1, #0
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 f812 	bl	8008432 <USBH_GetDescriptor>
 800840e:	4603      	mov	r3, r0
 8008410:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008412:	7dfb      	ldrb	r3, [r7, #23]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d107      	bne.n	8008428 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800841e:	893a      	ldrh	r2, [r7, #8]
 8008420:	6879      	ldr	r1, [r7, #4]
 8008422:	4618      	mov	r0, r3
 8008424:	f000 fb24 	bl	8008a70 <USBH_ParseStringDesc>
  }

  return status;
 8008428:	7dfb      	ldrb	r3, [r7, #23]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3718      	adds	r7, #24
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b084      	sub	sp, #16
 8008436:	af00      	add	r7, sp, #0
 8008438:	60f8      	str	r0, [r7, #12]
 800843a:	607b      	str	r3, [r7, #4]
 800843c:	460b      	mov	r3, r1
 800843e:	72fb      	strb	r3, [r7, #11]
 8008440:	4613      	mov	r3, r2
 8008442:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	789b      	ldrb	r3, [r3, #2]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d11c      	bne.n	8008486 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800844c:	7afb      	ldrb	r3, [r7, #11]
 800844e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008452:	b2da      	uxtb	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2206      	movs	r2, #6
 800845c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	893a      	ldrh	r2, [r7, #8]
 8008462:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008464:	893b      	ldrh	r3, [r7, #8]
 8008466:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800846a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800846e:	d104      	bne.n	800847a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f240 4209 	movw	r2, #1033	; 0x409
 8008476:	829a      	strh	r2, [r3, #20]
 8008478:	e002      	b.n	8008480 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	8b3a      	ldrh	r2, [r7, #24]
 8008484:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008486:	8b3b      	ldrh	r3, [r7, #24]
 8008488:	461a      	mov	r2, r3
 800848a:	6879      	ldr	r1, [r7, #4]
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f000 fb3d 	bl	8008b0c <USBH_CtlReq>
 8008492:	4603      	mov	r3, r0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	460b      	mov	r3, r1
 80084a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	789b      	ldrb	r3, [r3, #2]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d10f      	bne.n	80084d0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2205      	movs	r2, #5
 80084ba:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80084bc:	78fb      	ldrb	r3, [r7, #3]
 80084be:	b29a      	uxth	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80084d0:	2200      	movs	r2, #0
 80084d2:	2100      	movs	r1, #0
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fb19 	bl	8008b0c <USBH_CtlReq>
 80084da:	4603      	mov	r3, r0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	460b      	mov	r3, r1
 80084ee:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	789b      	ldrb	r3, [r3, #2]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d10e      	bne.n	8008516 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2209      	movs	r2, #9
 8008502:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	887a      	ldrh	r2, [r7, #2]
 8008508:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008516:	2200      	movs	r2, #0
 8008518:	2100      	movs	r1, #0
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 faf6 	bl	8008b0c <USBH_CtlReq>
 8008520:	4603      	mov	r3, r0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b082      	sub	sp, #8
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	460b      	mov	r3, r1
 8008534:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	789b      	ldrb	r3, [r3, #2]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d10f      	bne.n	800855e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2203      	movs	r2, #3
 8008548:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800854a:	78fb      	ldrb	r3, [r7, #3]
 800854c:	b29a      	uxth	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800855e:	2200      	movs	r2, #0
 8008560:	2100      	movs	r1, #0
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fad2 	bl	8008b0c <USBH_CtlReq>
 8008568:	4603      	mov	r3, r0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b082      	sub	sp, #8
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	460b      	mov	r3, r1
 800857c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	789b      	ldrb	r3, [r3, #2]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d10f      	bne.n	80085a6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2202      	movs	r2, #2
 800858a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008598:	78fb      	ldrb	r3, [r7, #3]
 800859a:	b29a      	uxth	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80085a6:	2200      	movs	r2, #0
 80085a8:	2100      	movs	r1, #0
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 faae 	bl	8008b0c <USBH_CtlReq>
 80085b0:	4603      	mov	r3, r0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b085      	sub	sp, #20
 80085be:	af00      	add	r7, sp, #0
 80085c0:	60f8      	str	r0, [r7, #12]
 80085c2:	60b9      	str	r1, [r7, #8]
 80085c4:	4613      	mov	r3, r2
 80085c6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	781a      	ldrb	r2, [r3, #0]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	785a      	ldrb	r2, [r3, #1]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	3302      	adds	r3, #2
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	b29a      	uxth	r2, r3
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	3303      	adds	r3, #3
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	021b      	lsls	r3, r3, #8
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	4313      	orrs	r3, r2
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	791a      	ldrb	r2, [r3, #4]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	795a      	ldrb	r2, [r3, #5]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	799a      	ldrb	r2, [r3, #6]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	79da      	ldrb	r2, [r3, #7]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	79db      	ldrb	r3, [r3, #7]
 8008618:	2b20      	cmp	r3, #32
 800861a:	dc11      	bgt.n	8008640 <USBH_ParseDevDesc+0x86>
 800861c:	2b08      	cmp	r3, #8
 800861e:	db16      	blt.n	800864e <USBH_ParseDevDesc+0x94>
 8008620:	3b08      	subs	r3, #8
 8008622:	2201      	movs	r2, #1
 8008624:	fa02 f303 	lsl.w	r3, r2, r3
 8008628:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800862c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008630:	2b00      	cmp	r3, #0
 8008632:	bf14      	ite	ne
 8008634:	2301      	movne	r3, #1
 8008636:	2300      	moveq	r3, #0
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	d102      	bne.n	8008644 <USBH_ParseDevDesc+0x8a>
 800863e:	e006      	b.n	800864e <USBH_ParseDevDesc+0x94>
 8008640:	2b40      	cmp	r3, #64	; 0x40
 8008642:	d104      	bne.n	800864e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	79da      	ldrb	r2, [r3, #7]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	71da      	strb	r2, [r3, #7]
      break;
 800864c:	e003      	b.n	8008656 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2240      	movs	r2, #64	; 0x40
 8008652:	71da      	strb	r2, [r3, #7]
      break;
 8008654:	bf00      	nop
  }

  if (length > 8U)
 8008656:	88fb      	ldrh	r3, [r7, #6]
 8008658:	2b08      	cmp	r3, #8
 800865a:	d939      	bls.n	80086d0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	3308      	adds	r3, #8
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	b29a      	uxth	r2, r3
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	3309      	adds	r3, #9
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	b29b      	uxth	r3, r3
 800866c:	021b      	lsls	r3, r3, #8
 800866e:	b29b      	uxth	r3, r3
 8008670:	4313      	orrs	r3, r2
 8008672:	b29a      	uxth	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	330a      	adds	r3, #10
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	b29a      	uxth	r2, r3
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	330b      	adds	r3, #11
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	b29b      	uxth	r3, r3
 8008688:	021b      	lsls	r3, r3, #8
 800868a:	b29b      	uxth	r3, r3
 800868c:	4313      	orrs	r3, r2
 800868e:	b29a      	uxth	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	330c      	adds	r3, #12
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	b29a      	uxth	r2, r3
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	330d      	adds	r3, #13
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	021b      	lsls	r3, r3, #8
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	4313      	orrs	r3, r2
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	7b9a      	ldrb	r2, [r3, #14]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	7bda      	ldrb	r2, [r3, #15]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	7c1a      	ldrb	r2, [r3, #16]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	7c5a      	ldrb	r2, [r3, #17]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	745a      	strb	r2, [r3, #17]
  }
}
 80086d0:	bf00      	nop
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b08c      	sub	sp, #48	; 0x30
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	4613      	mov	r3, r2
 80086e8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80086f0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80086fc:	2300      	movs	r3, #0
 80086fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008702:	2300      	movs	r3, #0
 8008704:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	781a      	ldrb	r2, [r3, #0]
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	785a      	ldrb	r2, [r3, #1]
 8008718:	6a3b      	ldr	r3, [r7, #32]
 800871a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	3302      	adds	r3, #2
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	b29a      	uxth	r2, r3
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	3303      	adds	r3, #3
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	b29b      	uxth	r3, r3
 800872c:	021b      	lsls	r3, r3, #8
 800872e:	b29b      	uxth	r3, r3
 8008730:	4313      	orrs	r3, r2
 8008732:	b29b      	uxth	r3, r3
 8008734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008738:	bf28      	it	cs
 800873a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800873e:	b29a      	uxth	r2, r3
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	791a      	ldrb	r2, [r3, #4]
 8008748:	6a3b      	ldr	r3, [r7, #32]
 800874a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	795a      	ldrb	r2, [r3, #5]
 8008750:	6a3b      	ldr	r3, [r7, #32]
 8008752:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	799a      	ldrb	r2, [r3, #6]
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	79da      	ldrb	r2, [r3, #7]
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	7a1a      	ldrb	r2, [r3, #8]
 8008768:	6a3b      	ldr	r3, [r7, #32]
 800876a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	2b09      	cmp	r3, #9
 8008772:	d002      	beq.n	800877a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008774:	6a3b      	ldr	r3, [r7, #32]
 8008776:	2209      	movs	r2, #9
 8008778:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800877a:	88fb      	ldrh	r3, [r7, #6]
 800877c:	2b09      	cmp	r3, #9
 800877e:	f240 809d 	bls.w	80088bc <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008782:	2309      	movs	r3, #9
 8008784:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008786:	2300      	movs	r3, #0
 8008788:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800878a:	e081      	b.n	8008890 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800878c:	f107 0316 	add.w	r3, r7, #22
 8008790:	4619      	mov	r1, r3
 8008792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008794:	f000 f99f 	bl	8008ad6 <USBH_GetNextDesc>
 8008798:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800879a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879c:	785b      	ldrb	r3, [r3, #1]
 800879e:	2b04      	cmp	r3, #4
 80087a0:	d176      	bne.n	8008890 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80087a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	2b09      	cmp	r3, #9
 80087a8:	d002      	beq.n	80087b0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80087aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ac:	2209      	movs	r2, #9
 80087ae:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80087b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087b4:	221a      	movs	r2, #26
 80087b6:	fb02 f303 	mul.w	r3, r2, r3
 80087ba:	3308      	adds	r3, #8
 80087bc:	6a3a      	ldr	r2, [r7, #32]
 80087be:	4413      	add	r3, r2
 80087c0:	3302      	adds	r3, #2
 80087c2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80087c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087c6:	69f8      	ldr	r0, [r7, #28]
 80087c8:	f000 f87e 	bl	80088c8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80087cc:	2300      	movs	r3, #0
 80087ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80087d2:	2300      	movs	r3, #0
 80087d4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80087d6:	e043      	b.n	8008860 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80087d8:	f107 0316 	add.w	r3, r7, #22
 80087dc:	4619      	mov	r1, r3
 80087de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087e0:	f000 f979 	bl	8008ad6 <USBH_GetNextDesc>
 80087e4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80087e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e8:	785b      	ldrb	r3, [r3, #1]
 80087ea:	2b05      	cmp	r3, #5
 80087ec:	d138      	bne.n	8008860 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	795b      	ldrb	r3, [r3, #5]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d10f      	bne.n	8008816 <USBH_ParseCfgDesc+0x13a>
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	799b      	ldrb	r3, [r3, #6]
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d10b      	bne.n	8008816 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	79db      	ldrb	r3, [r3, #7]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10f      	bne.n	8008826 <USBH_ParseCfgDesc+0x14a>
 8008806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	2b09      	cmp	r3, #9
 800880c:	d00b      	beq.n	8008826 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800880e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008810:	2209      	movs	r2, #9
 8008812:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008814:	e007      	b.n	8008826 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	2b07      	cmp	r3, #7
 800881c:	d004      	beq.n	8008828 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800881e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008820:	2207      	movs	r2, #7
 8008822:	701a      	strb	r2, [r3, #0]
 8008824:	e000      	b.n	8008828 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008826:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800882c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008830:	3201      	adds	r2, #1
 8008832:	00d2      	lsls	r2, r2, #3
 8008834:	211a      	movs	r1, #26
 8008836:	fb01 f303 	mul.w	r3, r1, r3
 800883a:	4413      	add	r3, r2
 800883c:	3308      	adds	r3, #8
 800883e:	6a3a      	ldr	r2, [r7, #32]
 8008840:	4413      	add	r3, r2
 8008842:	3304      	adds	r3, #4
 8008844:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008848:	69b9      	ldr	r1, [r7, #24]
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f000 f86b 	bl	8008926 <USBH_ParseEPDesc>
 8008850:	4603      	mov	r3, r0
 8008852:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008856:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800885a:	3301      	adds	r3, #1
 800885c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	791b      	ldrb	r3, [r3, #4]
 8008864:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008868:	429a      	cmp	r2, r3
 800886a:	d204      	bcs.n	8008876 <USBH_ParseCfgDesc+0x19a>
 800886c:	6a3b      	ldr	r3, [r7, #32]
 800886e:	885a      	ldrh	r2, [r3, #2]
 8008870:	8afb      	ldrh	r3, [r7, #22]
 8008872:	429a      	cmp	r2, r3
 8008874:	d8b0      	bhi.n	80087d8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	791b      	ldrb	r3, [r3, #4]
 800887a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800887e:	429a      	cmp	r2, r3
 8008880:	d201      	bcs.n	8008886 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008882:	2303      	movs	r3, #3
 8008884:	e01c      	b.n	80088c0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800888a:	3301      	adds	r3, #1
 800888c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008894:	2b01      	cmp	r3, #1
 8008896:	d805      	bhi.n	80088a4 <USBH_ParseCfgDesc+0x1c8>
 8008898:	6a3b      	ldr	r3, [r7, #32]
 800889a:	885a      	ldrh	r2, [r3, #2]
 800889c:	8afb      	ldrh	r3, [r7, #22]
 800889e:	429a      	cmp	r2, r3
 80088a0:	f63f af74 	bhi.w	800878c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	791b      	ldrb	r3, [r3, #4]
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	bf28      	it	cs
 80088ac:	2302      	movcs	r3, #2
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d201      	bcs.n	80088bc <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e001      	b.n	80088c0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80088bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3730      	adds	r7, #48	; 0x30
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	781a      	ldrb	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	785a      	ldrb	r2, [r3, #1]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	789a      	ldrb	r2, [r3, #2]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	78da      	ldrb	r2, [r3, #3]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	791a      	ldrb	r2, [r3, #4]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	795a      	ldrb	r2, [r3, #5]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	799a      	ldrb	r2, [r3, #6]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	79da      	ldrb	r2, [r3, #7]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	7a1a      	ldrb	r2, [r3, #8]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	721a      	strb	r2, [r3, #8]
}
 800891a:	bf00      	nop
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008926:	b480      	push	{r7}
 8008928:	b087      	sub	sp, #28
 800892a:	af00      	add	r7, sp, #0
 800892c:	60f8      	str	r0, [r7, #12]
 800892e:	60b9      	str	r1, [r7, #8]
 8008930:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	781a      	ldrb	r2, [r3, #0]
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	785a      	ldrb	r2, [r3, #1]
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	789a      	ldrb	r2, [r3, #2]
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	78da      	ldrb	r2, [r3, #3]
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	3304      	adds	r3, #4
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	b29a      	uxth	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	3305      	adds	r3, #5
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	b29b      	uxth	r3, r3
 8008966:	021b      	lsls	r3, r3, #8
 8008968:	b29b      	uxth	r3, r3
 800896a:	4313      	orrs	r3, r2
 800896c:	b29a      	uxth	r2, r3
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	799a      	ldrb	r2, [r3, #6]
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	889b      	ldrh	r3, [r3, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d102      	bne.n	8008988 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008982:	2303      	movs	r3, #3
 8008984:	75fb      	strb	r3, [r7, #23]
 8008986:	e033      	b.n	80089f0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	889b      	ldrh	r3, [r3, #4]
 800898c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008990:	f023 0307 	bic.w	r3, r3, #7
 8008994:	b29a      	uxth	r2, r3
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	889b      	ldrh	r3, [r3, #4]
 800899e:	b21a      	sxth	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	3304      	adds	r3, #4
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	b299      	uxth	r1, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	3305      	adds	r3, #5
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	021b      	lsls	r3, r3, #8
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	430b      	orrs	r3, r1
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d110      	bne.n	80089e2 <USBH_ParseEPDesc+0xbc>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	3304      	adds	r3, #4
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	b299      	uxth	r1, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	3305      	adds	r3, #5
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	021b      	lsls	r3, r3, #8
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	430b      	orrs	r3, r1
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	b21b      	sxth	r3, r3
 80089da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089de:	b21b      	sxth	r3, r3
 80089e0:	e001      	b.n	80089e6 <USBH_ParseEPDesc+0xc0>
 80089e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089e6:	4313      	orrs	r3, r2
 80089e8:	b21b      	sxth	r3, r3
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d116      	bne.n	8008a28 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	78db      	ldrb	r3, [r3, #3]
 80089fe:	f003 0303 	and.w	r3, r3, #3
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d005      	beq.n	8008a12 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	78db      	ldrb	r3, [r3, #3]
 8008a0a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008a0e:	2b03      	cmp	r3, #3
 8008a10:	d127      	bne.n	8008a62 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	799b      	ldrb	r3, [r3, #6]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <USBH_ParseEPDesc+0xfc>
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	799b      	ldrb	r3, [r3, #6]
 8008a1e:	2b10      	cmp	r3, #16
 8008a20:	d91f      	bls.n	8008a62 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008a22:	2303      	movs	r3, #3
 8008a24:	75fb      	strb	r3, [r7, #23]
 8008a26:	e01c      	b.n	8008a62 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	78db      	ldrb	r3, [r3, #3]
 8008a2c:	f003 0303 	and.w	r3, r3, #3
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d10a      	bne.n	8008a4a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	799b      	ldrb	r3, [r3, #6]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d003      	beq.n	8008a44 <USBH_ParseEPDesc+0x11e>
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	799b      	ldrb	r3, [r3, #6]
 8008a40:	2b10      	cmp	r3, #16
 8008a42:	d90e      	bls.n	8008a62 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008a44:	2303      	movs	r3, #3
 8008a46:	75fb      	strb	r3, [r7, #23]
 8008a48:	e00b      	b.n	8008a62 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	78db      	ldrb	r3, [r3, #3]
 8008a4e:	f003 0303 	and.w	r3, r3, #3
 8008a52:	2b03      	cmp	r3, #3
 8008a54:	d105      	bne.n	8008a62 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	799b      	ldrb	r3, [r3, #6]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	371c      	adds	r7, #28
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b087      	sub	sp, #28
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	3301      	adds	r3, #1
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d120      	bne.n	8008aca <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	1e9a      	subs	r2, r3, #2
 8008a8e:	88fb      	ldrh	r3, [r7, #6]
 8008a90:	4293      	cmp	r3, r2
 8008a92:	bf28      	it	cs
 8008a94:	4613      	movcs	r3, r2
 8008a96:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	3302      	adds	r3, #2
 8008a9c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	82fb      	strh	r3, [r7, #22]
 8008aa2:	e00b      	b.n	8008abc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008aa4:	8afb      	ldrh	r3, [r7, #22]
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	781a      	ldrb	r2, [r3, #0]
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008ab6:	8afb      	ldrh	r3, [r7, #22]
 8008ab8:	3302      	adds	r3, #2
 8008aba:	82fb      	strh	r3, [r7, #22]
 8008abc:	8afa      	ldrh	r2, [r7, #22]
 8008abe:	8abb      	ldrh	r3, [r7, #20]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d3ef      	bcc.n	8008aa4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	701a      	strb	r2, [r3, #0]
  }
}
 8008aca:	bf00      	nop
 8008acc:	371c      	adds	r7, #28
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b085      	sub	sp, #20
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	881a      	ldrh	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	4413      	add	r3, r2
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4413      	add	r3, r2
 8008afc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008afe:	68fb      	ldr	r3, [r7, #12]
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3714      	adds	r7, #20
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	4613      	mov	r3, r2
 8008b18:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	789b      	ldrb	r3, [r3, #2]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d002      	beq.n	8008b2c <USBH_CtlReq+0x20>
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d00f      	beq.n	8008b4a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008b2a:	e027      	b.n	8008b7c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	88fa      	ldrh	r2, [r7, #6]
 8008b36:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2202      	movs	r2, #2
 8008b42:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008b44:	2301      	movs	r3, #1
 8008b46:	75fb      	strb	r3, [r7, #23]
      break;
 8008b48:	e018      	b.n	8008b7c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f000 f81c 	bl	8008b88 <USBH_HandleControl>
 8008b50:	4603      	mov	r3, r0
 8008b52:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d002      	beq.n	8008b60 <USBH_CtlReq+0x54>
 8008b5a:	7dfb      	ldrb	r3, [r7, #23]
 8008b5c:	2b03      	cmp	r3, #3
 8008b5e:	d106      	bne.n	8008b6e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2201      	movs	r2, #1
 8008b64:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	761a      	strb	r2, [r3, #24]
      break;
 8008b6c:	e005      	b.n	8008b7a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008b6e:	7dfb      	ldrb	r3, [r7, #23]
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d102      	bne.n	8008b7a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2201      	movs	r2, #1
 8008b78:	709a      	strb	r2, [r3, #2]
      break;
 8008b7a:	bf00      	nop
  }
  return status;
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3718      	adds	r7, #24
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
	...

08008b88 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af02      	add	r7, sp, #8
 8008b8e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008b90:	2301      	movs	r3, #1
 8008b92:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008b94:	2300      	movs	r3, #0
 8008b96:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	7e1b      	ldrb	r3, [r3, #24]
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	2b0a      	cmp	r3, #10
 8008ba0:	f200 8156 	bhi.w	8008e50 <USBH_HandleControl+0x2c8>
 8008ba4:	a201      	add	r2, pc, #4	; (adr r2, 8008bac <USBH_HandleControl+0x24>)
 8008ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008baa:	bf00      	nop
 8008bac:	08008bd9 	.word	0x08008bd9
 8008bb0:	08008bf3 	.word	0x08008bf3
 8008bb4:	08008c5d 	.word	0x08008c5d
 8008bb8:	08008c83 	.word	0x08008c83
 8008bbc:	08008cbb 	.word	0x08008cbb
 8008bc0:	08008ce5 	.word	0x08008ce5
 8008bc4:	08008d37 	.word	0x08008d37
 8008bc8:	08008d59 	.word	0x08008d59
 8008bcc:	08008d95 	.word	0x08008d95
 8008bd0:	08008dbb 	.word	0x08008dbb
 8008bd4:	08008df9 	.word	0x08008df9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f103 0110 	add.w	r1, r3, #16
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	795b      	ldrb	r3, [r3, #5]
 8008be2:	461a      	mov	r2, r3
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f943 	bl	8008e70 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2202      	movs	r2, #2
 8008bee:	761a      	strb	r2, [r3, #24]
      break;
 8008bf0:	e139      	b.n	8008e66 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	795b      	ldrb	r3, [r3, #5]
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fccb 	bl	8009594 <USBH_LL_GetURBState>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008c02:	7bbb      	ldrb	r3, [r7, #14]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d11e      	bne.n	8008c46 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	7c1b      	ldrb	r3, [r3, #16]
 8008c0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c10:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	8adb      	ldrh	r3, [r3, #22]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00a      	beq.n	8008c30 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008c1a:	7b7b      	ldrb	r3, [r7, #13]
 8008c1c:	2b80      	cmp	r3, #128	; 0x80
 8008c1e:	d103      	bne.n	8008c28 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2203      	movs	r2, #3
 8008c24:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c26:	e115      	b.n	8008e54 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2205      	movs	r2, #5
 8008c2c:	761a      	strb	r2, [r3, #24]
      break;
 8008c2e:	e111      	b.n	8008e54 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008c30:	7b7b      	ldrb	r3, [r7, #13]
 8008c32:	2b80      	cmp	r3, #128	; 0x80
 8008c34:	d103      	bne.n	8008c3e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2209      	movs	r2, #9
 8008c3a:	761a      	strb	r2, [r3, #24]
      break;
 8008c3c:	e10a      	b.n	8008e54 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2207      	movs	r2, #7
 8008c42:	761a      	strb	r2, [r3, #24]
      break;
 8008c44:	e106      	b.n	8008e54 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008c46:	7bbb      	ldrb	r3, [r7, #14]
 8008c48:	2b04      	cmp	r3, #4
 8008c4a:	d003      	beq.n	8008c54 <USBH_HandleControl+0xcc>
 8008c4c:	7bbb      	ldrb	r3, [r7, #14]
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	f040 8100 	bne.w	8008e54 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	220b      	movs	r2, #11
 8008c58:	761a      	strb	r2, [r3, #24]
      break;
 8008c5a:	e0fb      	b.n	8008e54 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6899      	ldr	r1, [r3, #8]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	899a      	ldrh	r2, [r3, #12]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	791b      	ldrb	r3, [r3, #4]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f93a 	bl	8008eee <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2204      	movs	r2, #4
 8008c7e:	761a      	strb	r2, [r3, #24]
      break;
 8008c80:	e0f1      	b.n	8008e66 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	791b      	ldrb	r3, [r3, #4]
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fc83 	bl	8009594 <USBH_LL_GetURBState>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008c92:	7bbb      	ldrb	r3, [r7, #14]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d102      	bne.n	8008c9e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2209      	movs	r2, #9
 8008c9c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008c9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ca0:	2b05      	cmp	r3, #5
 8008ca2:	d102      	bne.n	8008caa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ca8:	e0d6      	b.n	8008e58 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008caa:	7bbb      	ldrb	r3, [r7, #14]
 8008cac:	2b04      	cmp	r3, #4
 8008cae:	f040 80d3 	bne.w	8008e58 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	220b      	movs	r2, #11
 8008cb6:	761a      	strb	r2, [r3, #24]
      break;
 8008cb8:	e0ce      	b.n	8008e58 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6899      	ldr	r1, [r3, #8]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	899a      	ldrh	r2, [r3, #12]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	795b      	ldrb	r3, [r3, #5]
 8008cc6:	2001      	movs	r0, #1
 8008cc8:	9000      	str	r0, [sp, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f8ea 	bl	8008ea4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2206      	movs	r2, #6
 8008ce0:	761a      	strb	r2, [r3, #24]
      break;
 8008ce2:	e0c0      	b.n	8008e66 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	795b      	ldrb	r3, [r3, #5]
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fc52 	bl	8009594 <USBH_LL_GetURBState>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d103      	bne.n	8008d02 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2207      	movs	r2, #7
 8008cfe:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d00:	e0ac      	b.n	8008e5c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008d02:	7bbb      	ldrb	r3, [r7, #14]
 8008d04:	2b05      	cmp	r3, #5
 8008d06:	d105      	bne.n	8008d14 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	220c      	movs	r2, #12
 8008d0c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	73fb      	strb	r3, [r7, #15]
      break;
 8008d12:	e0a3      	b.n	8008e5c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008d14:	7bbb      	ldrb	r3, [r7, #14]
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d103      	bne.n	8008d22 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2205      	movs	r2, #5
 8008d1e:	761a      	strb	r2, [r3, #24]
      break;
 8008d20:	e09c      	b.n	8008e5c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	2b04      	cmp	r3, #4
 8008d26:	f040 8099 	bne.w	8008e5c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	220b      	movs	r2, #11
 8008d2e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008d30:	2302      	movs	r3, #2
 8008d32:	73fb      	strb	r3, [r7, #15]
      break;
 8008d34:	e092      	b.n	8008e5c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	791b      	ldrb	r3, [r3, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f8d5 	bl	8008eee <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2208      	movs	r2, #8
 8008d54:	761a      	strb	r2, [r3, #24]

      break;
 8008d56:	e086      	b.n	8008e66 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	791b      	ldrb	r3, [r3, #4]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fc18 	bl	8009594 <USBH_LL_GetURBState>
 8008d64:	4603      	mov	r3, r0
 8008d66:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008d68:	7bbb      	ldrb	r3, [r7, #14]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d105      	bne.n	8008d7a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	220d      	movs	r2, #13
 8008d72:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d78:	e072      	b.n	8008e60 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008d7a:	7bbb      	ldrb	r3, [r7, #14]
 8008d7c:	2b04      	cmp	r3, #4
 8008d7e:	d103      	bne.n	8008d88 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	220b      	movs	r2, #11
 8008d84:	761a      	strb	r2, [r3, #24]
      break;
 8008d86:	e06b      	b.n	8008e60 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008d88:	7bbb      	ldrb	r3, [r7, #14]
 8008d8a:	2b05      	cmp	r3, #5
 8008d8c:	d168      	bne.n	8008e60 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	73fb      	strb	r3, [r7, #15]
      break;
 8008d92:	e065      	b.n	8008e60 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	795b      	ldrb	r3, [r3, #5]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	9200      	str	r2, [sp, #0]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	2100      	movs	r1, #0
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f87f 	bl	8008ea4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	220a      	movs	r2, #10
 8008db6:	761a      	strb	r2, [r3, #24]
      break;
 8008db8:	e055      	b.n	8008e66 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	795b      	ldrb	r3, [r3, #5]
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fbe7 	bl	8009594 <USBH_LL_GetURBState>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008dca:	7bbb      	ldrb	r3, [r7, #14]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d105      	bne.n	8008ddc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	220d      	movs	r2, #13
 8008dd8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008dda:	e043      	b.n	8008e64 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ddc:	7bbb      	ldrb	r3, [r7, #14]
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d103      	bne.n	8008dea <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2209      	movs	r2, #9
 8008de6:	761a      	strb	r2, [r3, #24]
      break;
 8008de8:	e03c      	b.n	8008e64 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008dea:	7bbb      	ldrb	r3, [r7, #14]
 8008dec:	2b04      	cmp	r3, #4
 8008dee:	d139      	bne.n	8008e64 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	220b      	movs	r2, #11
 8008df4:	761a      	strb	r2, [r3, #24]
      break;
 8008df6:	e035      	b.n	8008e64 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	7e5b      	ldrb	r3, [r3, #25]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	765a      	strb	r2, [r3, #25]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	7e5b      	ldrb	r3, [r3, #25]
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d806      	bhi.n	8008e1a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008e18:	e025      	b.n	8008e66 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e20:	2106      	movs	r1, #6
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	795b      	ldrb	r3, [r3, #5]
 8008e30:	4619      	mov	r1, r3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f90c 	bl	8009050 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	791b      	ldrb	r3, [r3, #4]
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f906 	bl	8009050 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008e4a:	2302      	movs	r3, #2
 8008e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e4e:	e00a      	b.n	8008e66 <USBH_HandleControl+0x2de>

    default:
      break;
 8008e50:	bf00      	nop
 8008e52:	e008      	b.n	8008e66 <USBH_HandleControl+0x2de>
      break;
 8008e54:	bf00      	nop
 8008e56:	e006      	b.n	8008e66 <USBH_HandleControl+0x2de>
      break;
 8008e58:	bf00      	nop
 8008e5a:	e004      	b.n	8008e66 <USBH_HandleControl+0x2de>
      break;
 8008e5c:	bf00      	nop
 8008e5e:	e002      	b.n	8008e66 <USBH_HandleControl+0x2de>
      break;
 8008e60:	bf00      	nop
 8008e62:	e000      	b.n	8008e66 <USBH_HandleControl+0x2de>
      break;
 8008e64:	bf00      	nop
  }

  return status;
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b088      	sub	sp, #32
 8008e74:	af04      	add	r7, sp, #16
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e7e:	79f9      	ldrb	r1, [r7, #7]
 8008e80:	2300      	movs	r3, #0
 8008e82:	9303      	str	r3, [sp, #12]
 8008e84:	2308      	movs	r3, #8
 8008e86:	9302      	str	r3, [sp, #8]
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	9301      	str	r3, [sp, #4]
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	2300      	movs	r3, #0
 8008e92:	2200      	movs	r2, #0
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f000 fb4c 	bl	8009532 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b088      	sub	sp, #32
 8008ea8:	af04      	add	r7, sp, #16
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	4611      	mov	r1, r2
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	80fb      	strh	r3, [r7, #6]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ec8:	7979      	ldrb	r1, [r7, #5]
 8008eca:	7e3b      	ldrb	r3, [r7, #24]
 8008ecc:	9303      	str	r3, [sp, #12]
 8008ece:	88fb      	ldrh	r3, [r7, #6]
 8008ed0:	9302      	str	r3, [sp, #8]
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	9301      	str	r3, [sp, #4]
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	9300      	str	r3, [sp, #0]
 8008eda:	2300      	movs	r3, #0
 8008edc:	2200      	movs	r2, #0
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f000 fb27 	bl	8009532 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b088      	sub	sp, #32
 8008ef2:	af04      	add	r7, sp, #16
 8008ef4:	60f8      	str	r0, [r7, #12]
 8008ef6:	60b9      	str	r1, [r7, #8]
 8008ef8:	4611      	mov	r1, r2
 8008efa:	461a      	mov	r2, r3
 8008efc:	460b      	mov	r3, r1
 8008efe:	80fb      	strh	r3, [r7, #6]
 8008f00:	4613      	mov	r3, r2
 8008f02:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f04:	7979      	ldrb	r1, [r7, #5]
 8008f06:	2300      	movs	r3, #0
 8008f08:	9303      	str	r3, [sp, #12]
 8008f0a:	88fb      	ldrh	r3, [r7, #6]
 8008f0c:	9302      	str	r3, [sp, #8]
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	9301      	str	r3, [sp, #4]
 8008f12:	2301      	movs	r3, #1
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	2300      	movs	r3, #0
 8008f18:	2201      	movs	r2, #1
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 fb09 	bl	8009532 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008f20:	2300      	movs	r3, #0

}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b088      	sub	sp, #32
 8008f2e:	af04      	add	r7, sp, #16
 8008f30:	60f8      	str	r0, [r7, #12]
 8008f32:	60b9      	str	r1, [r7, #8]
 8008f34:	4611      	mov	r1, r2
 8008f36:	461a      	mov	r2, r3
 8008f38:	460b      	mov	r3, r1
 8008f3a:	80fb      	strh	r3, [r7, #6]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d001      	beq.n	8008f4e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f4e:	7979      	ldrb	r1, [r7, #5]
 8008f50:	7e3b      	ldrb	r3, [r7, #24]
 8008f52:	9303      	str	r3, [sp, #12]
 8008f54:	88fb      	ldrh	r3, [r7, #6]
 8008f56:	9302      	str	r3, [sp, #8]
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	9301      	str	r3, [sp, #4]
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	2302      	movs	r3, #2
 8008f62:	2200      	movs	r2, #0
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 fae4 	bl	8009532 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b088      	sub	sp, #32
 8008f78:	af04      	add	r7, sp, #16
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	4611      	mov	r1, r2
 8008f80:	461a      	mov	r2, r3
 8008f82:	460b      	mov	r3, r1
 8008f84:	80fb      	strh	r3, [r7, #6]
 8008f86:	4613      	mov	r3, r2
 8008f88:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f8a:	7979      	ldrb	r1, [r7, #5]
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	9303      	str	r3, [sp, #12]
 8008f90:	88fb      	ldrh	r3, [r7, #6]
 8008f92:	9302      	str	r3, [sp, #8]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	9301      	str	r3, [sp, #4]
 8008f98:	2301      	movs	r3, #1
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f000 fac6 	bl	8009532 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af04      	add	r7, sp, #16
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	4608      	mov	r0, r1
 8008fba:	4611      	mov	r1, r2
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	70fb      	strb	r3, [r7, #3]
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	70bb      	strb	r3, [r7, #2]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008fca:	7878      	ldrb	r0, [r7, #1]
 8008fcc:	78ba      	ldrb	r2, [r7, #2]
 8008fce:	78f9      	ldrb	r1, [r7, #3]
 8008fd0:	8b3b      	ldrh	r3, [r7, #24]
 8008fd2:	9302      	str	r3, [sp, #8]
 8008fd4:	7d3b      	ldrb	r3, [r7, #20]
 8008fd6:	9301      	str	r3, [sp, #4]
 8008fd8:	7c3b      	ldrb	r3, [r7, #16]
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	4603      	mov	r3, r0
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fa59 	bl	8009496 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b082      	sub	sp, #8
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008ffa:	78fb      	ldrb	r3, [r7, #3]
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fa78 	bl	80094f4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	460b      	mov	r3, r1
 8009018:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f836 	bl	800908c <USBH_GetFreePipe>
 8009020:	4603      	mov	r3, r0
 8009022:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009024:	89fb      	ldrh	r3, [r7, #14]
 8009026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800902a:	4293      	cmp	r3, r2
 800902c:	d00a      	beq.n	8009044 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800902e:	78fa      	ldrb	r2, [r7, #3]
 8009030:	89fb      	ldrh	r3, [r7, #14]
 8009032:	f003 030f 	and.w	r3, r3, #15
 8009036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800903a:	6879      	ldr	r1, [r7, #4]
 800903c:	33e0      	adds	r3, #224	; 0xe0
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	440b      	add	r3, r1
 8009042:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009044:	89fb      	ldrh	r3, [r7, #14]
 8009046:	b2db      	uxtb	r3, r3
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	460b      	mov	r3, r1
 800905a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800905c:	78fb      	ldrb	r3, [r7, #3]
 800905e:	2b0f      	cmp	r3, #15
 8009060:	d80d      	bhi.n	800907e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009062:	78fb      	ldrb	r3, [r7, #3]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	33e0      	adds	r3, #224	; 0xe0
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	78fb      	ldrb	r3, [r7, #3]
 8009070:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009074:	6879      	ldr	r1, [r7, #4]
 8009076:	33e0      	adds	r3, #224	; 0xe0
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	440b      	add	r3, r1
 800907c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009094:	2300      	movs	r3, #0
 8009096:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009098:	2300      	movs	r3, #0
 800909a:	73fb      	strb	r3, [r7, #15]
 800909c:	e00f      	b.n	80090be <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800909e:	7bfb      	ldrb	r3, [r7, #15]
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	33e0      	adds	r3, #224	; 0xe0
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	4413      	add	r3, r2
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d102      	bne.n	80090b8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	e007      	b.n	80090c8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80090b8:	7bfb      	ldrb	r3, [r7, #15]
 80090ba:	3301      	adds	r3, #1
 80090bc:	73fb      	strb	r3, [r7, #15]
 80090be:	7bfb      	ldrb	r3, [r7, #15]
 80090c0:	2b0f      	cmp	r3, #15
 80090c2:	d9ec      	bls.n	800909e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80090c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 80090d8:	2200      	movs	r2, #0
 80090da:	490e      	ldr	r1, [pc, #56]	; (8009114 <MX_USB_HOST_Init+0x40>)
 80090dc:	480e      	ldr	r0, [pc, #56]	; (8009118 <MX_USB_HOST_Init+0x44>)
 80090de:	f7fe fba7 	bl	8007830 <USBH_Init>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80090e8:	f7f7 fde6 	bl	8000cb8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 80090ec:	490b      	ldr	r1, [pc, #44]	; (800911c <MX_USB_HOST_Init+0x48>)
 80090ee:	480a      	ldr	r0, [pc, #40]	; (8009118 <MX_USB_HOST_Init+0x44>)
 80090f0:	f7fe fc2c 	bl	800794c <USBH_RegisterClass>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80090fa:	f7f7 fddd 	bl	8000cb8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80090fe:	4806      	ldr	r0, [pc, #24]	; (8009118 <MX_USB_HOST_Init+0x44>)
 8009100:	f7fe fcb0 	bl	8007a64 <USBH_Start>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800910a:	f7f7 fdd5 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800910e:	bf00      	nop
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	08009135 	.word	0x08009135
 8009118:	20000814 	.word	0x20000814
 800911c:	200004c0 	.word	0x200004c0

08009120 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 8009124:	4802      	ldr	r0, [pc, #8]	; (8009130 <MX_USB_HOST_Process+0x10>)
 8009126:	f7fe fcad 	bl	8007a84 <USBH_Process>
}
 800912a:	bf00      	nop
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	20000814 	.word	0x20000814

08009134 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	460b      	mov	r3, r1
 800913e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009140:	78fb      	ldrb	r3, [r7, #3]
 8009142:	3b01      	subs	r3, #1
 8009144:	2b04      	cmp	r3, #4
 8009146:	d819      	bhi.n	800917c <USBH_UserProcess+0x48>
 8009148:	a201      	add	r2, pc, #4	; (adr r2, 8009150 <USBH_UserProcess+0x1c>)
 800914a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914e:	bf00      	nop
 8009150:	0800917d 	.word	0x0800917d
 8009154:	0800916d 	.word	0x0800916d
 8009158:	0800917d 	.word	0x0800917d
 800915c:	08009175 	.word	0x08009175
 8009160:	08009165 	.word	0x08009165
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009164:	4b09      	ldr	r3, [pc, #36]	; (800918c <USBH_UserProcess+0x58>)
 8009166:	2203      	movs	r2, #3
 8009168:	701a      	strb	r2, [r3, #0]
  break;
 800916a:	e008      	b.n	800917e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800916c:	4b07      	ldr	r3, [pc, #28]	; (800918c <USBH_UserProcess+0x58>)
 800916e:	2202      	movs	r2, #2
 8009170:	701a      	strb	r2, [r3, #0]
  break;
 8009172:	e004      	b.n	800917e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009174:	4b05      	ldr	r3, [pc, #20]	; (800918c <USBH_UserProcess+0x58>)
 8009176:	2201      	movs	r2, #1
 8009178:	701a      	strb	r2, [r3, #0]
  break;
 800917a:	e000      	b.n	800917e <USBH_UserProcess+0x4a>

  default:
  break;
 800917c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800917e:	bf00      	nop
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	20000bec 	.word	0x20000bec

08009190 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b08a      	sub	sp, #40	; 0x28
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009198:	f107 0314 	add.w	r3, r7, #20
 800919c:	2200      	movs	r2, #0
 800919e:	601a      	str	r2, [r3, #0]
 80091a0:	605a      	str	r2, [r3, #4]
 80091a2:	609a      	str	r2, [r3, #8]
 80091a4:	60da      	str	r2, [r3, #12]
 80091a6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a24      	ldr	r2, [pc, #144]	; (8009240 <HAL_HCD_MspInit+0xb0>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d141      	bne.n	8009236 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80091b2:	2300      	movs	r3, #0
 80091b4:	613b      	str	r3, [r7, #16]
 80091b6:	4b23      	ldr	r3, [pc, #140]	; (8009244 <HAL_HCD_MspInit+0xb4>)
 80091b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ba:	4a22      	ldr	r2, [pc, #136]	; (8009244 <HAL_HCD_MspInit+0xb4>)
 80091bc:	f043 0302 	orr.w	r3, r3, #2
 80091c0:	6313      	str	r3, [r2, #48]	; 0x30
 80091c2:	4b20      	ldr	r3, [pc, #128]	; (8009244 <HAL_HCD_MspInit+0xb4>)
 80091c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c6:	f003 0302 	and.w	r3, r3, #2
 80091ca:	613b      	str	r3, [r7, #16]
 80091cc:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80091ce:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80091d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091d4:	2302      	movs	r3, #2
 80091d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091d8:	2300      	movs	r3, #0
 80091da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091dc:	2300      	movs	r3, #0
 80091de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80091e0:	230c      	movs	r3, #12
 80091e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80091e4:	f107 0314 	add.w	r3, r7, #20
 80091e8:	4619      	mov	r1, r3
 80091ea:	4817      	ldr	r0, [pc, #92]	; (8009248 <HAL_HCD_MspInit+0xb8>)
 80091ec:	f7f8 fd56 	bl	8001c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80091f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80091f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091f6:	2300      	movs	r3, #0
 80091f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091fa:	2300      	movs	r3, #0
 80091fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80091fe:	f107 0314 	add.w	r3, r7, #20
 8009202:	4619      	mov	r1, r3
 8009204:	4810      	ldr	r0, [pc, #64]	; (8009248 <HAL_HCD_MspInit+0xb8>)
 8009206:	f7f8 fd49 	bl	8001c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800920a:	2300      	movs	r3, #0
 800920c:	60fb      	str	r3, [r7, #12]
 800920e:	4b0d      	ldr	r3, [pc, #52]	; (8009244 <HAL_HCD_MspInit+0xb4>)
 8009210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009212:	4a0c      	ldr	r2, [pc, #48]	; (8009244 <HAL_HCD_MspInit+0xb4>)
 8009214:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009218:	6313      	str	r3, [r2, #48]	; 0x30
 800921a:	4b0a      	ldr	r3, [pc, #40]	; (8009244 <HAL_HCD_MspInit+0xb4>)
 800921c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800921e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009222:	60fb      	str	r3, [r7, #12]
 8009224:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009226:	2200      	movs	r2, #0
 8009228:	2100      	movs	r1, #0
 800922a:	204d      	movs	r0, #77	; 0x4d
 800922c:	f7f8 fb04 	bl	8001838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009230:	204d      	movs	r0, #77	; 0x4d
 8009232:	f7f8 fb1d 	bl	8001870 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8009236:	bf00      	nop
 8009238:	3728      	adds	r7, #40	; 0x28
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	40040000 	.word	0x40040000
 8009244:	40023800 	.word	0x40023800
 8009248:	40020400 	.word	0x40020400

0800924c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800925a:	4618      	mov	r0, r3
 800925c:	f7fe fff1 	bl	8008242 <USBH_LL_IncTimer>
}
 8009260:	bf00      	nop
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009276:	4618      	mov	r0, r3
 8009278:	f7ff f829 	bl	80082ce <USBH_LL_Connect>
}
 800927c:	bf00      	nop
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009292:	4618      	mov	r0, r3
 8009294:	f7ff f832 	bl	80082fc <USBH_LL_Disconnect>
}
 8009298:	bf00      	nop
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	460b      	mov	r3, r1
 80092aa:	70fb      	strb	r3, [r7, #3]
 80092ac:	4613      	mov	r3, r2
 80092ae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80092b0:	bf00      	nop
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7fe ffe3 	bl	8008296 <USBH_LL_PortEnabled>
}
 80092d0:	bf00      	nop
 80092d2:	3708      	adds	r7, #8
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fe ffe3 	bl	80082b2 <USBH_LL_PortDisabled>
}
 80092ec:	bf00      	nop
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009302:	2b00      	cmp	r3, #0
 8009304:	d132      	bne.n	800936c <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8009306:	4a1c      	ldr	r2, [pc, #112]	; (8009378 <USBH_LL_Init+0x84>)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a19      	ldr	r2, [pc, #100]	; (8009378 <USBH_LL_Init+0x84>)
 8009312:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8009316:	4b18      	ldr	r3, [pc, #96]	; (8009378 <USBH_LL_Init+0x84>)
 8009318:	4a18      	ldr	r2, [pc, #96]	; (800937c <USBH_LL_Init+0x88>)
 800931a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800931c:	4b16      	ldr	r3, [pc, #88]	; (8009378 <USBH_LL_Init+0x84>)
 800931e:	220c      	movs	r2, #12
 8009320:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8009322:	4b15      	ldr	r3, [pc, #84]	; (8009378 <USBH_LL_Init+0x84>)
 8009324:	2201      	movs	r2, #1
 8009326:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8009328:	4b13      	ldr	r3, [pc, #76]	; (8009378 <USBH_LL_Init+0x84>)
 800932a:	2200      	movs	r2, #0
 800932c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800932e:	4b12      	ldr	r3, [pc, #72]	; (8009378 <USBH_LL_Init+0x84>)
 8009330:	2202      	movs	r2, #2
 8009332:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8009334:	4b10      	ldr	r3, [pc, #64]	; (8009378 <USBH_LL_Init+0x84>)
 8009336:	2200      	movs	r2, #0
 8009338:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800933a:	4b0f      	ldr	r3, [pc, #60]	; (8009378 <USBH_LL_Init+0x84>)
 800933c:	2200      	movs	r2, #0
 800933e:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8009340:	4b0d      	ldr	r3, [pc, #52]	; (8009378 <USBH_LL_Init+0x84>)
 8009342:	2200      	movs	r2, #0
 8009344:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8009346:	4b0c      	ldr	r3, [pc, #48]	; (8009378 <USBH_LL_Init+0x84>)
 8009348:	2200      	movs	r2, #0
 800934a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800934c:	480a      	ldr	r0, [pc, #40]	; (8009378 <USBH_LL_Init+0x84>)
 800934e:	f7f8 fe6a 	bl	8002026 <HAL_HCD_Init>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d001      	beq.n	800935c <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8009358:	f7f7 fcae 	bl	8000cb8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800935c:	4806      	ldr	r0, [pc, #24]	; (8009378 <USBH_LL_Init+0x84>)
 800935e:	f7f9 fa4e 	bl	80027fe <HAL_HCD_GetCurrentFrame>
 8009362:	4603      	mov	r3, r0
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7fe ff5c 	bl	8008224 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	20000bf0 	.word	0x20000bf0
 800937c:	40040000 	.word	0x40040000

08009380 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009388:	2300      	movs	r3, #0
 800938a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009396:	4618      	mov	r0, r3
 8009398:	f7f9 f9bb 	bl	8002712 <HAL_HCD_Start>
 800939c:	4603      	mov	r3, r0
 800939e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 f95c 	bl	8009660 <USBH_Get_USB_Status>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b084      	sub	sp, #16
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093be:	2300      	movs	r3, #0
 80093c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093c2:	2300      	movs	r3, #0
 80093c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7f9 f9c3 	bl	8002758 <HAL_HCD_Stop>
 80093d2:	4603      	mov	r3, r0
 80093d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80093d6:	7bfb      	ldrb	r3, [r7, #15]
 80093d8:	4618      	mov	r0, r3
 80093da:	f000 f941 	bl	8009660 <USBH_Get_USB_Status>
 80093de:	4603      	mov	r3, r0
 80093e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3710      	adds	r7, #16
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80093f4:	2301      	movs	r3, #1
 80093f6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80093fe:	4618      	mov	r0, r3
 8009400:	f7f9 fa0b 	bl	800281a <HAL_HCD_GetCurrentSpeed>
 8009404:	4603      	mov	r3, r0
 8009406:	2b02      	cmp	r3, #2
 8009408:	d00c      	beq.n	8009424 <USBH_LL_GetSpeed+0x38>
 800940a:	2b02      	cmp	r3, #2
 800940c:	d80d      	bhi.n	800942a <USBH_LL_GetSpeed+0x3e>
 800940e:	2b00      	cmp	r3, #0
 8009410:	d002      	beq.n	8009418 <USBH_LL_GetSpeed+0x2c>
 8009412:	2b01      	cmp	r3, #1
 8009414:	d003      	beq.n	800941e <USBH_LL_GetSpeed+0x32>
 8009416:	e008      	b.n	800942a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009418:	2300      	movs	r3, #0
 800941a:	73fb      	strb	r3, [r7, #15]
    break;
 800941c:	e008      	b.n	8009430 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800941e:	2301      	movs	r3, #1
 8009420:	73fb      	strb	r3, [r7, #15]
    break;
 8009422:	e005      	b.n	8009430 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009424:	2302      	movs	r3, #2
 8009426:	73fb      	strb	r3, [r7, #15]
    break;
 8009428:	e002      	b.n	8009430 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800942a:	2301      	movs	r3, #1
 800942c:	73fb      	strb	r3, [r7, #15]
    break;
 800942e:	bf00      	nop
  }
  return  speed;
 8009430:	7bfb      	ldrb	r3, [r7, #15]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b084      	sub	sp, #16
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009450:	4618      	mov	r0, r3
 8009452:	f7f9 f99e 	bl	8002792 <HAL_HCD_ResetPort>
 8009456:	4603      	mov	r3, r0
 8009458:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800945a:	7bfb      	ldrb	r3, [r7, #15]
 800945c:	4618      	mov	r0, r3
 800945e:	f000 f8ff 	bl	8009660 <USBH_Get_USB_Status>
 8009462:	4603      	mov	r3, r0
 8009464:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009466:	7bbb      	ldrb	r3, [r7, #14]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	460b      	mov	r3, r1
 800947a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009482:	78fa      	ldrb	r2, [r7, #3]
 8009484:	4611      	mov	r1, r2
 8009486:	4618      	mov	r0, r3
 8009488:	f7f9 f9a5 	bl	80027d6 <HAL_HCD_HC_GetXferCount>
 800948c:	4603      	mov	r3, r0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009496:	b590      	push	{r4, r7, lr}
 8009498:	b089      	sub	sp, #36	; 0x24
 800949a:	af04      	add	r7, sp, #16
 800949c:	6078      	str	r0, [r7, #4]
 800949e:	4608      	mov	r0, r1
 80094a0:	4611      	mov	r1, r2
 80094a2:	461a      	mov	r2, r3
 80094a4:	4603      	mov	r3, r0
 80094a6:	70fb      	strb	r3, [r7, #3]
 80094a8:	460b      	mov	r3, r1
 80094aa:	70bb      	strb	r3, [r7, #2]
 80094ac:	4613      	mov	r3, r2
 80094ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094b0:	2300      	movs	r3, #0
 80094b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094b4:	2300      	movs	r3, #0
 80094b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80094be:	787c      	ldrb	r4, [r7, #1]
 80094c0:	78ba      	ldrb	r2, [r7, #2]
 80094c2:	78f9      	ldrb	r1, [r7, #3]
 80094c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80094c6:	9302      	str	r3, [sp, #8]
 80094c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80094cc:	9301      	str	r3, [sp, #4]
 80094ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	4623      	mov	r3, r4
 80094d6:	f7f8 fe08 	bl	80020ea <HAL_HCD_HC_Init>
 80094da:	4603      	mov	r3, r0
 80094dc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80094de:	7bfb      	ldrb	r3, [r7, #15]
 80094e0:	4618      	mov	r0, r3
 80094e2:	f000 f8bd 	bl	8009660 <USBH_Get_USB_Status>
 80094e6:	4603      	mov	r3, r0
 80094e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3714      	adds	r7, #20
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd90      	pop	{r4, r7, pc}

080094f4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	460b      	mov	r3, r1
 80094fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009500:	2300      	movs	r3, #0
 8009502:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009504:	2300      	movs	r3, #0
 8009506:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800950e:	78fa      	ldrb	r2, [r7, #3]
 8009510:	4611      	mov	r1, r2
 8009512:	4618      	mov	r0, r3
 8009514:	f7f8 fe78 	bl	8002208 <HAL_HCD_HC_Halt>
 8009518:	4603      	mov	r3, r0
 800951a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800951c:	7bfb      	ldrb	r3, [r7, #15]
 800951e:	4618      	mov	r0, r3
 8009520:	f000 f89e 	bl	8009660 <USBH_Get_USB_Status>
 8009524:	4603      	mov	r3, r0
 8009526:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009528:	7bbb      	ldrb	r3, [r7, #14]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009532:	b590      	push	{r4, r7, lr}
 8009534:	b089      	sub	sp, #36	; 0x24
 8009536:	af04      	add	r7, sp, #16
 8009538:	6078      	str	r0, [r7, #4]
 800953a:	4608      	mov	r0, r1
 800953c:	4611      	mov	r1, r2
 800953e:	461a      	mov	r2, r3
 8009540:	4603      	mov	r3, r0
 8009542:	70fb      	strb	r3, [r7, #3]
 8009544:	460b      	mov	r3, r1
 8009546:	70bb      	strb	r3, [r7, #2]
 8009548:	4613      	mov	r3, r2
 800954a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800954c:	2300      	movs	r3, #0
 800954e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009550:	2300      	movs	r3, #0
 8009552:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800955a:	787c      	ldrb	r4, [r7, #1]
 800955c:	78ba      	ldrb	r2, [r7, #2]
 800955e:	78f9      	ldrb	r1, [r7, #3]
 8009560:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009564:	9303      	str	r3, [sp, #12]
 8009566:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009568:	9302      	str	r3, [sp, #8]
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	9301      	str	r3, [sp, #4]
 800956e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	4623      	mov	r3, r4
 8009576:	f7f8 fe6b 	bl	8002250 <HAL_HCD_HC_SubmitRequest>
 800957a:	4603      	mov	r3, r0
 800957c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800957e:	7bfb      	ldrb	r3, [r7, #15]
 8009580:	4618      	mov	r0, r3
 8009582:	f000 f86d 	bl	8009660 <USBH_Get_USB_Status>
 8009586:	4603      	mov	r3, r0
 8009588:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800958a:	7bbb      	ldrb	r3, [r7, #14]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	bd90      	pop	{r4, r7, pc}

08009594 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	460b      	mov	r3, r1
 800959e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80095a6:	78fa      	ldrb	r2, [r7, #3]
 80095a8:	4611      	mov	r1, r2
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7f9 f8ff 	bl	80027ae <HAL_HCD_HC_GetURBState>
 80095b0:	4603      	mov	r3, r0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b082      	sub	sp, #8
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	460b      	mov	r3, r1
 80095c4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d103      	bne.n	80095d8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 80095d0:	78fb      	ldrb	r3, [r7, #3]
 80095d2:	4618      	mov	r0, r3
 80095d4:	f000 f870 	bl	80096b8 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80095d8:	20c8      	movs	r0, #200	; 0xc8
 80095da:	f7f8 f851 	bl	8001680 <HAL_Delay>
  return USBH_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	460b      	mov	r3, r1
 80095f2:	70fb      	strb	r3, [r7, #3]
 80095f4:	4613      	mov	r3, r2
 80095f6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80095fe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009600:	78fb      	ldrb	r3, [r7, #3]
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	212c      	movs	r1, #44	; 0x2c
 8009606:	fb01 f303 	mul.w	r3, r1, r3
 800960a:	4413      	add	r3, r2
 800960c:	333b      	adds	r3, #59	; 0x3b
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d009      	beq.n	8009628 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009614:	78fb      	ldrb	r3, [r7, #3]
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	212c      	movs	r1, #44	; 0x2c
 800961a:	fb01 f303 	mul.w	r3, r1, r3
 800961e:	4413      	add	r3, r2
 8009620:	3354      	adds	r3, #84	; 0x54
 8009622:	78ba      	ldrb	r2, [r7, #2]
 8009624:	701a      	strb	r2, [r3, #0]
 8009626:	e008      	b.n	800963a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009628:	78fb      	ldrb	r3, [r7, #3]
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	212c      	movs	r1, #44	; 0x2c
 800962e:	fb01 f303 	mul.w	r3, r1, r3
 8009632:	4413      	add	r3, r2
 8009634:	3355      	adds	r3, #85	; 0x55
 8009636:	78ba      	ldrb	r2, [r7, #2]
 8009638:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3714      	adds	r7, #20
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f7f8 f815 	bl	8001680 <HAL_Delay>
}
 8009656:	bf00      	nop
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
	...

08009660 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	4603      	mov	r3, r0
 8009668:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800966a:	2300      	movs	r3, #0
 800966c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800966e:	79fb      	ldrb	r3, [r7, #7]
 8009670:	2b03      	cmp	r3, #3
 8009672:	d817      	bhi.n	80096a4 <USBH_Get_USB_Status+0x44>
 8009674:	a201      	add	r2, pc, #4	; (adr r2, 800967c <USBH_Get_USB_Status+0x1c>)
 8009676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967a:	bf00      	nop
 800967c:	0800968d 	.word	0x0800968d
 8009680:	08009693 	.word	0x08009693
 8009684:	08009699 	.word	0x08009699
 8009688:	0800969f 	.word	0x0800969f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	73fb      	strb	r3, [r7, #15]
    break;
 8009690:	e00b      	b.n	80096aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009692:	2302      	movs	r3, #2
 8009694:	73fb      	strb	r3, [r7, #15]
    break;
 8009696:	e008      	b.n	80096aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009698:	2301      	movs	r3, #1
 800969a:	73fb      	strb	r3, [r7, #15]
    break;
 800969c:	e005      	b.n	80096aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800969e:	2302      	movs	r3, #2
 80096a0:	73fb      	strb	r3, [r7, #15]
    break;
 80096a2:	e002      	b.n	80096aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80096a4:	2302      	movs	r3, #2
 80096a6:	73fb      	strb	r3, [r7, #15]
    break;
 80096a8:	bf00      	nop
  }
  return usb_status;
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3714      	adds	r7, #20
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	4603      	mov	r3, r0
 80096c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80096c2:	79fb      	ldrb	r3, [r7, #7]
 80096c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 80096c6:	79fb      	ldrb	r3, [r7, #7]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d102      	bne.n	80096d2 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80096cc:	2301      	movs	r3, #1
 80096ce:	73fb      	strb	r3, [r7, #15]
 80096d0:	e001      	b.n	80096d6 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80096d2:	2300      	movs	r3, #0
 80096d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 80096d6:	7bfb      	ldrb	r3, [r7, #15]
 80096d8:	461a      	mov	r2, r3
 80096da:	2110      	movs	r1, #16
 80096dc:	4803      	ldr	r0, [pc, #12]	; (80096ec <MX_DriverVbusHS+0x34>)
 80096de:	f7f8 fc89 	bl	8001ff4 <HAL_GPIO_WritePin>
}
 80096e2:	bf00      	nop
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	40020800 	.word	0x40020800

080096f0 <__errno>:
 80096f0:	4b01      	ldr	r3, [pc, #4]	; (80096f8 <__errno+0x8>)
 80096f2:	6818      	ldr	r0, [r3, #0]
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	200004e0 	.word	0x200004e0

080096fc <__libc_init_array>:
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	4d0d      	ldr	r5, [pc, #52]	; (8009734 <__libc_init_array+0x38>)
 8009700:	4c0d      	ldr	r4, [pc, #52]	; (8009738 <__libc_init_array+0x3c>)
 8009702:	1b64      	subs	r4, r4, r5
 8009704:	10a4      	asrs	r4, r4, #2
 8009706:	2600      	movs	r6, #0
 8009708:	42a6      	cmp	r6, r4
 800970a:	d109      	bne.n	8009720 <__libc_init_array+0x24>
 800970c:	4d0b      	ldr	r5, [pc, #44]	; (800973c <__libc_init_array+0x40>)
 800970e:	4c0c      	ldr	r4, [pc, #48]	; (8009740 <__libc_init_array+0x44>)
 8009710:	f000 f92e 	bl	8009970 <_init>
 8009714:	1b64      	subs	r4, r4, r5
 8009716:	10a4      	asrs	r4, r4, #2
 8009718:	2600      	movs	r6, #0
 800971a:	42a6      	cmp	r6, r4
 800971c:	d105      	bne.n	800972a <__libc_init_array+0x2e>
 800971e:	bd70      	pop	{r4, r5, r6, pc}
 8009720:	f855 3b04 	ldr.w	r3, [r5], #4
 8009724:	4798      	blx	r3
 8009726:	3601      	adds	r6, #1
 8009728:	e7ee      	b.n	8009708 <__libc_init_array+0xc>
 800972a:	f855 3b04 	ldr.w	r3, [r5], #4
 800972e:	4798      	blx	r3
 8009730:	3601      	adds	r6, #1
 8009732:	e7f2      	b.n	800971a <__libc_init_array+0x1e>
 8009734:	080099ac 	.word	0x080099ac
 8009738:	080099ac 	.word	0x080099ac
 800973c:	080099ac 	.word	0x080099ac
 8009740:	080099b0 	.word	0x080099b0

08009744 <malloc>:
 8009744:	4b02      	ldr	r3, [pc, #8]	; (8009750 <malloc+0xc>)
 8009746:	4601      	mov	r1, r0
 8009748:	6818      	ldr	r0, [r3, #0]
 800974a:	f000 b87f 	b.w	800984c <_malloc_r>
 800974e:	bf00      	nop
 8009750:	200004e0 	.word	0x200004e0

08009754 <free>:
 8009754:	4b02      	ldr	r3, [pc, #8]	; (8009760 <free+0xc>)
 8009756:	4601      	mov	r1, r0
 8009758:	6818      	ldr	r0, [r3, #0]
 800975a:	f000 b80b 	b.w	8009774 <_free_r>
 800975e:	bf00      	nop
 8009760:	200004e0 	.word	0x200004e0

08009764 <memset>:
 8009764:	4402      	add	r2, r0
 8009766:	4603      	mov	r3, r0
 8009768:	4293      	cmp	r3, r2
 800976a:	d100      	bne.n	800976e <memset+0xa>
 800976c:	4770      	bx	lr
 800976e:	f803 1b01 	strb.w	r1, [r3], #1
 8009772:	e7f9      	b.n	8009768 <memset+0x4>

08009774 <_free_r>:
 8009774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009776:	2900      	cmp	r1, #0
 8009778:	d044      	beq.n	8009804 <_free_r+0x90>
 800977a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800977e:	9001      	str	r0, [sp, #4]
 8009780:	2b00      	cmp	r3, #0
 8009782:	f1a1 0404 	sub.w	r4, r1, #4
 8009786:	bfb8      	it	lt
 8009788:	18e4      	addlt	r4, r4, r3
 800978a:	f000 f8e3 	bl	8009954 <__malloc_lock>
 800978e:	4a1e      	ldr	r2, [pc, #120]	; (8009808 <_free_r+0x94>)
 8009790:	9801      	ldr	r0, [sp, #4]
 8009792:	6813      	ldr	r3, [r2, #0]
 8009794:	b933      	cbnz	r3, 80097a4 <_free_r+0x30>
 8009796:	6063      	str	r3, [r4, #4]
 8009798:	6014      	str	r4, [r2, #0]
 800979a:	b003      	add	sp, #12
 800979c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097a0:	f000 b8de 	b.w	8009960 <__malloc_unlock>
 80097a4:	42a3      	cmp	r3, r4
 80097a6:	d908      	bls.n	80097ba <_free_r+0x46>
 80097a8:	6825      	ldr	r5, [r4, #0]
 80097aa:	1961      	adds	r1, r4, r5
 80097ac:	428b      	cmp	r3, r1
 80097ae:	bf01      	itttt	eq
 80097b0:	6819      	ldreq	r1, [r3, #0]
 80097b2:	685b      	ldreq	r3, [r3, #4]
 80097b4:	1949      	addeq	r1, r1, r5
 80097b6:	6021      	streq	r1, [r4, #0]
 80097b8:	e7ed      	b.n	8009796 <_free_r+0x22>
 80097ba:	461a      	mov	r2, r3
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	b10b      	cbz	r3, 80097c4 <_free_r+0x50>
 80097c0:	42a3      	cmp	r3, r4
 80097c2:	d9fa      	bls.n	80097ba <_free_r+0x46>
 80097c4:	6811      	ldr	r1, [r2, #0]
 80097c6:	1855      	adds	r5, r2, r1
 80097c8:	42a5      	cmp	r5, r4
 80097ca:	d10b      	bne.n	80097e4 <_free_r+0x70>
 80097cc:	6824      	ldr	r4, [r4, #0]
 80097ce:	4421      	add	r1, r4
 80097d0:	1854      	adds	r4, r2, r1
 80097d2:	42a3      	cmp	r3, r4
 80097d4:	6011      	str	r1, [r2, #0]
 80097d6:	d1e0      	bne.n	800979a <_free_r+0x26>
 80097d8:	681c      	ldr	r4, [r3, #0]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	6053      	str	r3, [r2, #4]
 80097de:	4421      	add	r1, r4
 80097e0:	6011      	str	r1, [r2, #0]
 80097e2:	e7da      	b.n	800979a <_free_r+0x26>
 80097e4:	d902      	bls.n	80097ec <_free_r+0x78>
 80097e6:	230c      	movs	r3, #12
 80097e8:	6003      	str	r3, [r0, #0]
 80097ea:	e7d6      	b.n	800979a <_free_r+0x26>
 80097ec:	6825      	ldr	r5, [r4, #0]
 80097ee:	1961      	adds	r1, r4, r5
 80097f0:	428b      	cmp	r3, r1
 80097f2:	bf04      	itt	eq
 80097f4:	6819      	ldreq	r1, [r3, #0]
 80097f6:	685b      	ldreq	r3, [r3, #4]
 80097f8:	6063      	str	r3, [r4, #4]
 80097fa:	bf04      	itt	eq
 80097fc:	1949      	addeq	r1, r1, r5
 80097fe:	6021      	streq	r1, [r4, #0]
 8009800:	6054      	str	r4, [r2, #4]
 8009802:	e7ca      	b.n	800979a <_free_r+0x26>
 8009804:	b003      	add	sp, #12
 8009806:	bd30      	pop	{r4, r5, pc}
 8009808:	20000ef4 	.word	0x20000ef4

0800980c <sbrk_aligned>:
 800980c:	b570      	push	{r4, r5, r6, lr}
 800980e:	4e0e      	ldr	r6, [pc, #56]	; (8009848 <sbrk_aligned+0x3c>)
 8009810:	460c      	mov	r4, r1
 8009812:	6831      	ldr	r1, [r6, #0]
 8009814:	4605      	mov	r5, r0
 8009816:	b911      	cbnz	r1, 800981e <sbrk_aligned+0x12>
 8009818:	f000 f88c 	bl	8009934 <_sbrk_r>
 800981c:	6030      	str	r0, [r6, #0]
 800981e:	4621      	mov	r1, r4
 8009820:	4628      	mov	r0, r5
 8009822:	f000 f887 	bl	8009934 <_sbrk_r>
 8009826:	1c43      	adds	r3, r0, #1
 8009828:	d00a      	beq.n	8009840 <sbrk_aligned+0x34>
 800982a:	1cc4      	adds	r4, r0, #3
 800982c:	f024 0403 	bic.w	r4, r4, #3
 8009830:	42a0      	cmp	r0, r4
 8009832:	d007      	beq.n	8009844 <sbrk_aligned+0x38>
 8009834:	1a21      	subs	r1, r4, r0
 8009836:	4628      	mov	r0, r5
 8009838:	f000 f87c 	bl	8009934 <_sbrk_r>
 800983c:	3001      	adds	r0, #1
 800983e:	d101      	bne.n	8009844 <sbrk_aligned+0x38>
 8009840:	f04f 34ff 	mov.w	r4, #4294967295
 8009844:	4620      	mov	r0, r4
 8009846:	bd70      	pop	{r4, r5, r6, pc}
 8009848:	20000ef8 	.word	0x20000ef8

0800984c <_malloc_r>:
 800984c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009850:	1ccd      	adds	r5, r1, #3
 8009852:	f025 0503 	bic.w	r5, r5, #3
 8009856:	3508      	adds	r5, #8
 8009858:	2d0c      	cmp	r5, #12
 800985a:	bf38      	it	cc
 800985c:	250c      	movcc	r5, #12
 800985e:	2d00      	cmp	r5, #0
 8009860:	4607      	mov	r7, r0
 8009862:	db01      	blt.n	8009868 <_malloc_r+0x1c>
 8009864:	42a9      	cmp	r1, r5
 8009866:	d905      	bls.n	8009874 <_malloc_r+0x28>
 8009868:	230c      	movs	r3, #12
 800986a:	603b      	str	r3, [r7, #0]
 800986c:	2600      	movs	r6, #0
 800986e:	4630      	mov	r0, r6
 8009870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009874:	4e2e      	ldr	r6, [pc, #184]	; (8009930 <_malloc_r+0xe4>)
 8009876:	f000 f86d 	bl	8009954 <__malloc_lock>
 800987a:	6833      	ldr	r3, [r6, #0]
 800987c:	461c      	mov	r4, r3
 800987e:	bb34      	cbnz	r4, 80098ce <_malloc_r+0x82>
 8009880:	4629      	mov	r1, r5
 8009882:	4638      	mov	r0, r7
 8009884:	f7ff ffc2 	bl	800980c <sbrk_aligned>
 8009888:	1c43      	adds	r3, r0, #1
 800988a:	4604      	mov	r4, r0
 800988c:	d14d      	bne.n	800992a <_malloc_r+0xde>
 800988e:	6834      	ldr	r4, [r6, #0]
 8009890:	4626      	mov	r6, r4
 8009892:	2e00      	cmp	r6, #0
 8009894:	d140      	bne.n	8009918 <_malloc_r+0xcc>
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	4631      	mov	r1, r6
 800989a:	4638      	mov	r0, r7
 800989c:	eb04 0803 	add.w	r8, r4, r3
 80098a0:	f000 f848 	bl	8009934 <_sbrk_r>
 80098a4:	4580      	cmp	r8, r0
 80098a6:	d13a      	bne.n	800991e <_malloc_r+0xd2>
 80098a8:	6821      	ldr	r1, [r4, #0]
 80098aa:	3503      	adds	r5, #3
 80098ac:	1a6d      	subs	r5, r5, r1
 80098ae:	f025 0503 	bic.w	r5, r5, #3
 80098b2:	3508      	adds	r5, #8
 80098b4:	2d0c      	cmp	r5, #12
 80098b6:	bf38      	it	cc
 80098b8:	250c      	movcc	r5, #12
 80098ba:	4629      	mov	r1, r5
 80098bc:	4638      	mov	r0, r7
 80098be:	f7ff ffa5 	bl	800980c <sbrk_aligned>
 80098c2:	3001      	adds	r0, #1
 80098c4:	d02b      	beq.n	800991e <_malloc_r+0xd2>
 80098c6:	6823      	ldr	r3, [r4, #0]
 80098c8:	442b      	add	r3, r5
 80098ca:	6023      	str	r3, [r4, #0]
 80098cc:	e00e      	b.n	80098ec <_malloc_r+0xa0>
 80098ce:	6822      	ldr	r2, [r4, #0]
 80098d0:	1b52      	subs	r2, r2, r5
 80098d2:	d41e      	bmi.n	8009912 <_malloc_r+0xc6>
 80098d4:	2a0b      	cmp	r2, #11
 80098d6:	d916      	bls.n	8009906 <_malloc_r+0xba>
 80098d8:	1961      	adds	r1, r4, r5
 80098da:	42a3      	cmp	r3, r4
 80098dc:	6025      	str	r5, [r4, #0]
 80098de:	bf18      	it	ne
 80098e0:	6059      	strne	r1, [r3, #4]
 80098e2:	6863      	ldr	r3, [r4, #4]
 80098e4:	bf08      	it	eq
 80098e6:	6031      	streq	r1, [r6, #0]
 80098e8:	5162      	str	r2, [r4, r5]
 80098ea:	604b      	str	r3, [r1, #4]
 80098ec:	4638      	mov	r0, r7
 80098ee:	f104 060b 	add.w	r6, r4, #11
 80098f2:	f000 f835 	bl	8009960 <__malloc_unlock>
 80098f6:	f026 0607 	bic.w	r6, r6, #7
 80098fa:	1d23      	adds	r3, r4, #4
 80098fc:	1af2      	subs	r2, r6, r3
 80098fe:	d0b6      	beq.n	800986e <_malloc_r+0x22>
 8009900:	1b9b      	subs	r3, r3, r6
 8009902:	50a3      	str	r3, [r4, r2]
 8009904:	e7b3      	b.n	800986e <_malloc_r+0x22>
 8009906:	6862      	ldr	r2, [r4, #4]
 8009908:	42a3      	cmp	r3, r4
 800990a:	bf0c      	ite	eq
 800990c:	6032      	streq	r2, [r6, #0]
 800990e:	605a      	strne	r2, [r3, #4]
 8009910:	e7ec      	b.n	80098ec <_malloc_r+0xa0>
 8009912:	4623      	mov	r3, r4
 8009914:	6864      	ldr	r4, [r4, #4]
 8009916:	e7b2      	b.n	800987e <_malloc_r+0x32>
 8009918:	4634      	mov	r4, r6
 800991a:	6876      	ldr	r6, [r6, #4]
 800991c:	e7b9      	b.n	8009892 <_malloc_r+0x46>
 800991e:	230c      	movs	r3, #12
 8009920:	603b      	str	r3, [r7, #0]
 8009922:	4638      	mov	r0, r7
 8009924:	f000 f81c 	bl	8009960 <__malloc_unlock>
 8009928:	e7a1      	b.n	800986e <_malloc_r+0x22>
 800992a:	6025      	str	r5, [r4, #0]
 800992c:	e7de      	b.n	80098ec <_malloc_r+0xa0>
 800992e:	bf00      	nop
 8009930:	20000ef4 	.word	0x20000ef4

08009934 <_sbrk_r>:
 8009934:	b538      	push	{r3, r4, r5, lr}
 8009936:	4d06      	ldr	r5, [pc, #24]	; (8009950 <_sbrk_r+0x1c>)
 8009938:	2300      	movs	r3, #0
 800993a:	4604      	mov	r4, r0
 800993c:	4608      	mov	r0, r1
 800993e:	602b      	str	r3, [r5, #0]
 8009940:	f7f7 fdea 	bl	8001518 <_sbrk>
 8009944:	1c43      	adds	r3, r0, #1
 8009946:	d102      	bne.n	800994e <_sbrk_r+0x1a>
 8009948:	682b      	ldr	r3, [r5, #0]
 800994a:	b103      	cbz	r3, 800994e <_sbrk_r+0x1a>
 800994c:	6023      	str	r3, [r4, #0]
 800994e:	bd38      	pop	{r3, r4, r5, pc}
 8009950:	20000efc 	.word	0x20000efc

08009954 <__malloc_lock>:
 8009954:	4801      	ldr	r0, [pc, #4]	; (800995c <__malloc_lock+0x8>)
 8009956:	f000 b809 	b.w	800996c <__retarget_lock_acquire_recursive>
 800995a:	bf00      	nop
 800995c:	20000f00 	.word	0x20000f00

08009960 <__malloc_unlock>:
 8009960:	4801      	ldr	r0, [pc, #4]	; (8009968 <__malloc_unlock+0x8>)
 8009962:	f000 b804 	b.w	800996e <__retarget_lock_release_recursive>
 8009966:	bf00      	nop
 8009968:	20000f00 	.word	0x20000f00

0800996c <__retarget_lock_acquire_recursive>:
 800996c:	4770      	bx	lr

0800996e <__retarget_lock_release_recursive>:
 800996e:	4770      	bx	lr

08009970 <_init>:
 8009970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009972:	bf00      	nop
 8009974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009976:	bc08      	pop	{r3}
 8009978:	469e      	mov	lr, r3
 800997a:	4770      	bx	lr

0800997c <_fini>:
 800997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997e:	bf00      	nop
 8009980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009982:	bc08      	pop	{r3}
 8009984:	469e      	mov	lr, r3
 8009986:	4770      	bx	lr
